(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[2996],{1386:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-650fec47",path:"/typescript/challenge.html",title:"type-Challenges",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"介绍",slug:"介绍",children:[]},{level:2,title:"核心知识点",slug:"核心知识点",children:[{level:3,title:"keyof和in",slug:"keyof和in",children:[]},{level:3,title:"typeof",slug:"typeof",children:[]},{level:3,title:"never",slug:"never",children:[]},{level:3,title:"extends",slug:"extends",children:[]},{level:3,title:"infer",slug:"infer",children:[]},{level:3,title:"加号和减号",slug:"加号和减号",children:[]},{level:3,title:"as",slug:"as",children:[]},{level:3,title:"is",slug:"is",children:[]},{level:3,title:"&符号",slug:"符号",children:[]}]},{level:2,title:"初级",slug:"初级",children:[{level:3,title:"Partial(可填)和Required(必填)",slug:"partial-可填-和required-必填",children:[]},{level:3,title:"Readonly(只读)和Mutable(可改)",slug:"readonly-只读-和mutable-可改",children:[]},{level:3,title:"Pick(选取)",slug:"pick-选取",children:[]},{level:3,title:"Exclude(排除)",slug:"exclude-排除",children:[]},{level:3,title:"Omit(移除)",slug:"omit-移除",children:[]},{level:3,title:"Record(构造)",slug:"record-构造",children:[]},{level:3,title:"Extract(交集)",slug:"extract-交集",children:[]},{level:3,title:"TupleToObject(元组转对象)",slug:"tupletoobject-元组转对象",children:[]},{level:3,title:"First(数组第一个元素)",slug:"first-数组第一个元素",children:[]},{level:3,title:"Length(元组的长度)",slug:"length-元组的长度",children:[]},{level:3,title:"ReturnType(函数返回类型)",slug:"returntype-函数返回类型",children:[]},{level:3,title:"PromiseType(promise包裹类型)",slug:"promisetype-promise包裹类型",children:[]},{level:3,title:"If(判断)",slug:"if-判断",children:[]},{level:3,title:"Concat(数组concat方法)",slug:"concat-数组concat方法",children:[]},{level:3,title:"Includes(数组includes方法)",slug:"includes-数组includes方法",children:[]}]},{level:2,title:"中级",slug:"中级",children:[{level:3,title:"Readony(按需Readonly)",slug:"readony-按需readonly",children:[]},{level:3,title:"DeepReadonly(深度Readonly)",slug:"deepreadonly-深度readonly",children:[]},{level:3,title:"TupleToUnion(元组转集合)",slug:"tupletounion-元组转集合",children:[]},{level:3,title:"Chainable(可串联)",slug:"chainable-可串联",children:[]},{level:3,title:"Last(数组最后一个元素)",slug:"last-数组最后一个元素",children:[]},{level:3,title:"Pop和Push",slug:"pop和push",children:[]},{level:3,title:"Shift和Unshift",slug:"shift和unshift",children:[]},{level:3,title:"PromiseAll(Promise.all返回类型)",slug:"promiseall-promise-all返回类型",children:[]},{level:3,title:"Trim、TrimLeft以及TrimRight",slug:"trim、trimleft以及trimright",children:[]},{level:3,title:"Capitalize(首字母大写)和Uncapatilize(首字母小写)",slug:"capitalize-首字母大写-和uncapatilize-首字母小写",children:[]},{level:3,title:"Replace(替换一次)和ReplaceAll(全部替换)",slug:"replace-替换一次-和replaceall-全部替换",children:[]},{level:3,title:"AppendArgument(追加参数)",slug:"appendargument-追加参数",children:[]},{level:3,title:"Permutation(元素排列)",slug:"permutation-元素排列",children:[]},{level:3,title:"LengthOfString(字符串的长度)",slug:"lengthofstring-字符串的长度",children:[]},{level:3,title:"Flatten(数组降维)",slug:"flatten-数组降维",children:[]},{level:3,title:"AppendToObject(对象添加新属性)",slug:"appendtoobject-对象添加新属性",children:[]},{level:3,title:"Absolute(绝对值)",slug:"absolute-绝对值",children:[]},{level:3,title:"StringToArray(字符串转数组)",slug:"stringtoarray-字符串转数组",children:[]},{level:3,title:"StringToUnion(字符串转联合类型)",slug:"stringtounion-字符串转联合类型",children:[]},{level:3,title:"MergeType(类型合并)",slug:"mergetype-类型合并",children:[]},{level:3,title:"CamelCase(字符串转小驼峰)",slug:"camelcase-字符串转小驼峰",children:[]},{level:3,title:"KebabCase(字符串转连字符)",slug:"kebabcase-字符串转连字符",children:[]},{level:3,title:"Diff(类型差异部分)",slug:"diff-类型差异部分",children:[]},{level:3,title:"AnyOf(数组元素真值判断)",slug:"anyof-数组元素真值判断",children:[]},{level:3,title:"IsNever(是否是Never类型)",slug:"isnever-是否是never类型",children:[]},{level:3,title:"IsUnion(是否联合类型)",slug:"isunion-是否联合类型",children:[]},{level:3,title:"ReplaceKeys(类型替换)",slug:"replacekeys-类型替换",children:[]},{level:3,title:"RemoveIndexSignature(移除索引签名)",slug:"removeindexsignature-移除索引签名",children:[]}]},{level:2,title:"困难",slug:"困难",children:[{level:3,title:"UnionToIntersection(元组取交集)",slug:"uniontointersection-元组取交集",children:[]},{level:3,title:"Currying(柯里化)",slug:"currying-柯里化",children:[]},{level:3,title:"RequiredKeys(所有必填字段)",slug:"requiredkeys-所有必填字段",children:[]},{level:3,title:"GetRequired(必填字段组成的类型)",slug:"getrequired-必填字段组成的类型",children:[]},{level:3,title:"OptionalKeys(所有可选字段)",slug:"optionalkeys-所有可选字段",children:[]},{level:3,title:"GetOptional(可选字段组成的类型)",slug:"getoptional-可选字段组成的类型",children:[]},{level:3,title:"CapitalizeWords(所有单词首字母大写)",slug:"capitalizewords-所有单词首字母大写",children:[]},{level:3,title:"CamelCase(字符串转小驼峰)",slug:"camelcase-字符串转小驼峰-1",children:[]},{level:3,title:"ParsePrintFormat(字符串格式化内容)",slug:"parseprintformat-字符串格式化内容",children:[]},{level:3,title:"IsAny和NotAny",slug:"isany和notany",children:[]},{level:3,title:"Get(字符串路径取值)",slug:"get-字符串路径取值",children:[]},{level:3,title:"StringToNumber(字符串数字转数字)",slug:"stringtonumber-字符串数字转数字",children:[]},{level:3,title:"FilterOut(数组元素过滤)",slug:"filterout-数组元素过滤",children:[]},{level:3,title:"TupleToEnum(元组转枚举)",slug:"tupletoenum-元组转枚举",children:[]},{level:3,title:"Format(字符串格式化函数类型)",slug:"format-字符串格式化函数类型",children:[]},{level:3,title:"LengthOfString(字符串的长度)",slug:"lengthofstring-字符串的长度-1",children:[]},{level:3,title:"Join(字符串拼接)",slug:"join-字符串拼接",children:[]},{level:3,title:"DeepPick(深层次Pick)",slug:"deeppick-深层次pick",children:[]},{level:3,title:"Camelize(类型属性键转小驼峰)",slug:"camelize-类型属性键转小驼峰",children:[]}]},{level:2,title:"地狱",slug:"地狱",children:[]},{level:2,title:"内置测试工具",slug:"内置测试工具",children:[{level:3,title:"Equal和NotEqual",slug:"equal和notequal",children:[]},{level:3,title:"isTrue和isFalse",slug:"istrue和isfalse",children:[]},{level:3,title:"Expect、ExpectTrue和ExpectFalse",slug:"expect、expecttrue和expectfalse",children:[]},{level:3,title:"IsAny和NotAny",slug:"isany和notany-1",children:[]}]}],filePathRelative:"typescript/challenge.md",git:{updatedTime:1626959386e3,contributors:[{name:"jun6.li",email:"jun6.li@ly.com",commits:1}]}}},2526:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>C});var e=a(4057);const t=(0,e.Wm)("h1",{id:"type-challenges",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#type-challenges","aria-hidden":"true"},"#"),(0,e.Uk)(" type-Challenges")],-1),p=(0,e.Wm)("h2",{id:"介绍",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),(0,e.Uk)(" 介绍")],-1),o=(0,e.Uk)("在学习完"),c=(0,e.Wm)("code",null,"TypeScript",-1),l=(0,e.Uk)("一些基础知识后，我们已经可以熟练使用一些基本类型定义了，但对于"),r=(0,e.Wm)("code",null,"TypeScript",-1),i=(0,e.Uk)("的高级用法却依旧无法入门，为了更有趣的学习"),k=(0,e.Wm)("code",null,"TypeScript",-1),d=(0,e.Uk)("高级用法，我们选择"),u={href:"https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("Type-Challenges"),g=(0,e.Uk)("类型挑战来作为我们学习的目标。"),y=(0,e.uE)("<p>在<code>Type-Challenges</code>中，我们可以从<code>简单</code>、<code>中等</code>、<code>困难</code>以及<code>地狱</code>难度，循序渐进的学习<code>TypeScript</code>高级技巧。</p><p>如果你需要选择其他的方向来深入学习高级技巧，这里也有一些推荐的开源项目：</p>",2),m=(0,e.Wm)("li",null,[(0,e.Uk)("官方内置：在"),(0,e.Wm)("code",null,"lib.es5.d.ts"),(0,e.Uk)("文件中，官方默认内置的一些辅助工具函数，例如："),(0,e.Wm)("code",null,"Partial"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"Required"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"Pick"),(0,e.Uk)("以及"),(0,e.Wm)("code",null,"Record"),(0,e.Uk)("等等。")],-1),b=(0,e.Uk)("非官方开源库："),f={href:"https://github.com/piotrwitek/utility-types",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("utility-types"),w=(0,e.Uk)("、"),T={href:"https://github.com/millsp/ts-toolbelt",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("ts-toolbelt"),R=(0,e.Uk)("、"),P={href:"https://github.com/andnp/SimplyTyped",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("SimplyTyped"),S=(0,e.uE)('<p>在之后的挑战中，我们会尽力对每道题进行必要的讲解，力争在进行<code>Type-Challenges</code>类型挑战时收益最大化。</p><h2 id="核心知识点" tabindex="-1"><a class="header-anchor" href="#核心知识点" aria-hidden="true">#</a> 核心知识点</h2><h3 id="keyof和in" tabindex="-1"><a class="header-anchor" href="#keyof和in" aria-hidden="true">#</a> keyof和in</h3><p>撰写中....</p><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><p>撰写中....</p><h3 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> never</h3><p>撰写中....</p><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h3><p>撰写中....</p><h3 id="infer" tabindex="-1"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h3><p>撰写中....</p><h3 id="加号和减号" tabindex="-1"><a class="header-anchor" href="#加号和减号" aria-hidden="true">#</a> 加号和减号</h3><p>撰写中....</p><h3 id="as" tabindex="-1"><a class="header-anchor" href="#as" aria-hidden="true">#</a> as</h3><p>撰写中...</p><h3 id="is" tabindex="-1"><a class="header-anchor" href="#is" aria-hidden="true">#</a> is</h3><p>撰写中...</p><h3 id="符号" tabindex="-1"><a class="header-anchor" href="#符号" aria-hidden="true">#</a> &amp;符号</h3><p>撰写中...</p><h2 id="初级" tabindex="-1"><a class="header-anchor" href="#初级" aria-hidden="true">#</a> 初级</h2><h3 id="partial-可填-和required-必填" tabindex="-1"><a class="header-anchor" href="#partial-可填-和required-必填" aria-hidden="true">#</a> Partial(可填)和Required(必填)</h3><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h4><p><code>Partial</code>和<code>Required</code>一个是让所有类型可填、另外一个是让所有类型必填，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果: { name?: string; age?: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name">PartialResult</span> <span class="token operator">=</span> MyPartial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>\n\n<span class="token comment">// 结果: { name: string; age: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name">RequiredResult</span> <span class="token operator">=</span> MyRequired<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> \n</code></pre></div><h4 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>知识点：<code>keyof</code>、<code>in</code>、<code>-</code></p></div><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">MyRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>代码解读：</p><ul><li><code>keyof T</code>：<a href="#keyof%E5%92%8Cin">keyof和in</a>。</li><li><code>P in keyof T</code>：<a href="#keyof%E5%92%8Cin">keyof和in</a>。</li><li><code>T[P]</code>：属于一个正常的取值操作，在<code>TypeScript</code>中，不能通过<code>T.P</code>的形式取值，而应该用<code>T[P]</code>。</li><li><code>-?</code>：<a href="#%E5%8A%A0%E5%8F%B7%E5%92%8C%E5%87%8F%E5%8F%B7">加号和减号</a>。</li></ul><h3 id="readonly-只读-和mutable-可改" tabindex="-1"><a class="header-anchor" href="#readonly-只读-和mutable-可改" aria-hidden="true">#</a> Readonly(只读)和Mutable(可改)</h3><h4 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1" aria-hidden="true">#</a> 用法</h4><p><code>Readonly</code>和<code>Mutable</code>一个是让所有属性变为只读，另外一个是让所有属性变为可改的(移除<code>readonly</code>关键词)，其用法为：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果：{ readonly name: string; readonly age: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name">ReadonlyResult</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>\n\n<span class="token comment">// 结果：{ name: string; age: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name">MutableResult</span> <span class="token operator">=</span> 和Mutable<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-1" tabindex="-1"><a class="header-anchor" href="#实现方式-1" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">MyMutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>代码解读：</p><ul><li><code>keyof T</code>：<a href="#keyof%E5%92%8Cin">keyof和in</a>。</li><li><code>P in keyof T</code>：<a href="#keyof%E5%92%8Cin">keyof和in</a>。</li><li><code>T[P]</code>：属于一个正常的取值操作，在<code>TypeScript</code>中，不能通过<code>T.P</code>的形式取值，而应该用<code>T[P]</code>。</li><li><code>-readonly</code>：表示把<code>readonly</code>关键词去掉，去掉之后此字段变为可改的，知识点<a href="#%E5%8A%A0%E5%8F%B7%E5%92%8C%E5%87%8F%E5%8F%B7">加号和减号</a>。</li></ul><h3 id="pick-选取" tabindex="-1"><a class="header-anchor" href="#pick-选取" aria-hidden="true">#</a> Pick(选取)</h3><h4 id="用法-2" tabindex="-1"><a class="header-anchor" href="#用法-2" aria-hidden="true">#</a> 用法</h4><p><code>Pick</code>表示从一个类型中选取指定的几个字段组合成一个新的类型，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  sex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 结果: { name: string; address: string; }</span>\n<span class="token keyword">type</span> <span class="token class-name">PickResult</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-2" tabindex="-1"><a class="header-anchor" href="#实现方式-2" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>K extends keyof T</code>：表示<code>K</code>只能是<code>keyof T</code>的子类型，如果我们在使用<code>Pick</code>的时候传递了不存在于<code>T</code>的字段，会报错：</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 报错：phone无法分配给keyof T</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;phone&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><ul><li><code>P in K</code>：<a href="#keyof%E5%92%8Cin">keyof和in</a></li></ul><h3 id="exclude-排除" tabindex="-1"><a class="header-anchor" href="#exclude-排除" aria-hidden="true">#</a> Exclude(排除)</h3><h4 id="用法-3" tabindex="-1"><a class="header-anchor" href="#用法-3" aria-hidden="true">#</a> 用法</h4><p><code>Exclude</code>是排除的意思，它从<code>T</code>类型中排除属于<code>U</code>类型的子集，可以理解成取<code>T</code>对于<code>U</code>的差集，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：&#39;name&#39;|&#39;age&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">ExcludeResult</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-3" tabindex="-1"><a class="header-anchor" href="#实现方式-3" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span>\n</code></pre></div><ul><li><code>never</code>：<a href="#never">never</a></li><li><code>T extends U</code>：会从<code>T</code>的子类型开始分发，例如：</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> \n<span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span>\n<span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span>\n  <span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">|</span>\n  <span class="token string">&#39;sex&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;sex&#39;</span>\n<span class="token punctuation">)</span>\n<span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span>\n</code></pre></div><h3 id="omit-移除" tabindex="-1"><a class="header-anchor" href="#omit-移除" aria-hidden="true">#</a> Omit(移除)</h3><h4 id="用法-4" tabindex="-1"><a class="header-anchor" href="#用法-4" aria-hidden="true">#</a> 用法</h4><p><code>Omit</code>是移除的意思，它用来在<code>T</code>类型中移除指定的字段，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果：{ name？: string; age: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name">OmitResult</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-4" tabindex="-1"><a class="header-anchor" href="#实现方式-4" aria-hidden="true">#</a> 实现方式</h4><p><code>Omit</code>可以借助在上面已经实现过的<code>Pick</code>和<code>Exclude</code>配合来实现，如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// Pick实现</span>\n<span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Exclude实现</span>\n<span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token comment">// Omit实现</span>\n<span class="token keyword">type</span> <span class="token class-name">MyOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> MyExclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span>\n</code></pre></div><p>代码详解：</p><ul><li>使用<code>MyExclude&lt;keyof T, K&gt;</code>，我们能从<code>T</code>中移除指定的字段，得到一个联合类型，例如：<code>&#39;name&#39;|&#39;age&#39;</code></li><li>使用<code>MyPick&lt;T, &#39;name&#39;|&#39;age&#39;&gt;</code>，我们可以从<code>T</code>中选取这两个字段组合成一个新的类型。</li></ul><h3 id="record-构造" tabindex="-1"><a class="header-anchor" href="#record-构造" aria-hidden="true">#</a> Record(构造)</h3><h4 id="用法-5" tabindex="-1"><a class="header-anchor" href="#用法-5" aria-hidden="true">#</a> 用法</h4><p><code>Record&lt;K, T&gt;</code>用来将<code>K</code>的每一个键(<code>k</code>)指定为<code>T</code>类型，这样由多个<code>k/T</code>组合成了一个新的类型，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">keys</span> <span class="token operator">=</span> <span class="token string">&#39;Cat&#39;</span><span class="token operator">|</span><span class="token string">&#39;Dot&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  Cat<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  Dog<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果：Expected</span>\n<span class="token keyword">type</span> <span class="token class-name">RecordResult</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>keys<span class="token punctuation">,</span> Animal<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-5" tabindex="-1"><a class="header-anchor" href="#实现方式-5" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyRecord<span class="token operator">&lt;</span>k <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>k extends keyof any</code>：此代码表示<code>K</code>是<code>keyof any</code>任意类型其所有键的子类型，例如：</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// K为 ‘Dog’|&#39;cat&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">UnionKeys</span> <span class="token operator">=</span> <span class="token string">&#39;Dog&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Cat&#39;</span>\n\n<span class="token comment">// K为‘name’|&#39;age&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">TypeKeys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person\n</code></pre></div><h3 id="extract-交集" tabindex="-1"><a class="header-anchor" href="#extract-交集" aria-hidden="true">#</a> Extract(交集)</h3><h4 id="用法-6" tabindex="-1"><a class="header-anchor" href="#用法-6" aria-hidden="true">#</a> 用法</h4><p><code>Extract&lt;T, U&gt;</code>用来取联合类型<code>T</code>和<code>U</code>的交集，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果：{ age:number;address:string; }</span>\n<span class="token keyword">type</span> <span class="token class-name">ExtractResult</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Person<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-6" tabindex="-1"><a class="header-anchor" href="#实现方式-6" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyExtract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T extends U</code>：此代码会自动将<code>T</code>的子类型进行分发，例如：</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span>\n<span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">T</span> <span class="token operator">:</span> <span class="token parameter">never</span>\n<span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">:</span> never <span class="token operator">|</span>\n  <span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> never <span class="token operator">|</span>\n  <span class="token string">&#39;address&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> never\n<span class="token punctuation">)</span>\n<span class="token operator">=&gt;</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span>\n</code></pre></div><h3 id="tupletoobject-元组转对象" tabindex="-1"><a class="header-anchor" href="#tupletoobject-元组转对象" aria-hidden="true">#</a> TupleToObject(元组转对象)</h3><h4 id="用法-7" tabindex="-1"><a class="header-anchor" href="#用法-7" aria-hidden="true">#</a> 用法</h4><p><code>TupleToObject&lt;T&gt;</code>是用来把一个元组转换成一个<code>key/value</code>相同的对象，例如：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">tuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>\n<span class="token comment">// 结果：{ msg: &#39;msg&#39;; name: &#39;name&#39;; }</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tuple<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-7" tabindex="-1"><a class="header-anchor" href="#实现方式-7" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>as const</code>：常用来进行常量断言，在此处表示将<code>[&#39;msg&#39;,&#39;name&#39;]</code>推导常量元组，表示其不能新增、删除、修改元素。我们也可以使用<code>as readonly</code>来理解。</li><li><code>T[number]</code>：表示返回元素所有数字型索引的元素，形成一个联合类型，例如：<code>&#39;msg&#39;|&#39;name&#39;</code>。</li></ul><h3 id="first-数组第一个元素" tabindex="-1"><a class="header-anchor" href="#first-数组第一个元素" aria-hidden="true">#</a> First(数组第一个元素)</h3><h4 id="用法-8" tabindex="-1"><a class="header-anchor" href="#用法-8" aria-hidden="true">#</a> 用法</h4><p><code>First&lt;T&gt;</code>用来返回数组的第一个元素，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：3</span>\n<span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n<span class="token comment">// 结果：never</span>\n<span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-8" tabindex="-1"><a class="header-anchor" href="#实现方式-8" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T extends []</code>：用来判断<code>T</code>是否是一个空数组。</li><li><code>T[0]</code>：根据下标取数组第一个元素。</li></ul><h3 id="length-元组的长度" tabindex="-1"><a class="header-anchor" href="#length-元组的长度" aria-hidden="true">#</a> Length(元组的长度)</h3><h4 id="用法-9" tabindex="-1"><a class="header-anchor" href="#用法-9" aria-hidden="true">#</a> 用法</h4><p><code>Length&lt;T&gt;</code>用来获取一个数组(包括类数组)的长度，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：3</span>\n<span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n<span class="token comment">// 结果：10</span>\n<span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-9" tabindex="-1"><a class="header-anchor" href="#实现方式-9" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Length<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T extends { length: number; }</code>：判断<code>T</code>是否是<code>{ length: number; }</code>的子类型，如果是则代表<code>T</code>为数组或者类数组。</li><li><code>T[&#39;length&#39;]</code>：取<code>T</code>对象的<code>length</code>属性的值(注意，在<code>TypeScript</code>中不能使用<code>T.length</code>来取值，而应该使用<code>T[&#39;length&#39;]</code>)。</li></ul><h3 id="returntype-函数返回类型" tabindex="-1"><a class="header-anchor" href="#returntype-函数返回类型" aria-hidden="true">#</a> ReturnType(函数返回类型)</h3><h4 id="用法-10" tabindex="-1"><a class="header-anchor" href="#用法-10" aria-hidden="true">#</a> 用法</h4><p><code>ReturnType&lt;T&gt;</code>是用来获取一个函数的返回类型的，例如：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRandom</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 结果：number</span>\ntype result <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> getRandom<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-10" tabindex="-1"><a class="header-anchor" href="#实现方式-10" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T extends (...args: any) =&gt; infer R</code>：判断<code>T</code>类型是否是一个函数的子类型，既<code>T</code>是不是一个函数。</li><li><code>infer R</code>：表示待推导的函数返回类型为<code>R</code>，后续可以在表达式中使用<code>R</code>来代替真正的返回类型，知识点<a href="#infer">infer</a></li></ul><h3 id="promisetype-promise包裹类型" tabindex="-1"><a class="header-anchor" href="#promisetype-promise包裹类型" aria-hidden="true">#</a> PromiseType(promise包裹类型)</h3><h4 id="用法-11" tabindex="-1"><a class="header-anchor" href="#用法-11" aria-hidden="true">#</a> 用法</h4><p><code>PromiseType</code>是用来获取<code>Promise</code>包裹类型的，例如：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 结果：(） =&gt; Promise&lt;string|number&gt;</span>\n<span class="token keyword">type</span> <span class="token class-name">funcType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> getInfo\n<span class="token comment">// 结果：Promise&lt;string|number&gt;</span>\n<span class="token keyword">type</span> <span class="token class-name">returnResult</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>funcType<span class="token operator">&gt;</span>\n<span class="token comment">// 结果：string|number</span>\n<span class="token keyword">type</span> <span class="token class-name">PromiseResult</span> <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span>returnResult<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-11" tabindex="-1"><a class="header-anchor" href="#实现方式-11" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T extends Promise&lt;infer R&gt;</code>：判断<code>T</code>是否是<code>Promise&lt;infer R&gt;</code>的子类型，也就是说<code>T</code>必须满足<code>Promise&lt;any&gt;</code>的形式。</li><li><code>infer R</code>：<a href="#infer">infer</a></li></ul><h3 id="if-判断" tabindex="-1"><a class="header-anchor" href="#if-判断" aria-hidden="true">#</a> If(判断)</h3><h4 id="用法-12" tabindex="-1"><a class="header-anchor" href="#用法-12" aria-hidden="true">#</a> 用法</h4><p><code>If&lt;C, T, F&gt;</code>用来表示根据<code>C</code>的值来返回<code>T</code>或者<code>F</code>，如果<code>C</code>为<code>true</code>，则返回<code>T</code>；如果<code>C</code>为<code>false</code>，则返回<code>F</code>，例如：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：&#39;a&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span>\n<span class="token comment">// 结果：‘b’</span>\n<span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><p>根据上案例，我们可以直观的发现<code>If&lt;C, T, F&gt;</code>的作用有点类似<code>JavaScript</code>中的三元表达式：<code>C ? T : F</code>。</p><h4 id="实现方式-12" tabindex="-1"><a class="header-anchor" href="#实现方式-12" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">If<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">F</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>C extends boolean</code>：表示<code>C</code>为<code>boolean</code>类型的子类型，既<code>C</code>只能为<code>true</code>或者<code>false</code>，传递其它值报错。</li><li><code>C extends true</code>：如果用<code>JavaScript</code>来表示的话，相当于<code>C===true</code>.</li></ul><h3 id="concat-数组concat方法" tabindex="-1"><a class="header-anchor" href="#concat-数组concat方法" aria-hidden="true">#</a> Concat(数组concat方法)</h3><h4 id="用法-13" tabindex="-1"><a class="header-anchor" href="#用法-13" aria-hidden="true">#</a> 用法</h4><p><code>Concat&lt;T, U&gt;</code>用来实现讲两个数组合并起来，类似实现数组的<code>concat</code>方法，使用方式如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：[1, 2, 3, 4]</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-13" tabindex="-1"><a class="header-anchor" href="#实现方式-13" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T extends any[]</code>：用来限制<code>T</code>是一个数字，如果传递非数组会报错，<code>U</code>也是一样的道理。</li><li><code>[...T, ...U]</code>：我们可以理解成<code>JavaScript</code>的扩展运算符<code>...</code>。</li></ul><h3 id="includes-数组includes方法" tabindex="-1"><a class="header-anchor" href="#includes-数组includes方法" aria-hidden="true">#</a> Includes(数组includes方法)</h3><h4 id="用法-14" tabindex="-1"><a class="header-anchor" href="#用法-14" aria-hidden="true">#</a> 用法</h4><p><code>Includes&lt;T, U&gt;</code>用来判断<code>U</code>是否在在数组<code>T</code>中，类似实现数组的<code>includes</code>方法，用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：true</span>\n<span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span>\n<span class="token comment">// 结果：false</span>\n<span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-14" tabindex="-1"><a class="header-anchor" href="#实现方式-14" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T[number]</code>：它返回数组中所有数字类型键对应的值，将这些值构造成一个联合类型，例如：<code>1|2|3</code>。</li><li><code>U extends T[number]</code>：判断<code>U</code>是否是某个联合类型的子类型，例如：<code>1 extends 1|2|3</code>。</li></ul><h2 id="中级" tabindex="-1"><a class="header-anchor" href="#中级" aria-hidden="true">#</a> 中级</h2><h3 id="readony-按需readonly" tabindex="-1"><a class="header-anchor" href="#readony-按需readonly" aria-hidden="true">#</a> Readony(按需Readonly)</h3><h4 id="用法-15" tabindex="-1"><a class="header-anchor" href="#用法-15" aria-hidden="true">#</a> 用法</h4><p>不同于初级实现中的<code>Readonly</code>，在中级实现的<code>Readonly</code>中，如果我们传递了指定的字段，那么<code>Readonly</code>会表现为按需实现<code>readonly</code>，具体用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Expected1</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Expected2</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">readonly</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果：Expected1</span>\n<span class="token keyword">type</span> <span class="token class-name">ReadonlyResult1</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span>\n<span class="token comment">// 结果：Expected2</span>\n<span class="token keyword">type</span> <span class="token class-name">ReadonlyResult2</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token operator">|</span><span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// 测试：</span>\n<span class="token keyword">const</span> obj<span class="token operator">:</span> ReadonlyResult2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">,</span>\n  desc<span class="token operator">:</span> <span class="token string">&#39;23&#39;</span><span class="token punctuation">,</span>\n  completed<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span>\nobj<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">&#39;32&#39;</span> <span class="token comment">// error</span>\nobj<span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// error</span>\n</code></pre></div><h4 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> \n<span class="token punctuation">}</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>K=any</code>：类型默认值，如果不传递<code>K</code>，则默认所有字段都变为<code>readonly</code>。</li><li><code>as</code>：<code>[T as U]</code>表示对于<code>T</code>进行进一步的&quot;加工/判断&quot;，在此处具体表现为：我们只对指定字段进行迭代并添加<code>readonly</code>关键词。知识点<a href="#as">as</a></li><li><code>T &amp; U</code>：在本例中表示将<code>T</code>和<code>U</code>中的字段结合起来，如果没有<code>&amp;</code>，那么就丢失一些属性，例如<code>title</code>。知识点<a href="#&amp;%E7%AC%A6%E5%8F%B7">&amp;符号</a></li></ul><h3 id="deepreadonly-深度readonly" tabindex="-1"><a class="header-anchor" href="#deepreadonly-深度readonly" aria-hidden="true">#</a> DeepReadonly(深度Readonly)</h3><h4 id="用法-16" tabindex="-1"><a class="header-anchor" href="#用法-16" aria-hidden="true">#</a> 用法</h4><p><code>DeepReadonly</code>用来将一个嵌套类型中所有字段全部添加<code>readonly</code>关键词，例如：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 类型：</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  b<span class="token operator">:</span> <span class="token builtin">string</span>\n  c<span class="token operator">:</span> <span class="token punctuation">{</span>\n    d<span class="token operator">:</span> <span class="token builtin">boolean</span>\n    e<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    f<span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> b<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token keyword">readonly</span> c<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> d<span class="token operator">:</span> <span class="token builtin">boolean</span>\n    <span class="token keyword">readonly</span> e<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token keyword">readonly</span> f<span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 结果：Y</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-15" tabindex="-1"><a class="header-anchor" href="#实现方式-15" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">?</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T[P] extends { [key: string]: any }</code>：这段表示<code>T[P]</code>是否是一个包含索引签名的字段，如果包含我们认为它是一个嵌套对象，就可以递归调用<code>DeepReadonly</code>。</li></ul><h3 id="tupletounion-元组转集合" tabindex="-1"><a class="header-anchor" href="#tupletounion-元组转集合" aria-hidden="true">#</a> TupleToUnion(元组转集合)</h3><h4 id="用法-17" tabindex="-1"><a class="header-anchor" href="#用法-17" aria-hidden="true">#</a> 用法</h4><p><code>TupleToUnion</code>是用来将一个元组转换成联合类型的，其用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：&#39;1&#39; | &#39;2&#39; | &#39;3&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToUnion<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-16" tabindex="-1"><a class="header-anchor" href="#实现方式-16" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// way1: T[number]</span>\n<span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span>\n\n<span class="token comment">// way2: 递归</span>\n<span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> \n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> args<span class="token punctuation">]</span>\n    <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span>\n    <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>T[number]</code>：它会自动迭代元组的数字型索引，然后将所以元素组合成一个联华类型。</li><li><code>R | TupleToUnion&lt;args&gt;</code>：R表示每一次迭代中的第一个元素，它的迭代过程可以用下面伪代码表示：</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 第一次迭代</span>\n<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>\n<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span>\n\n<span class="token comment">// 第二次迭代</span>\n<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span>\n<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span>\n\n<span class="token comment">// 第三次迭代</span>\n<span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span>\n<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;3&#39;</span>\n</code></pre></div><h3 id="chainable-可串联" tabindex="-1"><a class="header-anchor" href="#chainable-可串联" aria-hidden="true">#</a> Chainable(可串联)</h3><h3 id="last-数组最后一个元素" tabindex="-1"><a class="header-anchor" href="#last-数组最后一个元素" aria-hidden="true">#</a> Last(数组最后一个元素)</h3><h4 id="用法-18" tabindex="-1"><a class="header-anchor" href="#用法-18" aria-hidden="true">#</a> 用法</h4><p><code>Last</code>是用来获取数组中最后一个元素的，它和我们之前已经实现的<code>First</code>很相似。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：3</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Last<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-17" tabindex="-1"><a class="header-anchor" href="#实现方式-17" aria-hidden="true">#</a> 实现方式</h4><p><code>Last</code>的实现方式很巧妙，因为它既可以在索引上做文章来实现，也可以用占位的思想来实现。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// way1：处理索引</span>\n<span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token comment">// way2: 后占位</span>\n<span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>[any, ...T]</code>：此代码表示我们构建了一个新数组，并添加了一个新元素到第一个位置，然后把原数组<code>T</code>中的元素依次扩展到新数组中，可以用以下伪代码表示：</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 原数组</span>\n<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 新数组</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n</code></pre></div><ul><li><code>T[&#39;length&#39;]</code>：这里我们获取到的是原始<code>T</code>数组的长度，例如<code>[1, 2, 3]</code>，我们获取到的长度值为<code>3</code>。而在新数组中，索引为<code>3</code>的位置正好是最后一个元素的索引，通过这种方式就能达到我们的目的。</li><li><code>T extends [...infer R, infer L]</code>：这段代码表示，我们将原数组中最后一个元素使用<code>L</code>进行占位，而其它元素我们用一个<code>R</code>数组表示。这样，如果数组满足这种格式，就能正确返回最后一个元素的值。</li></ul><h3 id="pop和push" tabindex="-1"><a class="header-anchor" href="#pop和push" aria-hidden="true">#</a> Pop和Push</h3><p>继续沿用以上处理索引和占位的思想，我们能实现数组<code>pop</code>方法和<code>push</code>方法</p><h4 id="用法-19" tabindex="-1"><a class="header-anchor" href="#用法-19" aria-hidden="true">#</a> 用法</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// Pop结果：[1, 2]</span>\n<span class="token keyword">type</span> <span class="token class-name">popResult</span> <span class="token operator">=</span> Pop<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// Push结果：[1, 2, 3, 4]</span>\n<span class="token keyword">type</span> <span class="token class-name">pushResult</span> <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-18" tabindex="-1"><a class="header-anchor" href="#实现方式-18" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// Pop实现</span>\n<span class="token keyword">type</span> <span class="token class-name">Pop<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n\n<span class="token comment">// Push实现</span>\n<span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token punctuation">]</span>\n</code></pre></div><h3 id="shift和unshift" tabindex="-1"><a class="header-anchor" href="#shift和unshift" aria-hidden="true">#</a> Shift和Unshift</h3><p>与<code>pop</code>和<code>push</code>方法相似的另外一对方法叫<code>shift</code>和<code>unshift</code>，它们的实现思路是一样的。</p><h4 id="用法-20" tabindex="-1"><a class="header-anchor" href="#用法-20" aria-hidden="true">#</a> 用法</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// Shift结果：[2, 3]</span>\n<span class="token keyword">type</span> <span class="token class-name">shiftResult</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// Unshift结果：[0, 1, 2, 3]</span>\n<span class="token keyword">type</span> <span class="token class-name">unshiftResult</span> <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="使用方式-1" tabindex="-1"><a class="header-anchor" href="#使用方式-1" aria-hidden="true">#</a> 使用方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// Shift实现</span>\n<span class="token keyword">type</span> <span class="token class-name">Shift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n\n<span class="token comment">// Unshift实现</span>\n<span class="token keyword">type</span> <span class="token class-name">Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span>\n</code></pre></div><h3 id="promiseall-promise-all返回类型" tabindex="-1"><a class="header-anchor" href="#promiseall-promise-all返回类型" aria-hidden="true">#</a> PromiseAll(Promise.all返回类型)</h3><h4 id="用法-21" tabindex="-1"><a class="header-anchor" href="#用法-21" aria-hidden="true">#</a> 用法</h4><p><code>PromiseAll</code>是用来取<code>Promise.all()</code>函数所有返回的类型，其用法如下</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 结果：Promise&lt;[number, number, number]&gt;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">PromiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="实现方式-19" tabindex="-1"><a class="header-anchor" href="#实现方式-19" aria-hidden="true">#</a> 实现方式</h4><p>与之前的例子不同，<code>PromiseAll</code>我们申明的是一个<code>function</code>而不是<code>type</code>。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseAllType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">PromiseAll</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>values<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> PromiseAllType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><p>代码详解：</p><ul><li>因为<code>Promise.all()</code>函数接受的是一个数组，因此泛型<code>T</code>限制为一个<code>any[]</code>类型的数组。</li><li><code>PromiseAllType</code>的实现思路有点像之前的<code>PromiseType</code>，只不过这里多了一层<code>Promise</code>的包裹，因为<code>Promise.all()</code>的返回类型也是一个<code>Promise</code>。</li></ul><h3 id="trim、trimleft以及trimright" tabindex="-1"><a class="header-anchor" href="#trim、trimleft以及trimright" aria-hidden="true">#</a> Trim、TrimLeft以及TrimRight</h3><h4 id="用法-22" tabindex="-1"><a class="header-anchor" href="#用法-22" aria-hidden="true">#</a> 用法</h4><p><code>Trim</code>、<code>TrimLeft</code>以及<code>TrimRight</code>这几个工具比较好理解，它们都是用来移除字符串中的空白符的。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> t1 <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span><span class="token string">&#39; str&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// &#39;str&#39;</span>\n<span class="token keyword">const</span> t2 <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">&#39; str &#39;</span><span class="token operator">&gt;</span>     <span class="token comment">// &#39;str&#39;</span>\n<span class="token keyword">const</span> t3 <span class="token operator">=</span> TrimRight<span class="token operator">&lt;</span><span class="token string">&#39;str &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;str&#39;</span>\n</code></pre></div><h4 id="实现方式-20" tabindex="-1"><a class="header-anchor" href="#实现方式-20" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Space</span> <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">|</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;\\t&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">TrimLeft<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>\n<span class="token keyword">type</span> <span class="token class-name">Trim<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">?</span> Trim<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>\n<span class="token keyword">type</span> <span class="token class-name">TrimRight<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span>\n</code></pre></div><p>代码详解：</p><ul><li><code>TrimLeft</code>和<code>TrimRight</code>的实现思路是相同的，区别在于空白符的占位出现在左侧还是右侧。</li><li><code>Trim</code>的实现就是把<code>TrimLeft</code>和<code>TrimRight</code>所做的事情结合起来。</li></ul><h3 id="capitalize-首字母大写-和uncapatilize-首字母小写" tabindex="-1"><a class="header-anchor" href="#capitalize-首字母大写-和uncapatilize-首字母小写" aria-hidden="true">#</a> Capitalize(首字母大写)和Uncapatilize(首字母小写)</h3><h4 id="用法-23" tabindex="-1"><a class="header-anchor" href="#用法-23" aria-hidden="true">#</a> 用法</h4><p><code>Capitalize</code>是用来将一个字符串的首字母变成大写的，而<code>Uncapatilize</code>所做的事情跟它相反，其用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span>   <span class="token comment">// &#39;Hello&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> Uncapatilize<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><h4 id="实现方式-21" tabindex="-1"><a class="header-anchor" href="#实现方式-21" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Capatilize<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uppercase<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">S</span>\n<span class="token keyword">type</span> <span class="token class-name">Uncapatilize<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Lowercase<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">S</span>\n</code></pre></div><p>代码详解：</p><ul><li>无论是<code>Capatilize</code>还是<code>Uncapatilize</code>，它们都依赖内置的工具函数<code>Uppercase</code>或者<code>Lowercase</code>。对于<code>Capatilize</code>而言，我们只需要把首字母隔离出来，然后调用<code>Uppercase</code>即可。对于<code>Uncapatilize</code>而言，我们把首字母调用<code>Lowercase</code>即可。</li></ul><h3 id="replace-替换一次-和replaceall-全部替换" tabindex="-1"><a class="header-anchor" href="#replace-替换一次-和replaceall-全部替换" aria-hidden="true">#</a> Replace(替换一次)和ReplaceAll(全部替换)</h3><h4 id="用法-24" tabindex="-1"><a class="header-anchor" href="#用法-24" aria-hidden="true">#</a> 用法</h4><p><code>Replace</code>是用来将字符串中第一次出现的某段内容，使用指定的字符串进行替换，而<code>和ReplaceAll</code>是全部替换，其用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span>      <span class="token comment">// &#39;foofoobar&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> 和ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;foofoofoo&#39;</span>\n</code></pre></div><h4 id="实现方式-22" tabindex="-1"><a class="header-anchor" href="#实现方式-22" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  from <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  to <span class="token keyword">extends</span> <span class="token builtin">string</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      <span class="token operator">?</span> from <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span>\n        <span class="token operator">?</span> <span class="token constant">S</span>\n        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      <span class="token operator">:</span> <span class="token constant">S</span>\n\n<span class="token keyword">type</span> <span class="token class-name">ReplaceAll<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  from <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  to <span class="token keyword">extends</span> <span class="token builtin">string</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      <span class="token operator">?</span> from <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span>\n        <span class="token operator">?</span> <span class="token constant">S</span>\n        <span class="token operator">:</span> ReplaceAll<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token operator">&gt;</span>\n      <span class="token operator">:</span> <span class="token constant">S</span>\n</code></pre></div><h3 id="appendargument-追加参数" tabindex="-1"><a class="header-anchor" href="#appendargument-追加参数" aria-hidden="true">#</a> AppendArgument(追加参数)</h3><h4 id="用法-25" tabindex="-1"><a class="header-anchor" href="#用法-25" aria-hidden="true">#</a> 用法</h4><p><code>AppendArgument</code>是用来向一个函数追加一个参数的，其用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">//  结果：(a: number, b: number) =&gt; number</span>\n<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="实现方式-23" tabindex="-1"><a class="header-anchor" href="#实现方式-23" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><p>代码详解：</p><ul><li>我们首先利用<code>infer</code>关键词得到了<code>Fn</code>函数的参数类型以及返回类型，然后把新的参数添加到参数列表，并原样返回其函数类型。</li></ul><h3 id="permutation-元素排列" tabindex="-1"><a class="header-anchor" href="#permutation-元素排列" aria-hidden="true">#</a> Permutation(元素排列)</h3><h3 id="lengthofstring-字符串的长度" tabindex="-1"><a class="header-anchor" href="#lengthofstring-字符串的长度" aria-hidden="true">#</a> LengthOfString(字符串的长度)</h3><h4 id="用法-26" tabindex="-1"><a class="header-anchor" href="#用法-26" aria-hidden="true">#</a> 用法</h4><p><code>LengthOfString</code>是用来计算一个字符串长度的，其用法如下：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 5</span>\n</code></pre></div><h4 id="实现方式-24" tabindex="-1"><a class="header-anchor" href="#实现方式-24" aria-hidden="true">#</a> 实现方式</h4><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LengthOfString<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      <span class="token operator">?</span> LengthOfString<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> Char<span class="token punctuation">]</span><span class="token operator">&gt;</span>\n      <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>\n</code></pre></div><p>代码详解：</p><ul><li>我们通过一个泛型的辅助数组来帮我们计算字符串的长度，在第一次符合条件时，我们将其第一个字符添加到数组中，在后续的递归过程中，如果不符合条件，直接返回<code>T[&#39;length&#39;]</code>，这个过程可以用如下代码表示：</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 第一次递归</span>\n<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;ello&#39;</span>\n<span class="token comment">// 第二次递归</span>\n<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;ello&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;llo&#39;</span>\n<span class="token comment">// 第三次递归</span>\n<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;llo&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;lo&#39;</span>\n<span class="token comment">// 第四次递归</span>\n<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;lo&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;o&#39;</span>\n<span class="token comment">// 第五次递归</span>\n<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n</code></pre></div><h3 id="flatten-数组降维" tabindex="-1"><a class="header-anchor" href="#flatten-数组降维" aria-hidden="true">#</a> Flatten(数组降维)</h3><h3 id="appendtoobject-对象添加新属性" tabindex="-1"><a class="header-anchor" href="#appendtoobject-对象添加新属性" aria-hidden="true">#</a> AppendToObject(对象添加新属性)</h3><h3 id="absolute-绝对值" tabindex="-1"><a class="header-anchor" href="#absolute-绝对值" aria-hidden="true">#</a> Absolute(绝对值)</h3><h3 id="stringtoarray-字符串转数组" tabindex="-1"><a class="header-anchor" href="#stringtoarray-字符串转数组" aria-hidden="true">#</a> StringToArray(字符串转数组)</h3><h3 id="stringtounion-字符串转联合类型" tabindex="-1"><a class="header-anchor" href="#stringtounion-字符串转联合类型" aria-hidden="true">#</a> StringToUnion(字符串转联合类型)</h3><h3 id="mergetype-类型合并" tabindex="-1"><a class="header-anchor" href="#mergetype-类型合并" aria-hidden="true">#</a> MergeType(类型合并)</h3><h3 id="camelcase-字符串转小驼峰" tabindex="-1"><a class="header-anchor" href="#camelcase-字符串转小驼峰" aria-hidden="true">#</a> CamelCase(字符串转小驼峰)</h3><h3 id="kebabcase-字符串转连字符" tabindex="-1"><a class="header-anchor" href="#kebabcase-字符串转连字符" aria-hidden="true">#</a> KebabCase(字符串转连字符)</h3><h3 id="diff-类型差异部分" tabindex="-1"><a class="header-anchor" href="#diff-类型差异部分" aria-hidden="true">#</a> Diff(类型差异部分)</h3><h3 id="anyof-数组元素真值判断" tabindex="-1"><a class="header-anchor" href="#anyof-数组元素真值判断" aria-hidden="true">#</a> AnyOf(数组元素真值判断)</h3><h3 id="isnever-是否是never类型" tabindex="-1"><a class="header-anchor" href="#isnever-是否是never类型" aria-hidden="true">#</a> IsNever(是否是Never类型)</h3><h3 id="isunion-是否联合类型" tabindex="-1"><a class="header-anchor" href="#isunion-是否联合类型" aria-hidden="true">#</a> IsUnion(是否联合类型)</h3><h3 id="replacekeys-类型替换" tabindex="-1"><a class="header-anchor" href="#replacekeys-类型替换" aria-hidden="true">#</a> ReplaceKeys(类型替换)</h3><h3 id="removeindexsignature-移除索引签名" tabindex="-1"><a class="header-anchor" href="#removeindexsignature-移除索引签名" aria-hidden="true">#</a> RemoveIndexSignature(移除索引签名)</h3><h2 id="困难" tabindex="-1"><a class="header-anchor" href="#困难" aria-hidden="true">#</a> 困难</h2><h3 id="uniontointersection-元组取交集" tabindex="-1"><a class="header-anchor" href="#uniontointersection-元组取交集" aria-hidden="true">#</a> UnionToIntersection(元组取交集)</h3><h3 id="currying-柯里化" tabindex="-1"><a class="header-anchor" href="#currying-柯里化" aria-hidden="true">#</a> Currying(柯里化)</h3><h3 id="requiredkeys-所有必填字段" tabindex="-1"><a class="header-anchor" href="#requiredkeys-所有必填字段" aria-hidden="true">#</a> RequiredKeys(所有必填字段)</h3><h3 id="getrequired-必填字段组成的类型" tabindex="-1"><a class="header-anchor" href="#getrequired-必填字段组成的类型" aria-hidden="true">#</a> GetRequired(必填字段组成的类型)</h3><h3 id="optionalkeys-所有可选字段" tabindex="-1"><a class="header-anchor" href="#optionalkeys-所有可选字段" aria-hidden="true">#</a> OptionalKeys(所有可选字段)</h3><h3 id="getoptional-可选字段组成的类型" tabindex="-1"><a class="header-anchor" href="#getoptional-可选字段组成的类型" aria-hidden="true">#</a> GetOptional(可选字段组成的类型)</h3><h3 id="capitalizewords-所有单词首字母大写" tabindex="-1"><a class="header-anchor" href="#capitalizewords-所有单词首字母大写" aria-hidden="true">#</a> CapitalizeWords(所有单词首字母大写)</h3><h3 id="camelcase-字符串转小驼峰-1" tabindex="-1"><a class="header-anchor" href="#camelcase-字符串转小驼峰-1" aria-hidden="true">#</a> CamelCase(字符串转小驼峰)</h3><h3 id="parseprintformat-字符串格式化内容" tabindex="-1"><a class="header-anchor" href="#parseprintformat-字符串格式化内容" aria-hidden="true">#</a> ParsePrintFormat(字符串格式化内容)</h3><h3 id="isany和notany" tabindex="-1"><a class="header-anchor" href="#isany和notany" aria-hidden="true">#</a> IsAny和NotAny</h3><h3 id="get-字符串路径取值" tabindex="-1"><a class="header-anchor" href="#get-字符串路径取值" aria-hidden="true">#</a> Get(字符串路径取值)</h3><h3 id="stringtonumber-字符串数字转数字" tabindex="-1"><a class="header-anchor" href="#stringtonumber-字符串数字转数字" aria-hidden="true">#</a> StringToNumber(字符串数字转数字)</h3><h3 id="filterout-数组元素过滤" tabindex="-1"><a class="header-anchor" href="#filterout-数组元素过滤" aria-hidden="true">#</a> FilterOut(数组元素过滤)</h3><h3 id="tupletoenum-元组转枚举" tabindex="-1"><a class="header-anchor" href="#tupletoenum-元组转枚举" aria-hidden="true">#</a> TupleToEnum(元组转枚举)</h3><h3 id="format-字符串格式化函数类型" tabindex="-1"><a class="header-anchor" href="#format-字符串格式化函数类型" aria-hidden="true">#</a> Format(字符串格式化函数类型)</h3><h3 id="lengthofstring-字符串的长度-1" tabindex="-1"><a class="header-anchor" href="#lengthofstring-字符串的长度-1" aria-hidden="true">#</a> LengthOfString(字符串的长度)</h3><h3 id="join-字符串拼接" tabindex="-1"><a class="header-anchor" href="#join-字符串拼接" aria-hidden="true">#</a> Join(字符串拼接)</h3><h3 id="deeppick-深层次pick" tabindex="-1"><a class="header-anchor" href="#deeppick-深层次pick" aria-hidden="true">#</a> DeepPick(深层次Pick)</h3><h3 id="camelize-类型属性键转小驼峰" tabindex="-1"><a class="header-anchor" href="#camelize-类型属性键转小驼峰" aria-hidden="true">#</a> Camelize(类型属性键转小驼峰)</h3><h2 id="地狱" tabindex="-1"><a class="header-anchor" href="#地狱" aria-hidden="true">#</a> 地狱</h2><p>撰写中...</p><h2 id="内置测试工具" tabindex="-1"><a class="header-anchor" href="#内置测试工具" aria-hidden="true">#</a> 内置测试工具</h2><h3 id="equal和notequal" tabindex="-1"><a class="header-anchor" href="#equal和notequal" aria-hidden="true">#</a> Equal和NotEqual</h3><p>撰写中....</p><h3 id="istrue和isfalse" tabindex="-1"><a class="header-anchor" href="#istrue和isfalse" aria-hidden="true">#</a> isTrue和isFalse</h3><p>撰写中....</p><h3 id="expect、expecttrue和expectfalse" tabindex="-1"><a class="header-anchor" href="#expect、expecttrue和expectfalse" aria-hidden="true">#</a> Expect、ExpectTrue和ExpectFalse</h3><p>撰写中....</p><h3 id="isany和notany-1" tabindex="-1"><a class="header-anchor" href="#isany和notany-1" aria-hidden="true">#</a> IsAny和NotAny</h3><p>撰写中....</p>',292),C={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,p,(0,e.Wm)("p",null,[o,c,l,r,i,k,d,(0,e.Wm)("a",u,[h,(0,e.Wm)(a)]),g]),y,(0,e.Wm)("ul",null,[m,(0,e.Wm)("li",null,[b,(0,e.Wm)("a",f,[x,(0,e.Wm)(a)]),w,(0,e.Wm)("a",T,[v,(0,e.Wm)(a)]),R,(0,e.Wm)("a",P,[U,(0,e.Wm)(a)])])]),S],64)}}}}]);