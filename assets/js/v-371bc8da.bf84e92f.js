(self.webpackChunkgordan404wiki=self.webpackChunkgordan404wiki||[]).push([[9935],{4901:(e,d,o)=>{"use strict";o.r(d),o.d(d,{data:()=>c});const c={key:"v-371bc8da",path:"/vueAnalysis/dom/",title:"虚拟DOM",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"虚拟DOM介绍",slug:"虚拟dom介绍",children:[]},{level:2,title:"Vue中的虚拟DOM",slug:"vue中的虚拟dom",children:[]}],filePathRelative:"vueAnalysis/dom/README.md",git:{updatedTime:1626972344e3,contributors:[{name:"lishuaixingNewBee",email:"vae.china@foxmail.com",commits:1}]}}},1622:(e,d,o)=>{"use strict";o.r(d),o.d(d,{default:()=>O});var c=o(4057);const a=(0,c.Wm)("h1",{id:"虚拟dom",tabindex:"-1"},[(0,c.Wm)("a",{class:"header-anchor",href:"#虚拟dom","aria-hidden":"true"},"#"),(0,c.Uk)(" 虚拟DOM")],-1),r=(0,c.Wm)("h2",{id:"虚拟dom介绍",tabindex:"-1"},[(0,c.Wm)("a",{class:"header-anchor",href:"#虚拟dom介绍","aria-hidden":"true"},"#"),(0,c.Uk)(" 虚拟DOM介绍")],-1),n=(0,c.Uk)("我们在最开始提到过，"),t=(0,c.Wm)("code",null,"Vue",-1),i=(0,c.Uk)("从"),l=(0,c.Wm)("code",null,"2.0+",-1),u=(0,c.Uk)("版本开始就引入了虚拟"),m=(0,c.Wm)("code",null,"DOM",-1),s=(0,c.Uk)("，也知道"),h=(0,c.Wm)("code",null,"Vue",-1),p=(0,c.Uk)("中的虚拟DOM借鉴了开源库"),k={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},b=(0,c.Uk)("snabbdom"),D=(0,c.Uk)("的实现，并根据自身特色添加了许多特性。"),M=(0,c.uE)('<p><code>Vue</code>在<code>1.0+</code>版本还没有引入虚拟<code>DOM</code>的时候，当某一个状态发生变化时，它在一定程度上是知道哪些节点使用到了这个状态，从而可以准确的针对这些节点进行更新操作，不需要进行对比。但这种做法是有一定的代价的，因为更新的粒度太细，每一次节点的绑定都需要一个<code>Watcher</code>去观察状态的变化，这样会增加更多的内存开销。当一个状态被越多的节点使用，它的内存开销就越大。</p><p>因此在<code>Vue</code>的<code>2.0+</code>版本中，引入了虚拟<code>DOM</code>将更新粒度调整为组件级别，当状态发生变化的时候，只派发更新到组件级别，然后组件内部再进行对比和渲染。这样做以后，当一个状态在同一个组件内被引用多次的时候，它们只需要一个<code>render watcher</code>去观察状态的变化即可。</p><h2 id="vue中的虚拟dom" tabindex="-1"><a class="header-anchor" href="#vue中的虚拟dom" aria-hidden="true">#</a> Vue中的虚拟DOM</h2><p>虚拟<code>DOM</code>解决<code>DOM</code>更新的方式是：通过状态生成一个虚拟节点树，然后使用虚拟节点树进行渲染，在渲染之前会使用新生成的虚拟节点树和上一次生成的虚拟节点树进行对比，然后只渲染其不相同的部分(包括新增和删除的)。</p><p>在<code>Vue</code>中，根实例就是虚拟节点树的根节点，各种组件就是<code>children</code>孩子节点，树节点使用<code>VNode</code>类来表示。它使用<code>template</code>模板来描述状态与<code>DOM</code>之间的映射关系，然后通过<code>parse</code>编译将<code>template</code>模板转换成渲染函数<code>render</code>，执行渲染函数<code>render</code>就可以得到一个虚拟节点树，最后使用这个虚拟节点树渲染到视图上。</p><p>因此根据上面这段话，我们可以得到<code>Vue</code>使用虚拟<code>DOM</code>进行模板转视图的一个流程。</p><div style="text-align:center;"><img src="assets/images/vueAnalysis/dom.png" alt="虚拟dom"></div>',7),O={render:function(e,d){const o=(0,c.up)("OutboundLink");return(0,c.wg)(),(0,c.j4)(c.HY,null,[a,r,(0,c.Wm)("p",null,[n,t,i,l,u,m,s,h,p,(0,c.Wm)("a",k,[b,(0,c.Wm)(o)]),D]),M],64)}}}}]);