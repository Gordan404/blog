"use strict";(self.webpackChunkgordan404wiki=self.webpackChunkgordan404wiki||[]).push([[108],{782:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-05c6f081",path:"/interview/react.html",title:"前端进阶指北",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"React基础",slug:"react基础",children:[{level:3,title:"什么是 React",slug:"什么是-react",children:[]},{level:3,title:"React的生命周期",slug:"react的生命周期",children:[]},{level:3,title:"React 父子组件生命周期",slug:"react-父子组件生命周期",children:[]},{level:3,title:"为什么React中事件绑定的函数内部this默认指向undefined",slug:"为什么react中事件绑定的函数内部this默认指向undefined",children:[]},{level:3,title:"浅谈React合成",slug:"浅谈react合成",children:[]},{level:3,title:"React 组件中怎么做事件代理",slug:"react-组件中怎么做事件代理",children:[]},{level:3,title:"setState",slug:"setstate",children:[]},{level:3,title:"组件的状态(state)和属性(props)之间有何不同",slug:"组件的状态-state-和属性-props-之间有何不同",children:[]}]},{level:2,title:"React 进阶",slug:"react-进阶",children:[{level:3,title:"受控和非受控组",slug:"受控和非受控组",children:[]},{level:3,title:"类组件和函数组件(无状态)之间的区别",slug:"类组件和函数组件-无状态-之间的区别",children:[]},{level:3,title:"Portals(传送门)",slug:"portals-传送门",children:[]},{level:3,title:"context(上下文)",slug:"context-上下文",children:[]},{level:3,title:"异步组件",slug:"异步组件",children:[]},{level:3,title:"高阶组件 HOC",slug:"高阶组件-hoc",children:[]},{level:3,title:"Render Props",slug:"render-props",children:[]},{level:3,title:"HOC vs Render Props 区别",slug:"hoc-vs-render-props-区别",children:[]},{level:3,title:"React性能优化",slug:"react性能优化",children:[]},{level:3,title:"React组件通讯",slug:"react组件通讯",children:[]}]},{level:2,title:"Redux 和 React-Redux",slug:"redux-和-react-redux",children:[{level:3,title:"React-Redux",slug:"react-redux",children:[]},{level:3,title:"Redux 中间件",slug:"redux-中间件",children:[]}]},{level:2,title:"React 原理",slug:"react-原理",children:[{level:3,title:"函数式编程",slug:"函数式编程",children:[]},{level:3,title:"Vdom 和 diff算法",slug:"vdom-和-diff算法",children:[]},{level:3,title:"JSX本质",slug:"jsx本质",children:[]},{level:3,title:"setState 和 batchUpdate",slug:"setstate-和-batchupdate",children:[]},{level:3,title:"transaction(交易)事物机制",slug:"transaction-交易-事物机制",children:[]},{level:3,title:"组件渲染和更新过程",slug:"组件渲染和更新过程",children:[]},{level:3,title:"React-fiber",slug:"react-fiber",children:[]}]},{level:2,title:"Hooks",slug:"hooks",children:[{level:3,title:"State Hook",slug:"state-hook",children:[]},{level:3,title:"useEffect",slug:"useeffect",children:[]},{level:3,title:"useEffect 中返回的函数FN",slug:"useeffect-中返回的函数fn",children:[]},{level:3,title:"useMemo",slug:"usememo",children:[]},{level:3,title:"useCallback",slug:"usecallback",children:[]},{level:3,title:"useRef",slug:"useref",children:[]},{level:3,title:"useContext",slug:"usecontext",children:[]},{level:3,title:"Vue 和 React一些区别",slug:"vue-和-react一些区别",children:[]}]}],filePathRelative:"interview/react.md",git:{updatedTime:1640078921e3,contributors:[{name:"lishuaixingNewBee",email:"vae.china@foxmail.com",commits:19}]}}},2426:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(5314),p=a(2201),o=a(5901),e=a(7231),c=a(2625),l=a(310),u=a(9987),k=a(9593),r=a(8564);const i=(0,t.uE)('<h1 id="前端进阶指北" tabindex="-1"><a class="header-anchor" href="#前端进阶指北" aria-hidden="true">#</a> 前端进阶指北</h1><h2 id="react基础" tabindex="-1"><a class="header-anchor" href="#react基础" aria-hidden="true">#</a> React基础</h2><h3 id="什么是-react" tabindex="-1"><a class="header-anchor" href="#什么是-react" aria-hidden="true">#</a> 什么是 React</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>React是Facebook 开发的前端JavaScript库</li><li>V层：react并不是完整的MVC框架，而是MVC中的C层</li><li>虚拟DOM：react引入虚拟DOM，每当数据变化通过reactdiff运算，将上一次的虚拟DOM与本次渲染的DOM进行对比，仅仅只渲染更新的，有效减少了DOM操作</li><li>JSX语法：js+xml，是js的语法扩展，编译后转换成普通的js对象</li><li>组件化思想：将具有独立功能的UI模块封装为一个组件，而小的组件又可以通过不同的组合嵌套组成大的组件，最终完成整个项目的构建</li><li>单向数据流：指数据的流向只能由父级组件通过props讲数据传递给子组件，不能由子组件向父组件传递数据</li><li>要想实现数据的双向绑定只能由子组件接收父组件props传过来的方法去改变父组件数据，而不是直接将子组件数据传给父组件</li><li>生命周期：简单说一下生命周期：Mounting(挂载)、Updateing(更新)、Unmounting(卸载)</li></ul></div><h3 id="react的生命周期" tabindex="-1"><a class="header-anchor" href="#react的生命周期" aria-hidden="true">#</a> React的生命周期</h3><p><img src="'+p+'" alt="React的生命周期"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>创建、 更新、 销毁三个阶段 <code>componentDidMount</code> =&gt; <code>componentDidUpdate</code> =&gt; <code>componentWillUnmount</code></p><ol><li><strong>创建阶段：</strong> 旧版本组件构造函数调用完成之后会有<code>componentWillmount</code>方法，新版本省略，新增<code>getDerivedStateFromProps</code>方法（并不常用），且该方法在组件props,state变更时也会被调用</li><li><strong>更新阶段:</strong> 当<code>shouldComponentUpdate</code>返回ture后，会调用rende方法重新渲染组件。在组件更新完成之前有<code>getSnapShotBeforeUpdate</code>方法</li></ol><ul><li><strong><code>componentWillMount</code></strong>(16.9废弃):在渲染之前执行，用于根组件中的 App 级配置。</li><li><strong><code>componentDidMount</code></strong>：在第一次渲染之后执行，可以在这里做AJAX请求，DOM 的操作或状态更新以及设置事件监听器。</li><li><strong><code>componentWillReceiveProps</code></strong>(废弃)：在初始化render的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染, <code>getDerivedStateFromProps</code>可替代</li><li><strong><code>getDerivedStateFromProps</code></strong>：会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内</li><li><strong><code>shouldComponentUpdate</code></strong>：确定是否更新组件。默认情况下，它返回true。如果确定在 state 或 props 更新后组件不需要在重新渲染，则可以返回false，这是一个提高性能的方法。</li><li><strong><code>componentWillUpdate</code></strong>(废弃)：在shouldComponentUpdate返回 true 确定要更新组件之前件之前执行。</li><li><strong><code>componentDidUpdate</code></strong>：它主要用于更新DOM以响应props或state更改。</li><li><strong><code>componentWillUnmount</code></strong>：创建、 更新、 销毁三个阶段，它用于取消任何的网络请求，或删除与组件关联的所有事件监听</li></ul></div><h3 id="react-父子组件生命周期" tabindex="-1"><a class="header-anchor" href="#react-父子组件生命周期" aria-hidden="true">#</a> React 父子组件生命周期</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// 加载渲染过程</span>\n  parent<span class="token operator">-</span>constructor\n  parent<span class="token operator">-</span>componentWillMount\n  parent<span class="token operator">-</span>render\n    child<span class="token operator">-</span>constructor\n    child<span class="token operator">-</span>componentWillMount\n    child<span class="token operator">-</span>render\n    child<span class="token operator">-</span>componentDidMount\n  parent<span class="token operator">-</span>componentDidMount\n<span class="token comment">// 更新过程</span>\n  parent<span class="token operator">-</span>shouldComponentUpdate\n  parent<span class="token operator">-</span>componentWillUpdate\n  parent<span class="token operator">-</span>render\n    child<span class="token operator">-</span>componentWillReceiveProps\n    child<span class="token operator">-</span>shouldComponentUpdate\n    child<span class="token operator">-</span>render\n    child<span class="token operator">-</span>componentDidUpdate\n  parent<span class="token operator">-</span>componentDidUpdate\n<span class="token comment">// 卸载组件</span>\n  parent<span class="token operator">-</span>componentWillUnmount\n    child<span class="token operator">-</span>componentWillUnmount\n</code></pre></div><h3 id="为什么react中事件绑定的函数内部this默认指向undefined" tabindex="-1"><a class="header-anchor" href="#为什么react中事件绑定的函数内部this默认指向undefined" aria-hidden="true">#</a> 为什么React中事件绑定的函数内部this默认指向undefined</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>函数的作用域是由函数调用的时候决定的，而不是函数声明的时候。第一次调用是作为对象中的函数调用，因此this指向对象本身。而第二次调用是作为普通函数调用，所以this指向全局对象，在严格模式时会指向undefined。</p><p><strong>解决办法：</strong></p><ol><li>使用es6箭头函数，箭头函数this默认指向上一层级的环境 <code>&lt;input onChange={()=&gt;this.change()} /&gt;</code></li><li>使用bind绑定this写在constructor里 <code>this.change = this.change.bind(this)</code>;</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Gordanlee&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;Wuyifan&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> getName <span class="token operator">=</span> obj<span class="token punctuation">.</span>getName<span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wuyifan</span>\n<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Gordanlee</span>\n\n<span class="token keyword">class</span> <span class="token class-name">EventDemo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;gordanlee&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 修改方法的 this 指向</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickHandler2</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        推荐面这种写法\n    <span class="token punctuation">}</span>\n    <span class="token function">clickHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this....&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// this 默认是 undefined</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;wuyifan&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 静态方法，this 指向当前实例</span>\n    <span class="token function">clickHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 获取 event</span>\n    <span class="token function-variable function">clickHandler3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// // this - 使用 bind</span>\n        <span class="token keyword">return</span> \n        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler1<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n          <span class="token comment">// 不建议在标签中写bind, 会导致bind多次执行，建议再头部赋值只绑一次</span>\n          <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickHandler2</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickHandler2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler3<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="浅谈react合成" tabindex="-1"><a class="header-anchor" href="#浅谈react合成" aria-hidden="true">#</a> 浅谈React合成</h3><p><img src="'+o+'" alt="浅谈React合成"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>JSX</code>上写的事件并没有绑定在对应的真实 <code>DOM</code> 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 <code>document</code>上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。 （在<code>React17</code>之前，<code>React</code>是把所有事件委托在<code>document</code>上的，<code>React17</code>及以后版本不再把事件委托在<code>document</code>上，而是委托在挂载的容器上了。）</p><ul><li><strong>目的:</strong></li></ul><ol><li>合成事件首先抹平了浏览器之间的兼容问题(如标准事件模型、IE)，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；</li><li>对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象</li></ol><ul><li><strong>优点</strong></li></ul><ol><li>兼容所有浏览器(如标准事件模型、IE)，更好的跨平台(各平台都有自己的事件名)； 2.挂载到document,将事件统一存放在一个数组,减少内存消耗,避免频繁的新增与解绑（垃圾回收）。</li><li>方便 react 统一管理和事务机制</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// 定义捕获事件</span>\nVue<span class="token operator">:</span> <span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;handleClick&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\nReact<span class="token operator">:</span> <span class="token operator">&lt;</span>div onClickCapture<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClickOuter<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token comment">// react 事件不能采用 return false 的方式来阻止浏览器的默认行为，而必须要地明确地调用preventDefault()来阻止默认行为。</span>\n<span class="token comment">// `Event` 是封装组合之后的 `SyntheticBaseEvent`, 模拟出来的DOM事件所有能力。</span>\n<span class="token comment">// `event.nativeEvent` 是原生事件对象</span>\n<span class="token comment">// React绑定事件，最后都会追加Eevent参数</span>\n</code></pre></div><h3 id="react-组件中怎么做事件代理" tabindex="-1"><a class="header-anchor" href="#react-组件中怎么做事件代理" aria-hidden="true">#</a> React 组件中怎么做事件代理</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>React基于Virtual DOM实现了一个SyntheticEvent层（合成事件层），定义的事件处理器会接收到一个合成事件对象的实例，它符合W3C标准，且与原生的浏览器事件拥有同样的接口，支持冒泡机制，所有的事件都自动绑定在最外层上。 在React底层，主要对合成事件做了两件事：</p><ul><li>事件委派： React会把所有的事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数。</li><li>自动绑定： React组件中，每个方法的上下文都会指向该组件的实例，即自动绑定this为当前组件。</li></ul></div><h3 id="setstate" tabindex="-1"><a class="header-anchor" href="#setstate" aria-hidden="true">#</a> setState</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>不可变值(为了性能优化,不去触发shouldComponentUpdate)</li><li>可能是异步更新</li></ol><ul><li>异步： 在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。</li><li>同步： 在 React 无法控制的地方，比如原生事件，具体就是在 addEventListener 、setTimeout、setInterval 等事件中，就只能同步更新。</li></ul><ol start="3"><li>可能会被合并</li></ol><ul><li><code>setState()</code> 传递对象就会被合并（类似Object.assign），传递函数则不会被合并</li><li>setState是否同步，看是否能命中<code>bacthUpdate</code>机制，判断<code>isBatchingUpdates</code></li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">StateDemo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n        <span class="token comment">// 第一，state 要在构造函数中定义</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increase<span class="token punctuation">}</span><span class="token operator">&gt;</span>累加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// this.state.count++ // 错误的写法</span>\n        <span class="token comment">// setState 一定要用不可变值了</span>\n        <span class="token comment">// 只能用setState去修改值，禁止提前修改值，会导致shouldComponentUpdat中nextProps, nextState 相等</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// SCU</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;callback&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 1 异步获取</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token comment">// this.setState 是异步的，如果立刻同步获取是拿不到最新修改的值，需要用setState第二个参数会调函数中获取, 联想 Vue $nextTick - DOM</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;同步获取&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 0 </span>\n        <span class="token comment">// 操作数组、对象的的常用形式</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token number">100</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 100</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">increase2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// state 异步更新前会被合并</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// setState传入对象,会被合并（类似Object.assign）。执行结构只一次 + 1</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 0 + 1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token comment">// </span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">increase3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// state 异步更新前会被合并</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// setState传入函数不会被合并，结果为10，函数无法像对象一样被合并，只能被执行</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevState<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            count<span class="token operator">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 10</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">bodyClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count in body event&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 最新的值</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 自己定义的 DOM 事件，setState 是同步的</span>\n        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodyClickHandler<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 及时销毁自定义 DOM 事件</span>\n        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodyClickHandler<span class="token punctuation">)</span>\n        <span class="token comment">// clearTimeout</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="组件的状态-state-和属性-props-之间有何不同" tabindex="-1"><a class="header-anchor" href="#组件的状态-state-和属性-props-之间有何不同" aria-hidden="true">#</a> 组件的状态(state)和属性(props)之间有何不同</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>State 是一种数据结构，用于组件挂载时所需数据的默认值。State 可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果</li><li>Props(properties 的简写)则是组件的配置。props 由父组件传递给子组件，并且就子组件而言，props 是不可变的</li><li>组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)</li></ul></div><h2 id="react-进阶" tabindex="-1"><a class="header-anchor" href="#react-进阶" aria-hidden="true">#</a> React 进阶</h2><h3 id="受控和非受控组" tabindex="-1"><a class="header-anchor" href="#受控和非受控组" aria-hidden="true">#</a> 受控和非受控组</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><strong>受控组件：</strong> 控制着输入的过程，<code>react</code>的<code>state</code>为唯一的数据来源，被<code>react.state</code>这样控制着的就是受控组件(相当于实现数据绑定)。</li><li><strong>非受控组件：</strong> 不设置value值(只能设置<code>defaultValue</code>、<code>defaultChecked</code>),通过ref获取dom节点然后再取value值。在html表单中，input select checkbox，来暂存输入值,如果不需要关心控制值是怎么修改更新的，只需要获取这个组件的值，那么这个就是非受控组件。 <strong>非受控组件使用场景：</strong></li></ul><ol><li>必须手动操作DOM元素，<code>setState</code>实现不了。</li><li>文件上传<code>&lt;input type=&quot;file&quot;&gt;</code></li><li>开始或使用某些富文本编辑器、需要传入DOM 元素</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;gordanlee&#39;</span><span class="token punctuation">,</span>\n            flag<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>nameInputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建 ref</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>fileInputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// // input defaultValue</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token punctuation">{</span><span class="token comment">/* 使用 defaultValue 而不是 value ，使用 ref */</span><span class="token punctuation">}</span>\n            <span class="token operator">&lt;</span>input defaultValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>nameInputRef<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token punctuation">{</span><span class="token comment">/* state 并不会随着改变 */</span><span class="token punctuation">}</span>\n            <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>state<span class="token punctuation">.</span>name<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>alertName<span class="token punctuation">}</span><span class="token operator">&gt;</span>alert name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token comment">// // checkbox defaultChecked</span>\n        <span class="token comment">// return &lt;div&gt;</span>\n        <span class="token comment">//     &lt;input</span>\n        <span class="token comment">//         type=&quot;checkbox&quot;</span>\n        <span class="token comment">//         defaultChecked={this.state.flag}</span>\n        <span class="token comment">//     /&gt;</span>\n        <span class="token comment">// &lt;/div&gt;</span>\n        <span class="token comment">// file</span>\n        <span class="token comment">// return &lt;div&gt;</span>\n        <span class="token comment">//     &lt;input type=&quot;file&quot; ref={this.fileInputRef}/&gt;</span>\n        <span class="token comment">//     &lt;button onClick={this.alertFile}&gt;alert file&lt;/button&gt;</span>\n        <span class="token comment">// &lt;/div&gt;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">alertName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nameInputRef<span class="token punctuation">.</span>current <span class="token comment">// 通过 ref 获取 DOM 节点</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 不是 this.state.name</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">alertFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileInputRef<span class="token punctuation">.</span>current <span class="token comment">// 通过 ref 获取 DOM 节点</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="类组件和函数组件-无状态-之间的区别" tabindex="-1"><a class="header-anchor" href="#类组件和函数组件-无状态-之间的区别" aria-hidden="true">#</a> 类组件和函数组件(无状态)之间的区别</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>类组件: 可以使用其他特性，如状态 state 和生命周期钩子。</li><li>函数组件: 当组件只是接收 props 渲染到页面时，就是无状态组件，就属于函数组件，也被称为哑组件或展示组件</li></ul><ol><li>函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可,为了提高性能，尽量使用函数组</li><li>函数组件无实例、无<code>this</code>、无状态state,无生命周期不能扩展其他方法。</li><li>函数组件获取的总是事件发生的时候的值，即使值在事件发生后已经更新了,而类组件获取的总是最新的值。</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">//函数组件传参</span>\n<span class="token keyword">function</span> <span class="token function">CounterFunction</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">showAlert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token string">&#39;--from Function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>showAlert<span class="token punctuation">}</span><span class="token operator">&gt;</span>Show count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//类组件</span>\n<span class="token keyword">class</span> <span class="token class-name">CounterClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">showAlert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">&#39;--from Class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>He clicked <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showAlert</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n                  Show count\n                <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    state <span class="token operator">=</span> <span class="token punctuation">{</span>\n        count <span class="token operator">:</span> <span class="token number">123</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">456</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>CounterFunction count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>CounterClass count<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 当你两次调用的时候，你就会发现他们的页面渲染是相同的，count值都会变成456，但是，alert出来的值可就不一样了。</span>\n<span class="token comment">// Function的是123，Class的是456。所以当showAlert事件发生的时候，Function取的是发生前的值，是触发事件前的值，就像处对象，哪怕分手后，双方立刻找到了新对象，但仍然记得当初的美好</span>\n</code></pre></div><h3 id="portals-传送门" tabindex="-1"><a class="header-anchor" href="#portals-传送门" aria-hidden="true">#</a> Portals(传送门)</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>组件默认会按照既定层次嵌套渲染，Portal可以将React节点渲染到指定节点(如Dialog、Tooltip),vue2.x需要用<code>v-transfer-dom</code>,Vue3.0x可以用<code>Teleport</code></p><ol><li>父组件overflow:hidden</li><li>父组件z-index值太小</li><li>fixed 需要放在body第一层</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// // 正常渲染</span>\n      <span class="token comment">// return &lt;div className=&quot;modal&quot;&gt;</span>\n      <span class="token comment">//     {this.props.children} {/* vue slot */}</span>\n      <span class="token comment">// &lt;/div&gt;</span>\n\n      <span class="token comment">// 使用 Portals 渲染到 body 上。</span>\n      <span class="token comment">// fixed 元素要放在 body 上，有更好的浏览器兼容性。</span>\n      <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>\n          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;modal&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n          document<span class="token punctuation">.</span>body <span class="token comment">// DOM 节点</span>\n      <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="context-上下文" tabindex="-1"><a class="header-anchor" href="#context-上下文" aria-hidden="true">#</a> context(上下文)</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>React context的api解决的问题是祖先元素与子孙元素的通信问题。</p><ul><li>用props太繁琐,层级过深不友好</li><li>用redux小题大做</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token comment">// 创建 Context 填入默认值（任何一个 js 变量）</span>\n<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;欧美简约&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> ThemeContext2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;呃玛西亚&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 底层组件 - 函数是组件</span>\n<span class="token keyword">function</span> <span class="token function">ThemeLink</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// const theme = this.context // 会报错。函数式组件没有实例，即没有 this</span>\n    <span class="token comment">// 函数式组件可以使用 Consumer(消费)</span>\n    <span class="token comment">// Context多了很容易导致嵌套地狱。</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> \n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>当前主题<span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span>ThemeContext2<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>\n          <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token parameter">value2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>当前主题<span class="token number">2</span><span class="token operator">-</span><span class="token punctuation">{</span>value2<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext2<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> \n      <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 底层组件 - class 组件</span>\n<span class="token keyword">class</span> <span class="token class-name">ThemedButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 指定 contextType 读取当前的 theme context。</span>\n    <span class="token comment">// static contextType = ThemeContext // 也可以用 ThemedButton.contextType = ThemeContext</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token comment">// React 会往上找到最近的 theme Provider，然后使用它的值。</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;theme&#39;</span><span class="token punctuation">,</span> theme<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>当前主题<span class="token operator">-</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nThemedButton<span class="token punctuation">.</span>contextType <span class="token operator">=</span> ThemeContext <span class="token comment">// 指定 contextType 读取当前的 theme context。</span>\n\n<span class="token comment">// 中间的组件再也不必指明往下传递 theme 了。</span>\n<span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token string">&#39;10px&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n            中间组件\n            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>ThemedButton <span class="token operator">/</span><span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>ThemeLink <span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n            theme<span class="token operator">:</span> <span class="token string">&#39;欧美简约&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token string">&#39;10px&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTheme<span class="token punctuation">}</span><span class="token operator">&gt;</span>切换主题<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function-variable function">changeTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            theme<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">&#39;城乡结合&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;欧美简约&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;城乡结合&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><h3 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>import()</li><li>React.lazy</li><li>React.Suspense</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">const</span> ContextDemo <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./ContextDemo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>引入一个动态组件<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>ContextDemo<span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Suspense<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token comment">// 1. 强制刷新，可看到 loading （看不到就限制一下 chrome 网速）</span>\n        <span class="token comment">// 2. 看 network 的 js 加载</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><h3 id="高阶组件-hoc" tabindex="-1"><a class="header-anchor" href="#高阶组件-hoc" aria-hidden="true">#</a> 高阶组件 HOC</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>高阶组件不是一种功能，而是一种模式，类似应该是一个组件工厂、装饰器，获取低阶组件，生成高阶组件,简而言之，高阶组件就是一个函数，它接受一个组件为参数，返回一个新组件(如拉加载数据容器、播放器状态)。</p><ol><li>代码复用，代码模块化</li><li>增删改props</li><li>渲染劫持</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// React-redux的connect也是一个高阶组件</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token comment">// 高阶组件</span>\n<span class="token keyword">const</span> <span class="token function-variable function">HOCFactoryMouse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">withMouseComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          x<span class="token operator">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>\n          y<span class="token operator">:</span> event<span class="token punctuation">.</span>clientY\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token string">&#39;500px&#39;</span><span class="token punctuation">,</span> background<span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> onMouseMove<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token punctuation">{</span><span class="token comment">/* 1. 透传所有 props 2. 增加 mouse 属性 */</span><span class="token punctuation">}</span>\n              <span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">}</span>\n              <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> mouse<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n          <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> withMouseComponent\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> a <span class="token operator">=</span> props<span class="token punctuation">.</span>a\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>mouse <span class="token comment">// 接收 mouse 属性</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token string">&#39;500px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>鼠标坐标<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">HOCFactoryMouse</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment">// 返回高阶函数</span>\n<span class="token comment">// &lt;HOCDemo a=&quot;100&quot;/&gt;</span>\n</code></pre></div><h3 id="render-props" tabindex="-1"><a class="header-anchor" href="#render-props" aria-hidden="true">#</a> Render Props</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>组件接收一个函数，这个函数获取组件的state实现渲染逻辑(例如多个按钮，每个按钮点击会打开不同的Dialog,用Render Props就能写在一块)</p><ol><li>接收一个外部传递进来的 props 属性</li><li>将内部的 state 作为参数传递给调用组件的 props 属性方法. 缺点: 它很容易导致嵌套地狱</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&#39;prop-types&#39;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        x<span class="token operator">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>\n        y<span class="token operator">:</span> event<span class="token punctuation">.</span>clientY\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token string">&#39;500px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> onMouseMove<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n            <span class="token punctuation">{</span><span class="token comment">/* 将当前 state 作为 props ，传递给 render （render 是一个函数组件） */</span><span class="token punctuation">}</span>\n            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nMouse<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    render<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired <span class="token comment">// 必须接收一个 render 属性，而且是函数</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token string">&#39;500px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>Mouse render<span class="token operator">=</span><span class="token punctuation">{</span>\n            <span class="token comment">/* render 是一个函数组件 */</span>\n            <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token function">坐标</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n        <span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n        \n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span>\n<span class="token doc-comment comment">/**\n * 即，定义了 Mouse 组件，只有获取 x y 的能力。\n * 至于 Mouse 组件如何渲染，App 说了算，通过 render prop 的方式告诉 Mouse 。\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><h3 id="hoc-vs-render-props-区别" tabindex="-1"><a class="header-anchor" href="#hoc-vs-render-props-区别" aria-hidden="true">#</a> HOC vs Render Props 区别</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>HOC: 模式简单，但会增加组件层级(高级组件嵌套当前组件)</li><li>Render Props: 代码简洁，学习成本较高，无法在 return 语句外访问数据，它很容易导致嵌套地狱。</li><li>按需使用</li></ul></div><h3 id="react性能优化" tabindex="-1"><a class="header-anchor" href="#react性能优化" aria-hidden="true">#</a> React性能优化</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>渲染列表时加Key</li><li>自定义事件、DOM事件及时销毁</li><li>合理使用异步组件</li><li><strong><code>shouldComponentUpdate</code></strong>(简称SCU): SCU 默认返回true,即React 默认重新渲染所有子组件，必须配合<code>不可变值</code> 一起使用，可先不用SCU,有性能问题时再按需使用</li><li><strong><code>PureComponent(纯组件)</code> 和 <code>React.memo</code></strong>:前者类组件，后者函数组组件，原理是，当组件更新时，如果组件的 <code>props</code> 和 <code>state</code> 都没发生改变， render 方法就不会触发，省去 <code>Virtual DOM</code> 的生成和比对过程，达到提升性能的目的。具体就是 React 自动帮我们做了一层浅比较(Object.keys只比较第一层,类似浅拷贝浅比较)</li><li><strong>函数组件</strong>: 当一个组件只返回一个render建议使用函数组件,因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可,提高性能。</li><li><strong><code>immutable.js</code>不可变值</strong>：</li></ol><ul><li>React遵循<code>不可变值</code>设计理念，中常要深拷贝(性能消耗大)一份数据,再<code>setState</code>,使用<code>immutable</code>可彻底拥抱<code>不可变值</code>,基于共享数据（不是深拷贝）,速度快,但有一定的学习和迁移成本，按需使用。</li><li><code>immutable</code>数据一种利用结构共享形成的持久化数据结构，一旦有部分被修改，那么将会返回一个全新的对象，并且原来相同的节点会直接共享</li></ul><ol start="5"><li>公共组件抽离,提取公共逻辑，降低耦合度，如<code>minxin</code>(弃用)、高阶组件HOC、Render Props</li></ol></div><p><img src="'+e+'" alt="immutable"></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token punctuation">{</span>\n  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// _.isEqual 做对象或者数组的深度比较（一次性递归到底）</span>\n      <span class="token comment">// 1.isEqual 是个一次性深度递归到底，所以慎用</span>\n      <span class="token comment">// 2. react 提供了PureComponent、memo 做浅比较</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 相等，则不重复渲染</span>\n          <span class="token keyword">return</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// 不相等，则渲染</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">handleAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 正确的用法</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        name<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token doc-comment comment">/** 为了演示 SCU ，故意写的错误用法 **/</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 直接修改原值，而不是用的setState</span>\n        id<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        title\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 导致shouldComponentUpdate中 nextProps 和 nextState相当，</span>\n    <span class="token comment">// 如果正好做了判断，会导致不渲染</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n        list<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**PureComponent**/</span>\n<span class="token keyword">class</span> <span class="token class-name">ListOfWords</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>words<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**memo**/</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 使用 props 渲染 */</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/*\n  如果把 nextProps 传入 render 方法的返回结果与\n  将 prevProps 传入 render 方法的返回结果一致则返回 true，\n  否则返回 false\n  */</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**immutable**/</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Map<span class="token punctuation">,</span> List <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;immutable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> a<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> d<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> o<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> g<span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> map3 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>map2<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }const list1 = List([ 1, 2, 3 ]);const list2 = List([ 4, 5, 6 ]);const list3 = list1.concat(list2, array);</span>\n</code></pre></div><h3 id="react组件通讯" tabindex="-1"><a class="header-anchor" href="#react组件通讯" aria-hidden="true">#</a> React组件通讯</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><code>props</code>: [父子组件] 回调函数</li><li><code>Context</code>: [跨组件层级] 导入并调用<code>createContext</code>方法，从结果中解构出 <code>Provider</code>, <code>Consumer</code> 组件</li><li><code>redux</code>: redux、mobx等的状态管理工具</li><li><code>evnet Bus</code>: 事件总线</li></ul></div><h2 id="redux-和-react-redux" tabindex="-1"><a class="header-anchor" href="#redux-和-react-redux" aria-hidden="true">#</a> Redux 和 React-Redux</h2><p><img src="'+c+'" alt="Redux"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>redux是的诞生是为了给 React 应用提供「可预测化的状态管理」机制。</li><li>Redux会将整个应用状态(其实也就是数据)存储到到一个地方，称为store</li><li>这个store里面保存一棵状态树(state tree)</li><li>组件改变state的唯一方法是通过调用store的dispatch方法，触发一个action，这个action被对应的reducer处理，于是state完成更新</li><li>组件可以派发(dispatch)行为(action)给store,而不是直接通知其它组件</li><li>其它组件可以通过订阅store中的状态(state)来刷新自己的视图</li></ol></div><h3 id="react-redux" tabindex="-1"><a class="header-anchor" href="#react-redux" aria-hidden="true">#</a> React-Redux</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><strong>store</strong> store就是把action和reducer联系到一起的对象，store本质上是一个状态树，保存了所有对象的状态。任何UI组件都可以直接从store访问特定对象的状态</li><li><strong>Action</strong> 是把数据从应用传到 store 的有效载荷,它是 store 数据的唯一来源,一般来说你会通过 store.dispatch() 将 action 传到 store。</li><li><strong>reducer</strong> 指定了应用状态的变化如何响应 actions并发送到 store 的，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state</li><li><strong>Provider</strong> 其实就只是一个外层容器，它的作用就是通过配合 connect 来达到跨层级传递数据。使用时只需将Provider定义为整个项目最外层的组件，并设置好store。那么整个项目都可以直接获取这个store。它的原理其实是通过React中的<a href="">Context</a>来实现的</li><li><strong>connect</strong> 的作用是连接React组件与 Redux store，它包在我们的容器组件的外一层，它接收上面 Provider 提供的 store 里面的 state 和 dispatch，传给一个构造函数，返回一个对象，以属性形式传给我们的容器组件</li></ul><ol><li><code>mapStateToProps</code> 的作用是将store里的state</li><li><code>mapDispatchToProps</code> 的作用是将store里的action（操作数据的方法）绑定到指定组件的props中</li></ol></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** Redux **/</span>\n<span class="token comment">// Redux主要通过subscribe订阅事件</span>\n<span class="token comment">// constructor(){</span>\n<span class="token comment">//   this.state = store.getState();</span>\n<span class="token comment">// }</span>\nstore<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">listerner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newState <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  component<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/** react-redux **/</span>\n<span class="token comment">// App.js</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./components/App&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token comment">// Provider:提供器，将store提供给子组件使用</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// store.js</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span>\n<span class="token comment">// const defaultState = {</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;gordanlee&#39;</span><span class="token punctuation">,</span>\n  list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// reducers/userInfo</span>\n<span class="token keyword">const</span> <span class="token function-variable function">userInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// state: 上一次store中的数据 action:</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;SET_NAME&#39;</span><span class="token operator">:</span>\n      <span class="token comment">// 注意，返回不可变数据,reducers 可以接受state,不可以直接修改</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>state<span class="token punctuation">,</span>\n        name<span class="token operator">:</span> action<span class="token punctuation">.</span>value\n      <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> userInfo\n<span class="token comment">// actions</span>\n<span class="token comment">// 设置名字</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">SET_NAME</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;SET_NAME&#39;</span><span class="token punctuation">,</span>\n    value\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// reducers</span>\n<span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>reducers<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// App.js</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">SET_NAME</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../actions&#39;</span>\n<span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>handleSetName<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 把store中的数据映射成组件的Props</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    userInfo<span class="token operator">:</span> state<span class="token punctuation">.</span>userInfo\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// store.dispatch方法映射到Props中</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function">handleSetName</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token constant">SET_NAME</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// connect 让组件和store做连接</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span>\n</code></pre></div><h3 id="redux-中间件" tabindex="-1"><a class="header-anchor" href="#redux-中间件" aria-hidden="true">#</a> Redux 中间件</h3><p><img src="'+l+'" alt="中间件"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>dispatch</code>一个<code>action</code>之后，到达<code>reducer</code>之前，进行一些额外的操作，就需要用到<code>middleware</code>。 可以利用 <code>Redux middleware</code> 来进行日志记录、创建崩溃报告、调用异步接口或者路由等等,Redux store默认仅支持同步数据流,使用 thunk中间件 可以帮助在 Redux 应用中实现 异步的reducer(redux-thunk、redux-promise、redux-saga)</p><ol><li>调动dispatch派发一个新 action 对象</li><li>调用 getState 获得当前 Redux Store 上的状态</li><li>调用 next 告诉 Redux 当前中间件工作完毕，让 Redux 调用下一个中间件</li><li>访问 action 对象 action 上的所有数据</li></ol></div>',62),d=(0,t.Uk)("函数柯里化"),m={href:"https://www.jianshu.com/p/2975c25e4d71",target:"_blank",rel:"noopener noreferrer"},g=(0,t.Uk)("函数柯里化"),h=(0,t.uE)('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// 函数柯里化 多参函数-&gt;单参函数</span>\n<span class="token comment">// 在官方的示例中，有一个logger实现的示例</span>\n<span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;prev state&#39;</span><span class="token punctuation">,</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//获取状态数据</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dispatch&#39;</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;next state&#39;</span><span class="token punctuation">,</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter">extraArgument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> getState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> thunk <span class="token operator">=</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthunk<span class="token punctuation">.</span>withExtraArgument <span class="token operator">=</span> createThunkMiddleware<span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> thunk<span class="token punctuation">;</span>\n</code></pre></div><h2 id="react-原理" tabindex="-1"><a class="header-anchor" href="#react-原理" aria-hidden="true">#</a> React 原理</h2><h3 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>函数式编程是声明式编程的一部分。javascript中的函数是第一类公民，这意味着函数是数据，你可以像保存变量一样在应用程序中保存、检索和传递这些函数。 <strong>函数式编程有些核心的概念，如下：</strong></p><ul><li>不可变性(Immutability)</li><li>纯函数(Pure Functions)</li><li>数据转换(Data Transformations)</li><li>高阶函数 (Higher-Order Functions)</li><li>递归</li><li>组合</li></ul></div><h3 id="vdom-和-diff算法" tabindex="-1"><a class="header-anchor" href="#vdom-和-diff算法" aria-hidden="true">#</a> Vdom 和 diff算法</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>diff（翻译差异）：计算一棵树形结构转换成另一棵树形结构的最少操作</p><ul><li>参照vue Vdom 和 diff算法, 两者实现vdom细节都不同，核心概念和实现思路一致。</li></ul><ol><li>把树形结构按照层级分解，只比较同级元素</li><li>给列表结构的每个单元添加唯一的 key 属性，方便比较</li><li>React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）</li><li>合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制</li><li>选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能</li></ol></div><h3 id="jsx本质" tabindex="-1"><a class="header-anchor" href="#jsx本质" aria-hidden="true">#</a> JSX本质</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>JSX等同于Vue模板,Vue模板不是html</p><ul><li>React.createElement 即h函数，返回vnode</li><li>第一个参数，可能是组件，也可能是html tag</li><li>组件名首字母必须大写（react规定）</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>className<span class="token operator">:</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> onClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;内容&quot;</span> <span class="token operator">||</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 和vue 不同react子组可以数组[children]、也可以单个单个传递</span>\nReact<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> clild1<span class="token punctuation">,</span> clild2<span class="token punctuation">,</span> clild4<span class="token punctuation">)</span> \nReact<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \n<span class="token comment">// 第一个参数是组件</span>\nReact<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>List<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \n<span class="token comment">// JSX(可以使用babel在线转换试试)</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;../a.png&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> imgElem <span class="token operator">=</span> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span>\n        \t\t <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          \t\t\t<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n       \t\t\t <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> \n        \t\t <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n        \t    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token comment">// </span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;../a.png&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> imgElem <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;container&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">/*#__PURE__*/</span>\n  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*#__PURE__*/</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  src<span class="token operator">:</span> url\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="setstate-和-batchupdate" tabindex="-1"><a class="header-anchor" href="#setstate-和-batchupdate" aria-hidden="true">#</a> setState 和 batchUpdate</h3><p><img src="'+u+'" alt="batchUpdate"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>有时异步(普通使用),有时同步(setTimeout、原生DOM事件)</li><li>有时合并(对象形式),有时不合并(函数形式)</li><li>setState是否同步，看是否能命中bacthUpdate机制，判断isBatchingUpdates</li><li>bacthUpdate可命中 生命周期、React中注册的事件等React可以“管理”的入口</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 开始：处于batchUpdate</span>\n    <span class="token comment">// isBatchingUpdates = true</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 异步</span>\n      count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n     <span class="token comment">// 在setTimeout执行时,isBatchingUpdates已经false</span>\n      <span class="token comment">// 同步</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 结束</span>\n    <span class="token comment">// isBatchingUpdates = false</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="transaction-交易-事物机制" tabindex="-1"><a class="header-anchor" href="#transaction-交易-事物机制" aria-hidden="true">#</a> transaction(交易)事物机制</h3><p><img src="'+k+'" alt="transaction"><img src="'+r+'" alt="transaction"></p><h3 id="组件渲染和更新过程" tabindex="-1"><a class="header-anchor" href="#组件渲染和更新过程" aria-hidden="true">#</a> 组件渲染和更新过程</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>渲染</strong></p><ul><li>当页面一打开，就会调用render构建一棵DOM树</li><li>当数据发生变化（ state | props ）时，就会再渲染出一棵DOM树</li><li>此时，进行diff运算，两棵DOM树进行差异化对比，找到更新的地方进行批量改动</li></ul><ol><li>props state</li><li>render()生成vnode</li><li>patch(element, vnode) <strong>更新过程</strong></li><li>setState(newState) ==&gt; dirtyComponents(可能有子组件) setState修改之后会生成dirtyComponents(可能是当前组件或者子组件)，遍历它生成newVnode</li><li>render()生成newVnode</li><li>patch(element, vnode)</li></ol></div><h3 id="react-fiber" tabindex="-1"><a class="header-anchor" href="#react-fiber" aria-hidden="true">#</a> React-fiber</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>更新的分为两个阶段</strong></p><ol><li>reconciliation(协调) 阶段 - 执行diff算法，纯JS计算</li><li>commit阶段 - 将diff结果渲染DOM <strong>可能会有性能问题</strong></li><li>JS是单线程，且和DOM渲染共用一个线程</li><li>当组件足够复杂，组件更新时计算和渲染都压力大</li><li>当同是再有DOM操作需求(动画,鼠标拖拽等),将卡顿 <strong>解决方案 fiber</strong></li></ol><ul><li>将reconciliation阶段进行任务拆分(commit阶段无法拆分)</li><li>DOM需要渲染时暂停，空闲时恢复重启各个子任务的执行</li><li>window.requestIdleCallback</li></ul></div><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>历史问题：</strong></p><ul><li>使用函数组件(无状态组件)无法使用 <code>state</code>、生命周期 以及其他的 <code>React</code> 特性</li><li>大型组件很难拆分和重构，很难测试(即class不易拆分)</li><li>复用逻辑变复杂，providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成<strong>嵌套地狱</strong><br><strong>使用Hooks</strong></li><li>React 提倡函数式编程 view = fn(props),单函数组件太简单，需要增强能力 ———— <code>Hooks</code></li></ul></div><h3 id="state-hook" tabindex="-1"><a class="header-anchor" href="#state-hook" aria-hidden="true">#</a> State Hook</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>让函数组件实现<code>state</code> 和 <code>setState</code></strong></p><ul><li>默认函数组件没有<code>state</code></li><li>函数组件是个纯函数，执行完即销毁，无法<code>state</code></li><li>需要<code>State Hook</code>,即把state功能“钩”到纯函数中<br><strong>规范:</strong></li><li>所有的Hooks都以use开头，如useXxx，包括自定义Hook</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">function</span> <span class="token function">ClickCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 数组的解构</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \n  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;gordanlee&#39;</span><span class="token punctuation">)</span> \n  <span class="token comment">// 传入一个初始值, 返回数组，第一个元素是这个值，第二个是修改这个值的方法</span>\n  <span class="token comment">// const arr = useState(0)</span>\n  <span class="token comment">// count = arr[0]</span>\n  <span class="token comment">// count = arr[1]</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span>点击次数<span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>点击次数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> ClickCounter\n</code></pre></div><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>默认函数组件没有生命周期</li><li>函数组件是一个纯函数，执行完即销毁，自己无法实生命周期</li><li>使用<code>Effect Hook</code> 把生命周期“钩”到纯函数中<br><strong>副作用</strong></li><li><code>useEffect</code>让纯函数有了副作用，默认情况下，执行纯函数，输入参数，返回结果，无副作用</li><li>所谓副作用，就是对函数之外造成影响，如果设置全局定时任务,数据获取,数据订阅，以及手动更改 React 组件中的 DOM 都属于副作用,因为我们渲染出的页面都是静态的，任何在其之后的操作都会对他产生影响，所以称之为副作用.</li><li>副作用又分为两种：（1）无需清除的副作用(送网络请求、手动变更 DOM、记录日志) （2）需要清除的副作用（添加DOM事件、定时器）</li><li>而组件需要副作用，需要<code>useEffect</code> &quot;钩&quot; 到函数中<br><strong>使用</strong></li><li>模拟<code>componentDidMount</code> - useEffect 依赖[]</li><li>模拟<code>componentDidUpdate</code> - useEffect 无依赖，或则依赖[a, b]</li><li>模拟<code>componentWillUnmount</code> - useEffect 中返回一个函数<br><strong>注意</strong></li><li><code>useEffect</code>的第二个参数为一个空数组，初始化调用一次之后不再执行，相当于<code>componentDidMount</code></li><li><code>useEffect</code> 第二个参数时或者依赖[a, b],组件的初始化和更新都会执行返回FN,所以不完全等价class中 <code>componentWillUnmount</code></li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">function</span> <span class="token function">Lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;gordanlee&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 可以模拟 class 组件的 DidMount 和 DidUpdate</span>\n  <span class="token comment">// useEffect(()=&gt;{</span>\n  <span class="token comment">//   console.log(&#39;发送一个ajax请求&#39;)</span>\n  <span class="token comment">// })</span>\n  <span class="token comment">// 只模拟 class 组件的DidMount</span>\n  <span class="token comment">// useEffect(()=&gt;{</span>\n  <span class="token comment">//   console.log(&#39;发送一个ajax请求&#39;)</span>\n  <span class="token comment">// }, []) // 第二个参数是空数组</span>\n  <span class="token comment">// 只模拟 class 组件的DidUpdate</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;更新&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 第二个参数是依赖的state</span>\n  <span class="token comment">// 模拟componentWillUnmount</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> timerId <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token comment">// 返回一个函数，模拟componentWillUnmount</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">function</span> <span class="token function">clickHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token function">setName</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39;Max&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span>点击了<span class="token punctuation">{</span>count<span class="token punctuation">}</span>次<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>clickHandle<span class="token punctuation">}</span><span class="token operator">&gt;</span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Lifecycle\n</code></pre></div><h3 id="useeffect-中返回的函数fn" tabindex="-1"><a class="header-anchor" href="#useeffect-中返回的函数fn" aria-hidden="true">#</a> useEffect 中返回的函数FN</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><code>useEffect</code> 的第二个参数一个空数组, 组件销毁是执行fn,fn等于<code>componentWillUnmount</code></li><li><code>useEffect</code> 第二个参数时或者依赖[a, b],组件的初始化和更新都会执行返回FN</li><li>即，下一次执行<code>useEffect</code>之前，就会执行fn,无论更新或卸载,所以不完全等价class中 <code>componentWillUnmount</code></li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>friendId<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> setStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token comment">// DidMount 和 DidUpdate</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">开始监听 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>friendId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在线状态</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token comment">// 【特别注意】</span>\n    <span class="token comment">// 此处并不完全等同于 WillUnMount</span>\n    <span class="token comment">// props 发生变化，即更新，也会先执行结束监听</span>\n    <span class="token comment">// 准确的说: 返回的函数，会在下一次`effect`执行之前被执行</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">结束监听 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>friendId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在线状态</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    好友 <span class="token punctuation">{</span>friendId<span class="token punctuation">}</span> 在线状态： <span class="token punctuation">{</span>status<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> FriendStatus\n</code></pre></div><h3 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo" aria-hidden="true">#</a> useMemo</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>父组件改变，<code>React</code>默认会更新所有子组件</li><li><code>class</code>组件使用<code>SCU</code> 和 <code>PureComponent</code> 做优化</li><li><code>Hooks</code> 中使用useMemo,但优化的原理是相同的</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> memo<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token comment">// 子组件</span>\n<span class="token comment">// function Child({ userInfo}) {</span>\n<span class="token comment">//   console.log(&#39;Child render...&#39;, userInfo)</span>\n<span class="token comment">//   return &lt;div&gt;</span>\n<span class="token comment">//       &lt;p&gt;这是子组件{userInfo.name} {userInfo.age}&lt;/p&gt;</span>\n<span class="token comment">//     &lt;/div&gt;</span>\n<span class="token comment">// }</span>\n<span class="token comment">// 类似 class PireeComponent, 对props进行浅层比较</span>\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> userInfo<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Child render...&#39;</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这是子组件<span class="token punctuation">{</span>userInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>userInfo<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 父组件</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Parent render...&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;goradanlee&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// const userInfo = { name, age: 20 }</span>\n  <span class="token comment">// userInfo传静态值，子组件只依赖name、age，按理父组件改变后子组件不会受到影响，但是也被更新了</span>\n  <span class="token doc-comment comment">/******/</span>\n  <span class="token comment">// 用 useMemo 缓存数据,有依赖</span>\n  <span class="token keyword">const</span> userInfo <span class="token operator">=</span>  <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>\n       count is <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n       <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n         <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>Child userInfo<span class="token operator">=</span><span class="token punctuation">{</span>userInfo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> useCallback</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><code>useMemo</code>缓存数据</li><li><code>useCallback</code>缓存函数</li><li>两者都是 <code>React Hooks</code> 的常见缓存策略</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> memo<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token comment">// 子组件</span>\n<span class="token comment">// 类似 class PireeComponent, 对props进行浅层比较</span>\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> userInfo<span class="token punctuation">,</span> onChange<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Child render...&#39;</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这是子组件<span class="token punctuation">{</span>userInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>userInfo<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 父组件</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Parent render...&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;goradanlee&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 用 useMemo 缓存数据,有依赖</span>\n  <span class="token keyword">const</span> userInfo <span class="token operator">=</span>  <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token comment">// function onChange(e) {</span>\n  <span class="token comment">//   console.log(e.target.value)</span>\n  <span class="token comment">// }</span>\n  <span class="token comment">// 用 useCallback 缓存数据(如果不用会导致useMemo失效)</span>\n  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>\n       count is <span class="token punctuation">{</span>count<span class="token punctuation">}</span>\n       <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n         <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>Child userInfo<span class="token operator">=</span><span class="token punctuation">{</span>userInfo<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>DOM元素的获取</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> btnRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 初始值</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>btnRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token comment">// DOM节点</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button ref<span class="token operator">=</span><span class="token punctuation">{</span>btnRef<span class="token punctuation">}</span><span class="token operator">&gt;</span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> useContext</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>useContext可以帮助我们跨越组件层级直接传递变量，实现共享。</li></ul></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// 父</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">,</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> CountContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span> count <span class="token punctuation">,</span> setCount <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>CountContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>CountContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Example<span class="token punctuation">;</span>\n<span class="token comment">// 子</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">,</span> createContext <span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>  \n<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>CountContext<span class="token punctuation">)</span>    <span class="token comment">//一句话就可以得到count</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="vue-和-react一些区别" tabindex="-1"><a class="header-anchor" href="#vue-和-react一些区别" aria-hidden="true">#</a> Vue 和 React一些区别</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>相同点</strong></p><ol><li>都支持组件化</li><li>都是数据驱动视同</li><li>都使用vdom操作dom <strong>不同点</strong></li><li>React 使用JSX拥抱JS, Vue使用模板拥抱html</li><li>React函数式编程,Vue声明式编程</li><li>React更多需要自力更生(手动挡)，Vue把想要的都给你 <strong>细的</strong></li><li><code>Vue</code> 定义了很多指令(如v-for、v-if)去实现一些展示，<code>React</code> 主要还是依赖JS方法去实现</li><li><code>Vue</code> 绑定事件 <code>Event</code> 是原生的和DOM事件一样, 而 <code>React</code> 是封装组合之后的 <code>SyntheticBaseEvent</code> 需要访问<code>nativeEvent</code> 才能获取原生<code>Event</code>。</li><li><code>Vue</code> 使用 <code>v-model</code> 语法糖实现双向数据绑定，而<code>React</code>则需要自己绑定<code>onChange</code> 事件</li></ol></div>',44),f={},v=(0,a(4321).Z)(f,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[i,(0,t._)("p",null,[d,(0,t._)("a",m,[g,(0,t.Wm)(a)])]),h],64)}]])},4321:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},2201:(n,s,a)=>{n.exports=a.p+"assets/img/37.1d25cb01.png"},5901:(n,s,a)=>{n.exports=a.p+"assets/img/38.ab69e805.jpg"},7231:(n,s,a)=>{n.exports=a.p+"assets/img/39.b080230f.gif"},2625:(n,s,a)=>{n.exports=a.p+"assets/img/41.7f853398.jpg"},310:(n,s,a)=>{n.exports=a.p+"assets/img/42.68c1e2f5.jpg"},9987:(n,s,a)=>{n.exports=a.p+"assets/img/43.4f1b0aee.jpg"},8564:(n,s,a)=>{n.exports=a.p+"assets/img/44.59ceb365.png"},9593:(n,s,a)=>{n.exports=a.p+"assets/img/45.1313d1e0.png"}}]);