"use strict";(self.webpackChunkgordan404wiki=self.webpackChunkgordan404wiki||[]).push([[2301],{1145:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7ddd67c5",path:"/interview/h5.html",title:"前端进阶指北",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"HTML和CSS相关基础",slug:"html和css相关基础",children:[{level:3,title:"css盒模型",slug:"css盒模型",children:[]},{level:3,title:"BFC(块级格式化上下文，用于清除浮动，防止margin重叠等)",slug:"bfc-块级格式化上下文-用于清除浮动-防止margin重叠等",children:[]},{level:3,title:"选择器权重",slug:"选择器权重",children:[]},{level:3,title:"css选择器选择顺序是从右往左？",slug:"css选择器选择顺序是从右往左",children:[]},{level:3,title:"querySelectorAll 和 getElementsByTagName的区别",slug:"queryselectorall-和-getelementsbytagname的区别",children:[]},{level:3,title:"清楚浮动方法",slug:"清楚浮动方法",children:[]},{level:3,title:"如何做水平垂直居中？",slug:"如何做水平垂直居中",children:[]},{level:3,title:"三栏布局",slug:"三栏布局",children:[]},{level:3,title:"position 跟 display、overflow、float 这些特性相互叠加后会怎么样?",slug:"position-跟-display、overflow、float-这些特性相互叠加后会怎么样",children:[]},{level:3,title:"flex: 1 是哪些值的缩写",slug:"flex-1-是哪些值的缩写",children:[]},{level:3,title:"简易版动态计算REM",slug:"简易版动态计算rem",children:[]}]}],filePathRelative:"interview/h5.md",git:{updatedTime:1638637373e3,contributors:[{name:"lishuaixingNewBee",email:"vae.china@foxmail.com",commits:10}]}}},8276:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(5314),p=a(3426),e=a(5819);const o=(0,t.uE)('<h1 id="前端进阶指北" tabindex="-1"><a class="header-anchor" href="#前端进阶指北" aria-hidden="true">#</a> 前端进阶指北</h1><h2 id="html和css相关基础" tabindex="-1"><a class="header-anchor" href="#html和css相关基础" aria-hidden="true">#</a> HTML和CSS相关基础</h2><h3 id="css盒模型" tabindex="-1"><a class="header-anchor" href="#css盒模型" aria-hidden="true">#</a> css盒模型</h3><p><img src="'+p+'" alt="css盒模型"></p><div class="custom-container tip"><p class="custom-container-title">区别：计算宽高的方式不一样。</p><p>1.IE盒子模型(怪异盒子)box-sizing :border-box; width:200px = border + padding + content 2.W3C标准盒模型box-sizing : content-box; width:200px = content</p></div><p><strong>获取宽高:</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code> <span class="token number">1.</span> dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token function">height</span> <span class="token punctuation">(</span>获取内连样式<span class="token punctuation">)</span>\n <span class="token number">2.</span> dom<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token function">height</span><span class="token punctuation">(</span>渲染以后的高度，仅<span class="token constant">IE</span><span class="token punctuation">)</span>\n <span class="token number">3.</span> widonw<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token function">height</span> <span class="token punctuation">(</span>最佳，兼容性好<span class="token punctuation">)</span>\n <span class="token number">4.</span> dom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token operator">/</span>right<span class="token operator">/</span>top\n</code></pre></div><h3 id="bfc-块级格式化上下文-用于清除浮动-防止margin重叠等" tabindex="-1"><a class="header-anchor" href="#bfc-块级格式化上下文-用于清除浮动-防止margin重叠等" aria-hidden="true">#</a> BFC(块级格式化上下文，用于清除浮动，防止margin重叠等)</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>一个块格式化上下文（block formatting context） 是Web页面的可视化CSS渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。（当出现父子、或者兄弟margin重叠时，浏览器会默认取最大的）</p></div><p><strong>BFC原理(渲染规则):</strong></p><ol><li>BFC就是一个块级元素，块级元素会在垂直方向一个接一个的排列</li><li>BFC就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签</li><li>垂直方向的距离由margin决定， 属于同一个BFC的两个相邻的标签外边距会发生重叠【符合合并原则的margin合并后是使用大的margin】</li><li>计算BFC的高度时，浮动元素也参与计算 <strong>如何创建BFC:</strong></li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code>根元素\nfloat的值不为none  \noverflow值不为visible  \nposition值不为<span class="token keyword">static</span> <span class="token operator">/</span> relative  \ndisplay的值为table<span class="token operator">-</span>cell，table<span class="token operator">-</span>caption， inline<span class="token operator">-</span>block 中的任何一个\n</code></pre></div><h3 id="选择器权重" tabindex="-1"><a class="header-anchor" href="#选择器权重" aria-hidden="true">#</a> 选择器权重</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>组合选择器的优先级：根据组合选择器的权重进行计算，权重大的优先级就高。 组合选择器权重计算方式：各选择器权重相加之和 !important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符* &gt; 继承 &gt; 浏览器默认属性</p></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token number">1.</span> <span class="token operator">*</span>              <span class="token number">0</span>\n<span class="token number">2.</span> 标签选择器      <span class="token number">1</span>\n<span class="token number">3.</span> 类选择器        <span class="token number">10</span>\n<span class="token number">4.</span> id选择器        <span class="token number">100</span>\n<span class="token number">5.</span> style行间样式   <span class="token number">1000</span>\n<span class="token number">6.</span> ！important    <span class="token number">10000</span>\n<span class="token number">7.</span> 后代选择器 看里面的组成\n</code></pre></div><h3 id="css选择器选择顺序是从右往左" tabindex="-1"><a class="header-anchor" href="#css选择器选择顺序是从右往左" aria-hidden="true">#</a> css选择器选择顺序是从右往左？</h3><p><img src="'+e+'" alt="css选择器"></p><p><code>.mod-nav ul li</code> 如果有是从左到右，首先就要检查当前元素到html的整条路径，找到最上层 的 .mod-nav，再往下找，遍历子节点header和子节点div,如果遇到不匹 配就必须回到最上层那个.mod-nav，往下找去.mod-nav匹配选择器中的第 一个ul，回溯若干次才能确定匹配与否，效率很低。逆向匹配则不同，如果 当前的DOM元素不是selector最后的li，那只要一步就能排除。只有在匹 配时，才会不断向上找父节点进行验证，这样效率是不是会高很多。 （减少回溯） <strong>总结</strong></p><ol><li>右边的tree复杂度要比左边的低</li><li>右边的tree公用样式重合度比左边的低</li><li>右边的tree从根开始的节点数要比左边的少</li></ol><h3 id="queryselectorall-和-getelementsbytagname的区别" tabindex="-1"><a class="header-anchor" href="#queryselectorall-和-getelementsbytagname的区别" aria-hidden="true">#</a> querySelectorAll 和 getElementsByTagName的区别</h3><div class="custom-container tip"><p class="custom-container-title">主要区别(返回值)</p><p><code>querySelectorAll()</code>返回的是<code>NodeList</code>集合,<code>getElementsByTagName()</code>返回的是<code>HTMLCollection</code>集合。 其前者是一个动态集合，后者是一个静态集合。 <code>static NodeList</code>也就是说如果将它的返回结果保存下来，当文档更新时，保存的NodeList里的元素不会跟着更新。</p></div><h3 id="清楚浮动方法" tabindex="-1"><a class="header-anchor" href="#清楚浮动方法" aria-hidden="true">#</a> 清楚浮动方法</h3><ol><li>父元素 <code>overflow: hidden</code>;</li><li>浮动元素后面的元素： <code>clear: both</code>;</li><li>伪元素选择器:<code>.clear::after{ content:’’;display:block; clear:both;}</code>;</li><li>父元素设置高度；</li><li>父级元素：<code>display: table</code>;</li></ol><h3 id="如何做水平垂直居中" tabindex="-1"><a class="header-anchor" href="#如何做水平垂直居中" aria-hidden="true">#</a> 如何做水平垂直居中？</h3><p><strong>方案一：</strong> 已知宽高，设置 <code>position: absolute;</code>，然后left和top都设置为50%，再根据<code>margin</code>的负值来调正</p><p><strong>方案二：</strong> 类似方案一，最后一步用<code>transform:translate(-50%,-50%)</code>;</p><p><strong>方案三：</strong> 绝对定位，top、bottom、left、right都设置为0，设置好宽高，然后margin: auto;</p><p><strong>方案四：</strong> 父元素 <code>display:table-cell</code> + <code>vertical-align:middle</code>;</p><p><strong>方案五：</strong> 使用flex弹性盒模型</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“box”</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“item”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n.box{\n  display:flex;\n  justifly-content:center;\n  align-item:center;\n}\n.box{\n  position:relative;\n}\n.item{\n  position:absolute;\n  top:50%;\n  transform:translateY(-50%);\n}\n</code></pre></div><h3 id="三栏布局" tabindex="-1"><a class="header-anchor" href="#三栏布局" aria-hidden="true">#</a> 三栏布局</h3><p><strong>方案一：</strong> 浮动布局(只有处理好浮动，兼容性最佳) 如果高度不固定只有 表格布局 和 flexbox布局 能自适应。</p><div class="language-css ext-css"><pre class="language-css"><code> <span class="token selector">.layout .left</span><span class="token punctuation">{</span>\n    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.layout .center</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.layout .right</span><span class="token punctuation">{</span>\n    <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p><strong>方案二：</strong> 绝对布局(缺点:子元素也脱离了文本流)</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.layout div</span><span class="token punctuation">{</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout .left</span><span class="token punctuation">{</span>\n  <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout .center</span><span class="token punctuation">{</span>\n  <span class="token property">left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">right</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout .right</span><span class="token punctuation">{</span>\n  <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>方案三：</strong> flexbox布局(移动端最佳方案)</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.layout</span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.left</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout .center</span><span class="token punctuation">{</span>\n  <span class="token property">flex</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout .right</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>方案四：</strong> 表格布局（PC端）</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.layout</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.table &gt; div</span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.table .left</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.table .center</span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.table .right</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>方案五：</strong> 网格布局（cs3新增，类似删格布局）</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.layout</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>\n  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 300px auto 300px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.grid .left</span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.grid .center</span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.layout.grid .right</span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="position-跟-display、overflow、float-这些特性相互叠加后会怎么样" tabindex="-1"><a class="header-anchor" href="#position-跟-display、overflow、float-这些特性相互叠加后会怎么样" aria-hidden="true">#</a> position 跟 display、overflow、float 这些特性相互叠加后会怎么样?</h3><div class="custom-container tip"><p class="custom-container-title">主要区别(返回值)</p><p>display 属性规定元素应该生成的框的类型; position 属性规定元素的定位类型; float 属性是一种布局方式，定义元素在哪个方向浮动。 类似于优先级机制:position:absolute/fixed 优先级最高，有他们在时，float 不起作 用，display 值需要调整。float 或者 absolute 定位的元素，只能是块元素或表格。</p></div><h3 id="flex-1-是哪些值的缩写" tabindex="-1"><a class="header-anchor" href="#flex-1-是哪些值的缩写" aria-hidden="true">#</a> flex: 1 是哪些值的缩写</h3><p><strong>flex-grow:</strong> 指定子项目的放大比例, 默认为0(即不放大). 该属性可取值为任何正整数. 假设各个子项目的放大比例之和为n, 那么容器内剩余的空间将分配n份, 每个子项目各自分到x/n份. (x为该子项目的放大比例)</p><p><strong>flex-shrink：</strong> 指定子项目的缩小比例, 默认为1. 设置为0时, 空间不足该子项目将不缩小. 我们知道, 容器的缩小总宽度=子项目所需要的总宽度-容器实际宽度, 假设容器需要缩小的宽度为W, 某子项目的默认宽度为L, 其缩小比例为p, 那么该子项目实际的宽度为L-p*W.</p><p><strong>flex-basis：</strong> 规定的是子元素的基准值,指定了 flex 元素在主轴方向上的初始大小。如果不使用 box-sizing 来改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的宽或者高（取决于主轴的方向）的尺寸大小</p><h3 id="简易版动态计算rem" tabindex="-1"><a class="header-anchor" href="#简易版动态计算rem" aria-hidden="true">#</a> 简易版动态计算REM</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>完整版需要考虑DPR(物理像素和设备独立像素(CSS像素分辨率)比例devicePixelRatio) metaEl.setAttribute(&#39;content&#39;, &#39;initial-scale=&#39; + scale + &#39;, maximum-scale=&#39; + scale + &#39;, minimum-scale=&#39; + scale + &#39;, user-scalable=no&#39;);</p></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">commputed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> docEl <span class="token operator">=</span> doc<span class="token punctuation">.</span>documentElement<span class="token punctuation">,</span>\n        winW <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>\n        desw <span class="token operator">=</span> <span class="token number">750</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>winW <span class="token operator">&gt;=</span> desW<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      docEl<span class="token punctuation">.</span>stylel<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&quot;100px&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token constant">HTML</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span>winW <span class="token operator">/</span> desw<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  doc<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> commputed<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div>',50),c={},l=(0,a(4321).Z)(c,[["render",function(n,s){return o}]])},4321:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},3426:(n,s,a)=>{n.exports=a.p+"assets/img/17.842795e0.png"},5819:(n,s,a)=>{n.exports=a.p+"assets/img/18.f7f20d62.png"}}]);