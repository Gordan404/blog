(self.webpackChunkgordan404wiki=self.webpackChunkgordan404wiki||[]).push([[3160],{8630:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-3f08ed6e",path:"/books/javascript/algorithm.html",title:"JavaScript数据结构和算法",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"数组",slug:"数组",children:[{level:3,title:"为什么用数组？",slug:"为什么用数组",children:[]},{level:3,title:"创建和初始化数组",slug:"创建和初始化数组",children:[]},{level:3,title:"添加元素",slug:"添加元素",children:[]},{level:3,title:"删除元素",slug:"删除元素",children:[]},{level:3,title:"在任意位置添加和删除元素",slug:"在任意位置添加和删除元素",children:[]},{level:3,title:"二维和多维数组",slug:"二维和多维数组",children:[]},{level:3,title:"JavaScript的数组方法参考",slug:"javascript的数组方法参考",children:[]}]},{level:2,title:"栈",slug:"栈",children:[{level:3,title:"创建一个基于数组的栈结构",slug:"创建一个基于数组的栈结构",children:[]},{level:3,title:"创建一个基于对象的栈结构",slug:"创建一个基于对象的栈结构",children:[]},{level:3,title:"用栈解决实际问题",slug:"用栈解决实际问题",children:[]}]},{level:2,title:"队列和双端队列",slug:"队列和双端队列",children:[{level:3,title:"队列数据结构",slug:"队列数据结构",children:[]},{level:3,title:"双端队列数据结构",slug:"双端队列数据结构",children:[]},{level:3,title:"使用队列和双端队列解决实际问题",slug:"使用队列和双端队列解决实际问题",children:[]}]},{level:2,title:"链表",slug:"链表",children:[{level:3,title:"链表数据结构",slug:"链表数据结构",children:[]},{level:3,title:"双向链表",slug:"双向链表",children:[]},{level:3,title:"循环链表",slug:"循环链表",children:[]}]},{level:2,title:"集合",slug:"集合",children:[{level:3,title:"创建集合类",slug:"创建集合类",children:[]},{level:3,title:"集合运算",slug:"集合运算",children:[]},{level:3,title:"ES6中的Set类",slug:"es6中的set类",children:[]}]},{level:2,title:"字典和散列表",slug:"字典和散列表",children:[{level:3,title:"字典",slug:"字典",children:[]},{level:3,title:"散列表",slug:"散列表",children:[]}]},{level:2,title:"递归",slug:"递归",children:[{level:3,title:"理解递归",slug:"理解递归",children:[]},{level:3,title:"计算一个数的阶乘",slug:"计算一个数的阶乘",children:[]},{level:3,title:"斐波那契数列",slug:"斐波那契数列",children:[]}]},{level:2,title:"树",slug:"树",children:[{level:3,title:"树数据结构",slug:"树数据结构",children:[]},{level:3,title:"树的相关术语",slug:"树的相关术语",children:[]},{level:3,title:"二叉树和二叉搜索树",slug:"二叉树和二叉搜索树",children:[]},{level:3,title:"树的遍历",slug:"树的遍历",children:[]},{level:3,title:"搜索树中的值",slug:"搜索树中的值",children:[]},{level:3,title:"自平衡树",slug:"自平衡树",children:[]}]},{level:2,title:"二叉堆和堆排序",slug:"二叉堆和堆排序",children:[{level:3,title:"二叉堆数据结构",slug:"二叉堆数据结构",children:[]},{level:3,title:"堆排序算法",slug:"堆排序算法",children:[]}]},{level:2,title:"图",slug:"图",children:[{level:3,title:"图的相关术语",slug:"图的相关术语",children:[]},{level:3,title:"图的表示",slug:"图的表示",children:[]},{level:3,title:"创建Graph类",slug:"创建graph类",children:[]},{level:3,title:"图的遍历",slug:"图的遍历",children:[]},{level:3,title:"最短路径算法",slug:"最短路径算法",children:[]},{level:3,title:"最小生成树",slug:"最小生成树",children:[]}]},{level:2,title:"排序和搜索算法",slug:"排序和搜索算法",children:[{level:3,title:"排序算法",slug:"排序算法",children:[]},{level:3,title:"搜索算法",slug:"搜索算法",children:[]}]},{level:2,title:"算法设计与技巧",slug:"算法设计与技巧",children:[{level:3,title:"分而治之",slug:"分而治之",children:[]},{level:3,title:"动态规划",slug:"动态规划",children:[]},{level:3,title:"贪心算法",slug:"贪心算法",children:[]},{level:3,title:"回溯算法",slug:"回溯算法",children:[]},{level:3,title:"函数式编程简介",slug:"函数式编程简介",children:[]}]},{level:2,title:"算法复杂度",slug:"算法复杂度",children:[{level:3,title:"大O表示法",slug:"大o表示法",children:[]},{level:3,title:"用算法娱乐身心",slug:"用算法娱乐身心",children:[]}]}],filePathRelative:"books/javascript/algorithm.md",git:{updatedTime:1626972344e3,contributors:[{name:"lishuaixingNewBee",email:"vae.china@foxmail.com",commits:1}]}}},8683:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>Cp});var t=a(4057);const o=a.p+"assets/img/tree0.b0666a3c.png",e=a.p+"assets/img/tree1.5ef3557c.png",c=a.p+"assets/img/tree2.838136cc.png",k=a.p+"assets/img/tree3.5df6fe04.png",p=a.p+"assets/img/tree4.e79726f7.png",l=a.p+"assets/img/tree5.579aac34.png",u=a.p+"assets/img/tree6.a4754c9e.png",m=a.p+"assets/img/tree7.bb73cebc.png",W=a.p+"assets/img/tree8.a7192ba2.png",i=a.p+"assets/img/tree9.d13144af.png",r=a.p+"assets/img/tree10.f1ecd4ea.png",U=a.p+"assets/img/tree11.e1b9b3ef.png",d=a.p+"assets/img/tree12.69ec3161.png",h=a.p+"assets/img/tree13.fb67ed74.png",y=a.p+"assets/img/tree14.b4f9d532.png",f=(0,t.Wm)("h1",{id:"javascript数据结构和算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#javascript数据结构和算法","aria-hidden":"true"},"#"),(0,t.Uk)(" JavaScript数据结构和算法")],-1),w=(0,t.Wm)("h2",{id:"数组",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#数组","aria-hidden":"true"},"#"),(0,t.Uk)(" 数组")],-1),g=(0,t.Wm)("p",null,[(0,t.Uk)("数组存储了一系列同一种数据类型的值，虽然在"),(0,t.Wm)("code",null,"JavaScript"),(0,t.Uk)("中，也可以在数组中保存不同类的值，但我们还是需要遵守最佳实践，避免这样做。")],-1),b=(0,t.Wm)("h3",{id:"为什么用数组",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#为什么用数组","aria-hidden":"true"},"#"),(0,t.Uk)(" 为什么用数组？")],-1),v=(0,t.Wm)("p",null,[(0,t.Uk)("问：为什么我们需要使用数组？"),(0,t.Wm)("br"),(0,t.Uk)(" 答：在生活中，我们经常会碰到类似于如下这样的需求：保存所在城市每个月的平均温度。")],-1),x=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" averageTempJan "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"31.9"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" averageTempFeb "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"35.3"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" averageTempMar "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"42.4"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" averageTempApr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"52"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" averageTempMay "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"60.8"),(0,t.Uk)("\n")])])],-1),j=(0,t.Wm)("p",null,[(0,t.Uk)("幸运的时，一年只有12个月，我们最多只需要定义12个变量便能满足以上的需求。但如果我们需要记录一年365天每一天的平均温度，那么我们是否需要定义365个变量呢？"),(0,t.Wm)("br"),(0,t.Uk)(" 这个时候，如果能够一种结构，能够存储这一类的数据，那么就可以解决我们当前遇到的问题，正如你所猜到的那样，这种结构就是数组：")],-1),S=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" averageTemp "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\naverageTemp"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"31.9"),(0,t.Uk)("\naverageTemp"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"35.3"),(0,t.Uk)("\naverageTemp"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"42.4"),(0,t.Uk)("\naverageTemp"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"52"),(0,t.Uk)("\naverageTemp"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"60.8"),(0,t.Uk)("\n")])])],-1),A=(0,t.Wm)("h3",{id:"创建和初始化数组",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建和初始化数组","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建和初始化数组")],-1),C=(0,t.Wm)("p",null,"创建和初始化数组有两种方式：构造函数和字面量，使用构造函数创建和初始化数组像下面这样：",-1),B=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" arr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("           "),(0,t.Wm)("span",{class:"token comment"},"// 创建一个空数组"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" arr1 "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 创建一个长度为7的数组"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" arr2 "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// 创建一个数组，其元素为1， 2， 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// []"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("               "),(0,t.Wm)("span",{class:"token comment"},"// [empty*7]"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("               "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3]"),(0,t.Uk)("\n")])])],-1),E=(0,t.Wm)("p",null,[(0,t.Uk)("除了使用"),(0,t.Wm)("code",null,"new"),(0,t.Uk)("调用构造函数的方式以外，我们使用最常见的是字面量：")],-1),q=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" arr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("           "),(0,t.Wm)("span",{class:"token comment"},"// 创建一个空数组"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" arr2 "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// 创建一个数组，其元素为1， 2， 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// []"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3]"),(0,t.Uk)("\n")])])],-1),L=(0,t.Wm)("h4",{id:"访问元素和迭代数组",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#访问元素和迭代数组","aria-hidden":"true"},"#"),(0,t.Uk)(" 访问元素和迭代数组")],-1),T=(0,t.Wm)("div",{class:"custom-container tip"},[(0,t.Wm)("p",{class:"custom-container-title"},"TIP"),(0,t.Wm)("p",null,"要访问数组中特定位置的元素，可以用中括号传递数值位置，进而得到想知道的值或赋新的值。")],-1),N=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" arr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" arr"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 输出"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 1"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 4"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 5"),(0,t.Uk)("\n")])])],-1),O=(0,t.Wm)("h3",{id:"添加元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#添加元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 添加元素")],-1),F=(0,t.Wm)("p",null,"在数组中添加和删除元素有时候很容易，有时候也很棘手，这取决于具体的情况。",-1),z=(0,t.Wm)("h4",{id:"在数组末尾添加元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在数组末尾添加元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在数组末尾添加元素")],-1),P=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"),(0,t.Uk)("\n")])])],-1),D=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：在"),(0,t.Wm)("code",null,"JavaScript"),(0,t.Uk)("中数组是一个可以修改的对象，如果添加元素，数组的长度就会动态增长，即：添加之前"),(0,t.Wm)("code",null,"numbers.length"),(0,t.Uk)("值为9，添加之后"),(0,t.Wm)("code",null,"numbers.length"),(0,t.Uk)("值为10。")],-1),M=(0,t.Wm)("p",null,[(0,t.Uk)("如果只是在数组的末尾添加元素，那么数组已经提供给了我们一个简便的方法："),(0,t.Wm)("code",null,"push()"),(0,t.Uk)("方法：")],-1),V=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"),(0,t.Uk)("\n")])])],-1),$=(0,t.Wm)("h4",{id:"在数组开头添加元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在数组开头添加元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在数组开头添加元素")],-1),I=(0,t.Wm)("p",null,"不同于我们直接在数组的末尾添加一个元素那样简单，如果要在数组的开头添加一个元素，需要我们依次把数组中的每一个元素往后移动一位，最后把待添加的元素放置到最前面。",-1),H=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prototype"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function-variable function"},"insertFirstPosition"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" value\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insertFirstPosition"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [0, 1, 2, 3]"),(0,t.Uk)("\n")])])],-1),J=(0,t.Wm)("p",null,[(0,t.Uk)("对于数组而言，在数组的开头添加元素是一个非常常见的场景，因此数组给我们提供了一个"),(0,t.Wm)("code",null,"unshift()"),(0,t.Uk)("方法：")],-1),K=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"unshift"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [0, 1, 2, 3]"),(0,t.Uk)("\n")])])],-1),Q=(0,t.Wm)("h3",{id:"删除元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#删除元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 删除元素")],-1),G=(0,t.Wm)("h4",{id:"从数组末尾删除元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#从数组末尾删除元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 从数组末尾删除元素")],-1),R=(0,t.Wm)("div",{class:"custom-container tip"},[(0,t.Wm)("p",{class:"custom-container-title"},"TIP"),(0,t.Wm)("p",null,[(0,t.Uk)("要删除数组末尾的元素，可以使用"),(0,t.Wm)("code",null,"pop()"),(0,t.Uk)("方法，而通过"),(0,t.Wm)("code",null,"push()"),(0,t.Uk)("方法和"),(0,t.Wm)("code",null,"pop()"),(0,t.Uk)("方法，就能用数组来模拟栈结构。")])],-1),Y=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4]"),(0,t.Uk)("\n")])])],-1),X=(0,t.Wm)("h4",{id:"从数组开头删除元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#从数组开头删除元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 从数组开头删除元素")],-1),Z=(0,t.Wm)("p",null,"如果要从数组开头删除元素，其逻辑和在数组开头添加元素相反，需要把每一个元素向前挪动一位：",-1),_=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" numbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  numbers"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" numbers"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [2, 3, 4, 5, undefined]"),(0,t.Uk)("\n")])])],-1),nn=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：虽然我们把每一位往前移动了以为，但数组的长度依然为5，其中最后一个元素的值为"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，且最后一个"),(0,t.Wm)("code",null," numbers[i + 1]"),(0,t.Uk)("已经超出了数组的最大长度，在其他语言中这种做法会抛出错误。"),(0,t.Wm)("br"),(0,t.Uk)(" 为了处理这个问题，我们需要像前面提到的往数组开头添加元素一样，定义一个方法：")],-1),sn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prototype"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function-variable function"},"reIndex"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" newArray "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      newArray"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" newArray\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prototype"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function-variable function"},"removeFirstPosition"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"reIndex"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeFirstPosition"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [2, 3, 4, 5]"),(0,t.Uk)("\n")])])],-1),an=(0,t.Wm)("div",{class:"custom-container tip"},[(0,t.Wm)("p",{class:"custom-container-title"},"TIP"),(0,t.Wm)("p",null,[(0,t.Wm)("code",null,"shift()"),(0,t.Uk)("方法和"),(0,t.Wm)("code",null,"unshift()"),(0,t.Uk)("方法可以让数组模拟基本的队列数据结构。")])],-1),tn=(0,t.Wm)("p",null,[(0,t.Uk)("注意：上面的代码仅仅只是起到了在数组开头删除元素的示范作用，要真正运用到实际生产中，可以使用数组提供的"),(0,t.Wm)("code",null,"shift()"),(0,t.Uk)("方法：")],-1),on=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"shift"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [2, 3, 4, 5]"),(0,t.Uk)("\n")])])],-1),en=(0,t.Wm)("h3",{id:"在任意位置添加和删除元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在任意位置添加和删除元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在任意位置添加和删除元素")],-1),cn=(0,t.Wm)("div",{class:"custom-container tip"},[(0,t.Wm)("p",{class:"custom-container-title"},"TIP"),(0,t.Wm)("p",null,[(0,t.Uk)("使用"),(0,t.Wm)("code",null,"splice()"),(0,t.Uk)("方法可以让我们在数组中的任意位置删除或添加元素，其参数为：")]),(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,"第一个参数：表示想要删除或插入的元素的索引。"),(0,t.Wm)("li",null,"第二个参数：表示删除元素的格式。"),(0,t.Wm)("li",null,"第三个参数：表示添加到数组中的值。")])],-1),kn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"splice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 表示：在索引为0处，删除一个元素"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 结果：[2, 3, 4, 5, 6, 7, 8, 9, 10]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"splice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 表示：在索引为3处，删除两个元素"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 结果：[2, 3, 4, 7, 8, 9, 10]"),(0,t.Uk)("\nnumbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"splice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// 表示：在索引为5处，添加0和1这两个元素"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 结果：[2, 3, 4, 7, 8, 0，1，9, 10]"),(0,t.Uk)("\n")])])],-1),pn=(0,t.Wm)("h3",{id:"二维和多维数组",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#二维和多维数组","aria-hidden":"true"},"#"),(0,t.Uk)(" 二维和多维数组")],-1),ln=(0,t.Wm)("p",null,[(0,t.Wm)("code",null,"JavaScript"),(0,t.Uk)("只支持一维数组，并不支持矩阵，但我们可以在数组中嵌套数组，来实现矩阵或任一多维数组。")],-1),un=(0,t.Wm)("h4",{id:"二维数组",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#二维数组","aria-hidden":"true"},"#"),(0,t.Uk)(" 二维数组")],-1),mn=(0,t.Wm)("p",null,"一个二维数组的案例：",-1),Wn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"13"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"14"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"15"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"21"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"22"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"23"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"24"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"25"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n")])])],-1),rn=(0,t.Wm)("p",null,[(0,t.Uk)("二维数组可以使用"),(0,t.Wm)("code",null,"for"),(0,t.Uk)("循环嵌套来输出：")],-1),Un=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" numbers "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"13"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"14"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"15"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"21"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"22"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"23"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"24"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"25"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" numbers"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" numbers"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" j"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("numbers"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),dn=(0,t.Wm)("h3",{id:"javascript的数组方法参考",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#javascript的数组方法参考","aria-hidden":"true"},"#"),(0,t.Uk)(" JavaScript的数组方法参考")],-1),hn=(0,t.Wm)("p",null,[(0,t.Uk)("以下是在"),(0,t.Wm)("code",null,"ES5"),(0,t.Uk)("就支持数组核心方法：")],-1),yn=(0,t.Wm)("table",null,[(0,t.Wm)("thead",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("th",null,"方法"),(0,t.Wm)("th",null,"描述")])]),(0,t.Wm)("tbody",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"concat"),(0,t.Wm)("td",null,"连接2个或者更多数组，并返回结果")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"every"),(0,t.Wm)("td",null,[(0,t.Uk)("对数组中的每一个元素运行给定的函数，如果该函数对每一个元素都返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，则返回"),(0,t.Wm)("code",null,"true")])]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"filter"),(0,t.Wm)("td",null,[(0,t.Uk)("对数组中的每一个元素运行给定的函数，返回该函数会返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("的元素组成的数组")])]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"forEach"),(0,t.Wm)("td",null,"对数组中的每一个元素运行给定的函数")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"join"),(0,t.Wm)("td",null,"将所有的数组元素以指定的字符链接成一个字符串")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"indexOf"),(0,t.Wm)("td",null,"返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"lastIndexOf"),(0,t.Wm)("td",null,"从数组末尾开始搜索，并返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"map"),(0,t.Wm)("td",null,"对数组中的每一个元素运行给定的函数，返回每次函数调用的结果组成的数组")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"reverse"),(0,t.Wm)("td",null,"颠倒数组中元素的顺序")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"slice"),(0,t.Wm)("td",null,"传入索引值，将数组里对应索引范围内的元素作为新数组返回")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"some"),(0,t.Wm)("td",null,[(0,t.Uk)("对数组中的每个元素运行给定的函数，如果任一元素返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，则返回"),(0,t.Wm)("code",null,"true")])]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"sort"),(0,t.Wm)("td",null,[(0,t.Uk)("按照元素的"),(0,t.Wm)("code",null,"ASCII"),(0,t.Uk)("值进行排序")])]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"reduce"),(0,t.Wm)("td",null,"返回数组中所以元素值的合计")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"toString"),(0,t.Wm)("td",null,"将数组作为字符串返回")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"valueOf"),(0,t.Wm)("td",null,[(0,t.Uk)("和"),(0,t.Wm)("code",null,"toString"),(0,t.Uk)("类似，将数组作为字符串返回")])])])],-1),fn=(0,t.Wm)("p",null,[(0,t.Uk)("以下是"),(0,t.Wm)("code",null,"ES6"),(0,t.Uk)("新增的数组方法：")],-1),wn=(0,t.Wm)("table",null,[(0,t.Wm)("thead",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("th",null,"方法"),(0,t.Wm)("th",null,"描述")])]),(0,t.Wm)("tbody",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"@@iterator"),(0,t.Wm)("td",null,"返回一个包含数组键值对的迭代器对象，可以通过同步调用的方式得到数组元素的键值对")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"copyWhthin"),(0,t.Wm)("td",null,"复制数组中的一系列元素到同一数组指定的起始位置")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"entries"),(0,t.Wm)("td",null,[(0,t.Uk)("返回包含数组所有键值对的"),(0,t.Wm)("code",null,"@@iterator")])]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"find"),(0,t.Wm)("td",null,"根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"findIndex"),(0,t.Wm)("td",null,"根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素的索引")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"fill"),(0,t.Wm)("td",null,"用静态值填充数组")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"from"),(0,t.Wm)("td",null,"将一个类数组转换为一个真正的数组")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"of"),(0,t.Wm)("td",null,"根据传入的参数创建一个新数组")]),(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"values"),(0,t.Wm)("td",null,[(0,t.Uk)("返回包含数组中所以值的"),(0,t.Wm)("code",null,"@@iterator")])])])],-1),gn=(0,t.Wm)("p",null,[(0,t.Uk)("以下是"),(0,t.Wm)("code",null,"ES7"),(0,t.Uk)("新增的数组方法：")],-1),bn=(0,t.Wm)("table",null,[(0,t.Wm)("thead",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("th",null,"方法"),(0,t.Wm)("th",null,"描述")])]),(0,t.Wm)("tbody",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"includes"),(0,t.Wm)("td",null,[(0,t.Uk)("如果数组中存在某个元素，则返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，否则返回"),(0,t.Wm)("code",null,"false")])])])],-1),vn=(0,t.Wm)("h2",{id:"栈",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#栈","aria-hidden":"true"},"#"),(0,t.Uk)(" 栈")],-1),xn=(0,t.Wm)("p",null,[(0,t.Uk)("栈是一种遵从后进先出("),(0,t.Wm)("code",null,"LIFO"),(0,t.Uk)(")原则的邮箱有序集合，新添加或待删除的元素都保存在栈的同一端，称之为栈顶，另一端叫栈底。")],-1),jn=(0,t.Wm)("h3",{id:"创建一个基于数组的栈结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建一个基于数组的栈结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建一个基于数组的栈结构")],-1),Sn=(0,t.Wm)("p",null,[(0,t.Uk)("在前面我们已经发现，数组因为有了"),(0,t.Wm)("code",null,"push()"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"pop()"),(0,t.Uk)("方法，非常适合用来表示栈结构，因此我们将创建一个基于数组的类来表示栈：")],-1),An=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Cn=(0,t.Wm)("p",null,"接下来我们需要为栈声明一些方法：",-1),Bn=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"push()"),(0,t.Uk)("：在栈顶添加一个或者多个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"pop()"),(0,t.Uk)("：移除栈顶的第一个元素，同时返回被移除的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"peek()"),(0,t.Uk)("：返回栈顶的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("：判断栈是否为空，是则返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，否则返回"),(0,t.Wm)("code",null,"false")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("：移除栈中的所有元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：返回栈中元素的个数。")])],-1),En=(0,t.Wm)("p",null,"在梳理完以上方法后，我们需要撰写代码来完善它：",-1),qn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("elememt"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"peek"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("size "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("size "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ln=(0,t.Wm)("h4",{id:"使用stack类",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用stack类","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用Stack类")],-1),Tn=(0,t.Wm)("p",null,[(0,t.Uk)("在完善完"),(0,t.Wm)("code",null,"Stack"),(0,t.Uk)("类以后，我们需要写一点代码来测试一下：")],-1),Nn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"peek"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// 4"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\n")])])],-1),On=(0,t.Wm)("h3",{id:"创建一个基于对象的栈结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建一个基于对象的栈结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建一个基于对象的栈结构")],-1),Fn=(0,t.Wm)("p",null,[(0,t.Uk)("创建一个"),(0,t.Wm)("code",null,"Stack"),(0,t.Uk)("类最简单的方式就是使用一个数组来存储其元素，但在处理大量数据的时候，我们需要评估如何操作数据是最高效的，在使用数组的时候，大部分方法的时间复杂度为"),(0,t.Wm)("code",null,"O(n)"),(0,t.Uk)("，另外数组是元素的一个有序集合，为了保证元素排列有序，它会占用更多的内存空间。"),(0,t.Wm)("br")],-1),zn=(0,t.Wm)("p",null,"因此，接下来我们需要使用基于对象来创建一个栈结构：",-1),Pn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Dn=(0,t.Wm)("p",null,[(0,t.Uk)("与基于数组的栈结构拥有相同的方法，唯一区别是多了一个"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("方法：")],-1),Mn=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"push()"),(0,t.Uk)("：在栈顶添加一个或者多个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"pop()"),(0,t.Uk)("：移除栈顶的第一个元素，同时返回被移除的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"peek()"),(0,t.Uk)("：返回栈顶的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("：判断栈是否为空，是则返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，否则返回"),(0,t.Wm)("code",null,"false")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("：移除栈中的所有元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：返回栈中元素的个数。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("：将栈结构转换为字符串。")])],-1),Vn=(0,t.Wm)("p",null,"现在我们需要使用代码来完善：",-1),$n=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" result\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"peek"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" str "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token string"},"'0'"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      str "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("str"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},","),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" str\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),In=(0,t.Wm)("p",null,"代码分析：",-1),Hn=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"push()"),(0,t.Uk)("：我们知道"),(0,t.Wm)("code",null,"JavaScript"),(0,t.Uk)("对象是键值对的集合，当我们使用如下例子后，它的结果如下：")])],-1),Jn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token comment"},"// 此时的stack相当于"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Kn=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"pop()"),(0,t.Uk)("：首选我们需要判断当前对象的长度"),(0,t.Wm)("code",null,"count"),(0,t.Uk)("是否为0，如果为0则直接返回"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，如果不为0，我们需要把"),(0,t.Wm)("code",null,"count"),(0,t.Uk)("减去1得到栈顶元素所属的键，随后使用"),(0,t.Wm)("code",null,"delete"),(0,t.Uk)("删除这个对象的属性。")])],-1),Qn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token comment"},"// 此时的stack相当于"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 此时count--后等于1，得到栈顶元素的键和其键对应的值"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token comment"},"// 随后删除这个键，返回result"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Uk)("\n")])])],-1),Gn=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("：我们在数组版本的"),(0,t.Wm)("code",null,"Stack"),(0,t.Uk)("中并不需要关心"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("方法的实现，因为数组已经有"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("方法了，但对于对象版本的"),(0,t.Wm)("code",null,"Stack"),(0,t.Uk)("，我们需要自己写一个"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("方法。其实现步骤第一步先拿到对象键为0的值，随后通过"),(0,t.Wm)("code",null,"count"),(0,t.Uk)("的长度来从1开始遍历对象，并进行字符串拼接。")])],-1),Rn=(0,t.Wm)("h4",{id:"使用stack类-1",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用stack类-1","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用Stack类")],-1),Yn=(0,t.Wm)("p",null,[(0,t.Uk)("同样的，我们在撰写完这个版本"),(0,t.Wm)("code",null,"Stack"),(0,t.Uk)("类以后，需要写一点代码测试一下：")],-1),Xn=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"peek"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// 5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 1,3"),(0,t.Uk)("\nstack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 0"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\n")])])],-1),Zn=(0,t.Wm)("h3",{id:"用栈解决实际问题",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#用栈解决实际问题","aria-hidden":"true"},"#"),(0,t.Uk)(" 用栈解决实际问题")],-1),_n=(0,t.Wm)("p",null,"栈的实际应用非常广泛，在回溯问题中，它可以用来存储访问过的任务或路径、撤销等操作。",-1),ns=(0,t.Wm)("h4",{id:"十进制到二进制",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#十进制到二进制","aria-hidden":"true"},"#"),(0,t.Uk)(" 十进制到二进制")],-1),ss=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"技巧"),(0,t.Uk)("：要把十进制转换成二进制，我们可以将该十进制除以2并对商取整，直到结果为0。"),(0,t.Wm)("br")],-1),as=(0,t.Wm)("p",null,[(0,t.Uk)("使用"),(0,t.Wm)("code",null,"JavaScript"),(0,t.Uk)("对象版的"),(0,t.Wm)("code",null,"Stack"),(0,t.Uk)("：")],-1),ts=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"decimalToBinary"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"decNumber"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" number "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" decNumber\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" rem \n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" binaryString "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    rem "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" Math"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"floor"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},"%"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("rem"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    number "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" Math"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"floor"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},"/"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    binaryString "),(0,t.Wm)("span",{class:"token operator"},"+="),(0,t.Uk)(" stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" binaryString\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"decimalToBinary"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"233"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// 11101001"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"decimalToBinary"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("    "),(0,t.Wm)("span",{class:"token comment"},"// 1010"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"decimalToBinary"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1000"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// 1111101000"),(0,t.Uk)("\n")])])],-1),os=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：当我们将十进制的"),(0,t.Wm)("code",null,"10"),(0,t.Uk)("转换为二进制时，步骤如下：")],-1),es=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"rem = Math.floor(10 % 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"0"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("随后把"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("的结果放置在栈中，此时如果使用数组来表示栈的话，结果为"),(0,t.Wm)("code",null,"[0]"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("然后"),(0,t.Wm)("code",null,"number = Math.floor(10 / 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"number"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"5"),(0,t.Uk)("，第一轮循环完毕。")]),(0,t.Wm)("li",null,[(0,t.Uk)("第二轮循环开始，"),(0,t.Wm)("code",null,"rem = Math.floor(5 % 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"1"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("随后把"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("的结果放置在栈中，此时如果使用数组来表示栈的话，结果为"),(0,t.Wm)("code",null,"[0, 1]"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("然后"),(0,t.Wm)("code",null,"number = Math.floor(5 / 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"number"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"2"),(0,t.Uk)("，第二轮循环完毕。")]),(0,t.Wm)("li",null,[(0,t.Uk)("第三轮循环开始，"),(0,t.Wm)("code",null,"rem = Math.floor(2 % 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"0"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("随后把"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("的结果放置在栈中，此时如果使用数组来表示栈的话，结果为"),(0,t.Wm)("code",null,"[0, 1, 0]"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("然后"),(0,t.Wm)("code",null,"number = Math.floor(2 / 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"number"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"1"),(0,t.Uk)("，第三轮循环完毕。")]),(0,t.Wm)("li",null,[(0,t.Uk)("第四轮循环开始，"),(0,t.Wm)("code",null,"rem = Math.floor(1 % 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"1"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("随后把"),(0,t.Wm)("code",null,"rem"),(0,t.Uk)("的结果放置在栈中，此时如果使用数组来表示栈的话，结果为"),(0,t.Wm)("code",null,"[0, 1, 0, 1]"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("然后"),(0,t.Wm)("code",null,"number = Math.floor(1 / 2)"),(0,t.Uk)("，此时"),(0,t.Wm)("code",null,"number"),(0,t.Uk)("结果为"),(0,t.Wm)("code",null,"0"),(0,t.Uk)("，第四轮循环完毕。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"0 > 0"),(0,t.Uk)("，循环条件不满足，循环终止。此时栈结构数组表示为"),(0,t.Wm)("code",null,"[0, 1, 0, 1]"),(0,t.Uk)("。")])],-1),cs=(0,t.Wm)("p",null,[(0,t.Uk)("随后根据栈结构后进先出的原则，我们将栈结构拼接在一起，就得到了十进制"),(0,t.Wm)("code",null,"10"),(0,t.Uk)("转换为二进制后的结果，即："),(0,t.Wm)("code",null,"1010"),(0,t.Uk)("。")],-1),ks=(0,t.Wm)("h4",{id:"通用进制转换算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#通用进制转换算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 通用进制转换算法")],-1),ps=(0,t.Wm)("p",null,[(0,t.Uk)("根据以上的思路，我们可以不仅可以把十进制转换为二进制，还可以把十进制转换成基数为"),(0,t.Wm)("code",null,"2~36"),(0,t.Uk)("的任意进制。")],-1),ls=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"baseConverter"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("decNumber"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" base")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" stack "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Stack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" digits "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" number "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" decNumber\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" rem\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" baseString "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("base "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" base "),(0,t.Wm)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"36"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    rem "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" Math"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"floor"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},"%"),(0,t.Uk)(" base"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("rem"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    number "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" Math"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"floor"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},"/"),(0,t.Uk)(" base"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    baseString "),(0,t.Wm)("span",{class:"token operator"},"+="),(0,t.Uk)(" digits"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("stack"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"pop"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" baseString\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"baseConverter"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"100"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// 1100100"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"baseConverter"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"100"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// 144"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"baseConverter"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"100"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"16"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 64"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"baseConverter"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"100"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"32"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 34"),(0,t.Uk)("\n")])])],-1),us=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：在将十进制转换为二进制时，余数为0或1；在将十进制转换八进制时，余数为"),(0,t.Wm)("code",null,"0~7"),(0,t.Uk)("；在将十进制转换为十六进制时，余数为"),(0,t.Wm)("code",null,"0~9"),(0,t.Uk)("+ "),(0,t.Wm)("code",null,"A、B、C、D、E、F"),(0,t.Uk)("(分别对应10、11、12、13、14、15)。")],-1),ms=(0,t.Wm)("h2",{id:"队列和双端队列",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#队列和双端队列","aria-hidden":"true"},"#"),(0,t.Uk)(" 队列和双端队列")],-1),Ws=(0,t.Wm)("p",null,[(0,t.Uk)("队列是一种遵循先进先出("),(0,t.Wm)("code",null,"FIFO"),(0,t.Uk)(")原则的一组有序的项，队列在尾部添加新元素，并从顶部移除元素，而双端队列是一种将栈的原则和队列的原则混合在一起的数据结构。")],-1),is=(0,t.Wm)("h3",{id:"队列数据结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#队列数据结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 队列数据结构")],-1),rs=(0,t.Wm)("p",null,"首先我们需要使用类来表示一个队列：",-1),Us=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Queue"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ds=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们仿照栈数据结构，为了写出一个在获取元素时更高效的数据结构，我们使用一个对象来存储我们的元素，其中需要声明一个"),(0,t.Wm)("code",null,"count"),(0,t.Uk)("变量来控制队列的大小，声明一个"),(0,t.Wm)("code",null,"lowestCount"),(0,t.Uk)("变量来帮我们追踪第一个元素。")],-1),hs=(0,t.Wm)("p",null,"在撰写完队列的类以后，我们还需要为队列声明一下可调用的方法：",-1),ys=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"enqueue()"),(0,t.Uk)("：向队列的尾部添加元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"dequeue()"),(0,t.Uk)("：在队列的开头移除第一个元素，并返回被移除的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"peek()"),(0,t.Uk)("：返回队列的第一个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("：判断队列是否为空。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：返回队列包含元素的个数。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("：清空队列。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("：将队列转换成字符串格式。")])],-1),fs=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Queue"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"enqueue"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"dequeue"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" result\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"peek"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" objStr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      objStr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("objStr"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},","),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" objStr\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ws=(0,t.Wm)("p",null,"在撰写完队列的基本方法后，我们需要撰写一点代码来测试我们的队列：",-1),gs=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" queue "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Queue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nqueue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"enqueue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nqueue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"enqueue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nqueue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"enqueue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// false"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// AAA,BBB,CCC"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"peek"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// AAA"),(0,t.Uk)("\nqueue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"dequeue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nqueue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\n")])])],-1),bs=(0,t.Wm)("h3",{id:"双端队列数据结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#双端队列数据结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 双端队列数据结构")],-1),vs=(0,t.Wm)("p",null,[(0,t.Uk)("双端队列是一种允许我们同时从前端和后端添加和移除元素的特殊队列，在计算机科学中，双端队列的一个常见应用是存储一系列撤销操作，每当用户在软件中进行了一个操作，该操作被存在一个双端队列中，当用户点击撤销按钮时，该操作会被从双端队列中弹出，表示它被从后面移除了。在进行预先定义的一定数量的操作后，最新进行的操作会被从双端队列的前端移除。"),(0,t.Wm)("br")],-1),xs=(0,t.Wm)("p",null,[(0,t.Uk)("和之前一样，我们先声明一个"),(0,t.Wm)("code",null,"Deque"),(0,t.Uk)("类：")],-1),js=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Deque"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ss=(0,t.Wm)("p",null,[(0,t.Uk)("既然双端队列是一种特殊的队列，我们可以看到其构造函数中的部分代码和队列相同，同时也拥有一些相同的方法："),(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("、"),(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("、"),(0,t.Wm)("code",null,"size()"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("。除了这些相同的方法，双端队列还拥有一些特殊的方法方便我们去调用：")],-1),As=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"addFront()"),(0,t.Uk)("：在双端队列的前端添加新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"addBack()"),(0,t.Uk)("：在双端队列的后端添加新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"removeFront()"),(0,t.Uk)("：在双端队列的前端移除新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"removeBack()"),(0,t.Uk)("：在双端队列的后端移除新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"peekFront()"),(0,t.Uk)("：返回双端队列前端的第一个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"peekBack()"),(0,t.Uk)("：返回双端队列后端的第一个元素。")])],-1),Cs=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Deque"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" strObj "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      strObj "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("strObj"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},","),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" strObj\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"addFront"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token comment"},"// 1.添加之前没有数据"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token comment"},"// 2.lowestCount > 0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token comment"},"// 3.lowestCount = 0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"addBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"addBack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"removeFront"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" result\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"removeBack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" result\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"peekFront"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("lowestCount"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"peekBack"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Bs=(0,t.Wm)("p",null,"将一个元素添加到双端队列的前端，存在以下三种场景：",-1),Es=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("双端队里为空：这个时候只需要执行"),(0,t.Wm)("code",null,"addBack()"),(0,t.Uk)("方法，在双端队列的后端添加元素即可。")]),(0,t.Wm)("li",null,[(0,t.Uk)("已经从双端队列前端移除了元素：这种情况只需要把新元素放置到在"),(0,t.Wm)("code",null,"lowestCount-1"),(0,t.Uk)("的位置即可。")]),(0,t.Wm)("li",null,"双端队列前端未移除任何元素：我们可以设置一个负值的键，同时更新双端队列的长度。")],-1),qs=(0,t.Wm)("p",null,"在撰写完双端队里的实现代码后，我们需要写一点代码来测试:",-1),Ls=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" deque "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Deque"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\ndeque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"addBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ndeque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"addBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// AAA,BBB"),(0,t.Uk)("\ndeque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"addBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// AAA,BBB,CCC"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\ndeque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeFront"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(" \nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// BBB,CCC"),(0,t.Uk)("\ndeque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// BBB"),(0,t.Uk)("\ndeque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"addFront"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'DDD'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"peekFront"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token comment"},"// DDD"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"peekBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// BBB"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// DDD,BBB"),(0,t.Uk)("\n")])])],-1),Ts=(0,t.Wm)("h3",{id:"使用队列和双端队列解决实际问题",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用队列和双端队列解决实际问题","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用队列和双端队列解决实际问题")],-1),Ns=(0,t.Wm)("p",null,"由于队列经常被应用于计算机领域和我们的现实生活中，就出现了一些队列的修改版本，其中之一就叫做循环队列。在本章节，将讲述使用队列来模拟击鼓传花游戏和使用双端队列来检查一个短语是否为回文。",-1),Os=(0,t.Wm)("h4",{id:"击鼓传花",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#击鼓传花","aria-hidden":"true"},"#"),(0,t.Uk)(" 击鼓传花")],-1),Fs=(0,t.Wm)("p",null,"游戏规则：需要游戏参与者围成一个圈，并按固定的顺序传递给旁边的人，某一时刻传花结束，此时花在谁手里，谁就退出圆圈，结束游戏，重复这个过程，直到只剩最后一个孩子即为胜利者。",-1),zs=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"hotPotato"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("elementList"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" num")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" queue "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Queue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" elimitatedList "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" elementList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"enqueue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("elementList"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" num"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"enqueue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"dequeue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    elimitatedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"dequeue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    elimitated"),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(" elimitatedList"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    winner"),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(" queue"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"dequeue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ps=(0,t.Wm)("p",null,"代码分析：",-1),Ds=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,[(0,t.Uk)("首先我们使用到了最开始我们创建的队列"),(0,t.Wm)("code",null,"Queue"),(0,t.Uk)("类。")]),(0,t.Wm)("li",null,"随后我们会得到一份游戏参与者的名单和给定的数字。"),(0,t.Wm)("li",null,"开始迭代队列，从队列开头移除一个，并同时往队里的末尾添加，来模拟循环游戏的概念。"),(0,t.Wm)("li",null,"当传递次数等于我们给定的数字时，拿着花的那个人就被淘汰，移除队列并同时添加到淘汰数组中。"),(0,t.Wm)("li",null,"一直进行以上的操作，直到队列中只有一个人时，结束循环。")],-1),Ms=(0,t.Wm)("p",null,"在撰写完以上的代码后，我们实际写一个例子来验证：",-1),Vs=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" names "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'DDD'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'EEE'"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"hotPotato"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("names"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("elimitated"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("elimitated"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},"在击鼓传花游戏中被淘汰。"),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token string"},"胜利者："),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("winner"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// CCC在击鼓传花游戏中被淘汰。"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// BBB在击鼓传花游戏中被淘汰。"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// EEE在击鼓传花游戏中被淘汰。"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// DDD在击鼓传花游戏中被淘汰。"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 胜利者：AAA"),(0,t.Uk)("\n")])])],-1),$s=(0,t.Wm)("h4",{id:"回文检查器",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#回文检查器","aria-hidden":"true"},"#"),(0,t.Uk)(" 回文检查器")],-1),Is=(0,t.Wm)("p",null,[(0,t.Uk)("问：什么是回文？"),(0,t.Wm)("br"),(0,t.Uk)(" 答：回文是正反都能读通的单词、词组、数或一系列字符的序列，例如"),(0,t.Wm)("code",null,"madam"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"racecar"),(0,t.Uk)("。"),(0,t.Wm)("br")],-1),Hs=(0,t.Wm)("p",null,"有不同的算法可以检查一个词组或字符串是否为回文，最简单的方式是将字符串反向排列并检查它和原始字符串是否相同，如果相同，则它就是一个回文，在这个案例中我们使用双端队列来实现：",-1),Js=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"palindromeChecker"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"str"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("str "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"||"),(0,t.Uk)(" str "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"||"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("str "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" str"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" deque "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Deque"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" lowerStr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" str"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toLowerCase"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"split"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"join"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" isEqual "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" firstChar"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" lastChar\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" lowerStr"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"addBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("lowerStr"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"charAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" isEqual"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    firstChar "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeFront"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    lastChar "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" deque"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeBack"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("firstChar "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(" lastChar"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      isEqual "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" isEqual\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ks=(0,t.Wm)("p",null,"代码分析：",-1),Qs=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,[(0,t.Uk)("在我们检查是否回文之前，需要先对传入的字符串做一些校验，如果传递的是"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("或者空字符串直接返回"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("随后我们实例化了一个我们在之前写好的双端队列"),(0,t.Wm)("code",null,"Deque"),(0,t.Uk)("类。")]),(0,t.Wm)("li",null,"为了避免字符串大小写的问题，我们统一把传入的字符串转换成小写的形式。"),(0,t.Wm)("li",null,"遍历字符串，并把字符串中的每一个字符依次添加到双端队列的末尾。"),(0,t.Wm)("li",null,"循环在双端队列的前端和后端移除一个元素，并比较这两个元素，如果相等则进行下一次循环，如果不相等则结束循环。")],-1),Gs=(0,t.Wm)("p",null,"在撰写问回文检查器代码后，我们写一点代码来测试一下：",-1),Rs=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Uk)("console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"palindromeChecker"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'a'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"palindromeChecker"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'aa'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"palindromeChecker"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'kayak'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"palindromeChecker"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'level'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"palindromeChecker"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'ABBC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// false"),(0,t.Uk)("\n")])])],-1),Ys=(0,t.Wm)("h2",{id:"链表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),(0,t.Uk)(" 链表")],-1),Xs=(0,t.Wm)("p",null,[(0,t.Uk)("问：为什么在有了数组这种数据结构以后，还需要引入链表？"),(0,t.Wm)("br"),(0,t.Uk)(" 答：因为在大多数语言中数组的大小是固定的，在数组的起点或者中间插入或移除项的成本很高。")],-1),Zs=(0,t.Wm)("h3",{id:"链表数据结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#链表数据结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 链表数据结构")],-1),_s=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"特点："),(0,t.Uk)(" 链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个与元素由一个存储自身的节点和一个指向下一个元素的引用组成，所以链表的一个好处在于：添加和移除元素的时候不需要移动其它元素。然而，链表需要使用指针，因此不像在数组中可以直接访问任何位置的任何元素，链表需要我们从起点或者头开始迭代链表直到找到所需的元素。"),(0,t.Wm)("br")],-1),na=(0,t.Wm)("p",null,[(0,t.Uk)("在理解了什么是链表以后，我们开始实现"),(0,t.Wm)("code",null,"LinkedList"),(0,t.Uk)("类：")],-1),sa=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"LinkedList"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("equalsFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" defaultEquals")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("equalsFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" equalsFn\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),aa=(0,t.Wm)("p",null,"代码分析：",-1),ta=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"count"),(0,t.Uk)("：我们使用"),(0,t.Wm)("code",null,"count"),(0,t.Uk)("来记录链表中的总数。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"head"),(0,t.Uk)("：由于链表数据结构是动态的，因此我们需要将第一个元素的引用保存下来。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"equalsFn()"),(0,t.Uk)("：如果我们要在链表中遍历，判断当前节点是否是我们需要的节点，而链表中的节点不仅仅是值类型还可能是引用类型，因此需要我们提供一个比较方法，当没有这个方法的时候我们则使用默认的"),(0,t.Wm)("code",null,"defaultEquals()"),(0,t.Uk)("方法，因为它可能会在其它数据结构中也使用到，因此我们把它提取到"),(0,t.Wm)("code",null,"utils.js"),(0,t.Uk)("文件中：")])],-1),oa=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token comment"},"// utils.js"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"defaultEquals"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" b")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(" b\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ea=(0,t.Wm)("p",null,[(0,t.Uk)("要表示链表中的节点，我们需要另外一个助手"),(0,t.Wm)("code",null,"Node"),(0,t.Uk)("类，它表示我们想要添加到链表中的项，它包含：")],-1),ca=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"element"),(0,t.Uk)("：表示要加入链表元素的值。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"next"),(0,t.Uk)("：指向链表下一个元素的指针。")])],-1),ka=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),pa=(0,t.Wm)("p",null,[(0,t.Uk)("在搭建好"),(0,t.Wm)("code",null,"LinkedList"),(0,t.Uk)("类的骨架后，我们需要实现一些方法，如下：")],-1),la=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"push(element)"),(0,t.Uk)("：向链表尾部添加一个新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"insert(element,position)"),(0,t.Uk)("：在链表指定位置插入一个新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"getElementAt(index)"),(0,t.Uk)("：返回链表中特定位置的元素，如果没有则返回"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"remove(element)"),(0,t.Uk)("：从链表中移除一个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"indexOf(element)"),(0,t.Uk)("：返回元素在链表中的索引，如果没有则返回"),(0,t.Wm)("code",null,"-1"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"removeAt(position)"),(0,t.Uk)("：从链表指定位置移除一个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("：如果链表中不包含任何元素，则返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，否则返回"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：返回链表包含的元素个数。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"getHead()"),(0,t.Uk)("：返回链表的第一个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("：返回表示整个链表的字符串。")])],-1),ua=(0,t.Wm)("h4",{id:"向链表尾部添加元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#向链表尾部添加元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 向链表尾部添加元素")],-1),ma=(0,t.Wm)("p",null,"向链表尾部添加元素时，有两种可能性：链表为空，添加的就是第一个元素；链表不为空，向其追加元素。",-1),Wa=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ia=(0,t.Wm)("p",null,"代码分析：",-1),ra=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("当"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("时，代表整个链表为空，因此我们要插入的元素就是第一个元素，直接赋值给"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("即可。")]),(0,t.Wm)("li",null,[(0,t.Uk)("当"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("不为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("时，代表链表有数据，即我们需要迭代链表一直到最后一个元素("),(0,t.Wm)("code",null,"current.next=null"),(0,t.Uk)(")，此时直接把要插入的元素赋值给"),(0,t.Wm)("code",null,"current.next"),(0,t.Uk)("即可。")]),(0,t.Wm)("li",null,[(0,t.Uk)("最后需要更新"),(0,t.Wm)("code",null,"count"),(0,t.Uk)("的数量。")])],-1),Ua=(0,t.Wm)("h4",{id:"迭代链表直到目标位置",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#迭代链表直到目标位置","aria-hidden":"true"},"#"),(0,t.Uk)(" 迭代链表直到目标位置")],-1),da=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"index"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" current\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ha=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：为了保证我们能够迭代链表直到找到一个合法的位置，因此我们需要对传入的"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("参数进行合法性验证，然后迭代整个链表直到我们需要的位置位置。")],-1),ya=(0,t.Wm)("h4",{id:"从链表中移除指定位置元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#从链表中移除指定位置元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 从链表中移除指定位置元素")],-1),fa=(0,t.Wm)("p",null,"从链表中移除元素由两种场景：第一种是移除第一个元素，第二种是移除第一个元素之外的其它元素。",-1),wa=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"index"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ga=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：和"),(0,t.Wm)("code",null,"getElementAt()"),(0,t.Uk)("方法相同的道理，我们需要对传入的"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("进行合法性校验，然后判断要移除的"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("是否为0，为0则表示移除第一个元素；不为0，则表示移除第一个元素之外其它元素，这个时候我们需要迭代整个列表找到目标位置之前的元素，我们可以借助已经实现的"),(0,t.Wm)("code",null,"getElementAt()"),(0,t.Uk)("方法来简化我们的代码。随后，只需要"),(0,t.Wm)("code",null,"previous.next = current.next"),(0,t.Uk)("跳过"),(0,t.Wm)("code",null,"current"),(0,t.Uk)("，进而达到移除的目的。")],-1),ba=(0,t.Wm)("h4",{id:"在任意位置插入元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在任意位置插入元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在任意位置插入元素")],-1),va=(0,t.Wm)("p",null,"在链表中插入一个元素，也存在两种情况：在第一个位置插入元素，在第一个位置之外的位置插入元素。",-1),xa=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" index")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current\n      previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ja=(0,t.Wm)("p",null,"代码分析：",-1),Sa=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("与"),(0,t.Wm)("code",null,"removeAt()"),(0,t.Uk)("方法类似，我们需要判断参数"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("是否合法，不合法则直接返回"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("与"),(0,t.Wm)("code",null,"removeAt()"),(0,t.Uk)("直接跳过"),(0,t.Wm)("code",null,"current"),(0,t.Uk)("不同的时，"),(0,t.Wm)("code",null,"insert"),(0,t.Uk)("时需要我们先将"),(0,t.Wm)("code",null,"previous"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"node"),(0,t.Uk)("链接起来，既："),(0,t.Wm)("code",null,"node.next = current"),(0,t.Uk)("，随后再将"),(0,t.Wm)("code",null,"previous"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"node"),(0,t.Uk)("链接起来，既："),(0,t.Wm)("code",null,"previous.next=node"),(0,t.Uk)("。")])],-1),Aa=(0,t.Wm)("h4",{id:"返回一个元素的位置",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#返回一个元素的位置","aria-hidden":"true"},"#"),(0,t.Uk)(" 返回一个元素的位置")],-1),Ca=(0,t.Wm)("p",null,[(0,t.Wm)("code",null,"indexOf()"),(0,t.Uk)("方法接受一个元素的值，如果我们在链表中找到了它，就返回元素的位置，否则返回"),(0,t.Wm)("code",null,"-1"),(0,t.Uk)("。")],-1),Ba=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"equalsFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" index\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ea=(0,t.Wm)("h4",{id:"从链表中移除元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#从链表中移除元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 从链表中移除元素")],-1),qa=(0,t.Wm)("p",null,[(0,t.Wm)("code",null,"remove()"),(0,t.Uk)("方法区别于"),(0,t.Wm)("code",null,"removeAt()"),(0,t.Uk)("方法，对于前者而言我们并不知道改在什么地方移除，因此需要遍历一次链表以得到具体的索引位置，而对于后者而言由于接受的参数就是"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("，所以比"),(0,t.Wm)("code",null,"remove()"),(0,t.Uk)("方法要简单一些，由于我们在上面已经实现了"),(0,t.Wm)("code",null,"indexOf()"),(0,t.Uk)("方法和"),(0,t.Wm)("code",null,"removeAt()"),(0,t.Uk)("方法，因此我们可以直接借用它们：")],-1),La=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ta=(0,t.Wm)("p",null,[(0,t.Uk)("注意：我们并不关心"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("是否为-1，因为在"),(0,t.Wm)("code",null,"removeAt()"),(0,t.Uk)("方法中已经检查了"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("参数的合法性，因此这里并不需要额外判断"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("等于-1的情况。")],-1),Na=(0,t.Wm)("h4",{id:"链表剩余方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#链表剩余方法","aria-hidden":"true"},"#"),(0,t.Uk)(" 链表剩余方法")],-1),Oa=(0,t.Wm)("p",null,[(0,t.Uk)("在实现以上那些方法后，我们还有"),(0,t.Wm)("code",null,"size()"),(0,t.Uk)("、"),(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("、"),(0,t.Wm)("code",null,"getHead()"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("方法未实现，他们的代码如下：")],-1),Fa=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"getHead"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" str "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    str "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("str"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},","),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n    current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" str\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),za=(0,t.Wm)("h4",{id:"使用链表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用链表","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用链表")],-1),Pa=(0,t.Wm)("p",null,"在完成所有的链表方法后，我们需要编写一段代码来测试我们的链表：",-1),Da=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" linkedList "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"LinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("          "),(0,t.Wm)("span",{class:"token comment"},"// 0 "),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getHead"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// 1"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("          "),(0,t.Wm)("span",{class:"token comment"},"// 4"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("               "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// -1"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("    "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,3,2,5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,3,5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,5"),(0,t.Uk)("\n")])])],-1),Ma=(0,t.Wm)("h3",{id:"双向链表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#双向链表","aria-hidden":"true"},"#"),(0,t.Uk)(" 双向链表")],-1),Va=(0,t.Wm)("p",null,[(0,t.Uk)("双向链表和普通链表的区别在于：在链表中，一个节点只有链向下一个节点的链接，而在双向链表中，链表是双向的，一个链向下一个元素，另一个链向前一个元素。"),(0,t.Wm)("br"),(0,t.Uk)(" 在了解了双向链表的概念后，我们可以实现如下代码：")],-1),$a=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"DoublyLinkedList"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"extends"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"LinkedList"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("equalsFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" defaultEquals")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"super"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("equalsFn"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"DoublyNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"extends"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" next"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" prev")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"super"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" next"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" prev\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(" \n")])])],-1),Ia=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们知道双向链表是一种特殊的链表，所以我们让其继承"),(0,t.Wm)("code",null,"LinkedList"),(0,t.Uk)("类，在"),(0,t.Wm)("code",null,"DoublyLinkedList"),(0,t.Uk)("双向链表的构造函数中，我们还需要定义一个变量"),(0,t.Wm)("code",null,"tail"),(0,t.Uk)("，用来表示指向双向链表的最后一个元素。同时，我们还扩展了"),(0,t.Wm)("code",null,"DoublyNode"),(0,t.Uk)("双线链表节点，它继承自"),(0,t.Wm)("code",null,"LinkedList"),(0,t.Uk)("链表的"),(0,t.Wm)("code",null,"Node"),(0,t.Uk)("节点，其还新增了一个指向上一个元素的指针"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("。")],-1),Ha=(0,t.Wm)("h4",{id:"在任意位置插入元素-1",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在任意位置插入元素-1","aria-hidden":"true"},"#"),(0,t.Uk)(" 在任意位置插入元素")],-1),Ja=(0,t.Wm)("p",null,[(0,t.Uk)("在双向链表中插入一个新元素跟普通(单向)链表非常相似，区别在于：普通(单向)链表只需要控制一个"),(0,t.Wm)("code",null,"next"),(0,t.Uk)("指针，而双向链表同时需要控制"),(0,t.Wm)("code",null,"next"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("两个指针。所以我们需要重写"),(0,t.Wm)("code",null,"insert()"),(0,t.Uk)("方法。")],-1),Ka=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" index")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"DoublyNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n        current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail\n      current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current\n      previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n      current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Qa=(0,t.Wm)("p",null,"代码分析：",-1),Ga=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("场景一：假设我们在双向链表的第一个位置插入一个新元素，如果此时双向链表为空"),(0,t.Wm)("code",null,"this.head === null"),(0,t.Uk)("，则我们只需要把"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"tail"),(0,t.Uk)("都指向这个新节点。如果不为空"),(0,t.Wm)("code",null,"this.head !== null"),(0,t.Uk)("，"),(0,t.Wm)("code",null,"current"),(0,t.Uk)("变量将是双向链表中第一个元素的引用。")]),(0,t.Wm)("li",null,[(0,t.Uk)("场景二：假设我们在双向链表的最后一个位置插入一个新元素，我们除了需要维护"),(0,t.Wm)("code",null,"current"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"node"),(0,t.Uk)("的两个指针"),(0,t.Wm)("code",null,"next"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("以外，我们还需要设置双向链表的最后一个元素"),(0,t.Wm)("code",null,"tail"),(0,t.Uk)("的指针。")]),(0,t.Wm)("li",null,"场景三：在双向链表的中间插入一个新元素，就像在普通(单向)链表中类似的做法，我们需要找到要插入位置的上一个元素：")],-1),Ra=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),Ya=(0,t.Wm)("p",null,[(0,t.Uk)("获取到以后，我们需要在"),(0,t.Wm)("code",null,"current"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"previous"),(0,t.Uk)("中间插入一个新元素，此时我们需要维护"),(0,t.Wm)("code",null,"current"),(0,t.Uk)("，"),(0,t.Wm)("code",null,"previous"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"node"),(0,t.Uk)("的两个指针"),(0,t.Wm)("code",null,"next"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("。")],-1),Xa=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"注意"),(0,t.Uk)("：如果我们在双向链表"),(0,t.Wm)("code",null,"insert()"),(0,t.Uk)("插入新元素的时候，我们可以判断当"),(0,t.Wm)("code",null,"index"),(0,t.Uk)("大于"),(0,t.Wm)("code",null,"length / 2"),(0,t.Uk)("的时候，可以从双向链表的尾部开始迭代，而不是从头开始迭代，这样可在一定程度上提升性能。")],-1),Za=(0,t.Wm)("h4",{id:"在任意位置移除元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在任意位置移除元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在任意位置移除元素")],-1),_a=(0,t.Wm)("p",null,[(0,t.Uk)("在双向链表中移除元素跟普通(单向)链表非常类似，唯一的区别就是：需要设置前一个元素"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("位置的指针。")],-1),nt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"index"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev\n      previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),st=(0,t.Wm)("p",null,"代码分析：",-1),at=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("场景一：假设我们移除双向链表的第一个元素，当双向链表只有一项的时候，我们只需要把最后一个元素指针"),(0,t.Wm)("code",null,"tail"),(0,t.Uk)("设置为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("即可，如果双向链表大于1个元素，只需要把新的"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("的"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("指针设置为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("场景二：假设我们移除双向链表的最后一个元素，只需要维护最后一个元素"),(0,t.Wm)("code",null,"tail"),(0,t.Uk)("的"),(0,t.Wm)("code",null,"next"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"prev"),(0,t.Uk)("指针。")]),(0,t.Wm)("li",null,[(0,t.Uk)("场景三：假设我们在双向链表中间移除元素，需要找到当前移除元素的上一个元素的位置，然后更新"),(0,t.Wm)("code",null,"previous.next"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"current.next.prev"),(0,t.Uk)("的引用，在双向链表中跳过它。")])],-1),tt=(0,t.Wm)("h4",{id:"在双向链表尾部添加新元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在双向链表尾部添加新元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在双向链表尾部添加新元素")],-1),ot=(0,t.Wm)("p",null,[(0,t.Uk)("在双向链表的尾部添加新元素同样和普通(单向)链表非常相似，却别任然是我们需要多维护一个"),(0,t.Wm)("code",null,"tail"),(0,t.Uk)("指针。")],-1),et=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"DoublyNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n    node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ct=(0,t.Wm)("h4",{id:"其它方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#其它方法","aria-hidden":"true"},"#"),(0,t.Uk)(" 其它方法")],-1),kt=(0,t.Wm)("p",null,"除了以上几种方法，我们还需要为双线链表重写一下几种方法：",-1),pt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"super"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"getTail"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"inverseToString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" str "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("tail"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    str "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("str"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},","),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n    current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prev\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" str\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),lt=(0,t.Wm)("h4",{id:"使用双向链表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用双向链表","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用双向链表")],-1),ut=(0,t.Wm)("p",null,"双向链表撰写完毕后，我们需要撰写一些代码来测试：",-1),mt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" linkedList "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"DoublyLinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("            "),(0,t.Wm)("span",{class:"token comment"},"// 0 "),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getHead"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 1"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("            "),(0,t.Wm)("span",{class:"token comment"},"// 4"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                 "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// -1"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,3,2,5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"inverseToString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 5,2,3,9,1"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getTail"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,3,5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"inverseToString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 5,3,9,1"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,5"),(0,t.Uk)("\n")])])],-1),Wt=(0,t.Wm)("h3",{id:"循环链表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#循环链表","aria-hidden":"true"},"#"),(0,t.Uk)(" 循环链表")],-1),it=(0,t.Wm)("p",null,[(0,t.Uk)("循环链表可以像普通(单向)链表一样只有单向引用，也可以像双向链表一样有双向引用。循环链表和普通(单向)链表的唯一区别在于：最后一个元素的指针不是"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("或者"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，而是指向第一个元素"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("。")],-1),rt=(0,t.Wm)("p",null,"在了解了循环链表的概念后，我们可以撰写如下代码：",-1),Ut=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"CircularLinkedList"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"extends"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"LinkedList"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("equalsFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" defaultEquals")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"super"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("equalsFn"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),dt=(0,t.Wm)("h4",{id:"在任意位置插入新元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在任意位置插入新元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在任意位置插入新元素")],-1),ht=(0,t.Wm)("p",null,"循环链表中插入新元素的逻辑和普通(单向)链表的逻辑是一样的，唯一的区别是我们需要维护最后有一个元素的指针，需要将它设置为指向第一个元素。",-1),yt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" index")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n        node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current\n        current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node \n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ft=(0,t.Wm)("p",null,"代码分析：",-1),wt=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("场景一：我们在循环链表中的第一个位置插入新元素，当循环链表为空时，我们只需要在普通(单向)链表的基础上维护最后一个元素的指针指向"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("即可；当循环链表不为空的时候，我们首先需要迭代获取到最后一个元素，然后把最后一个元素的指针指向我们新插入元素即可。")]),(0,t.Wm)("li",null,"场景二：在循环链表的中间插入新元素的逻辑和普通(单向)链表的逻辑是一直的，没有变动。")],-1),gt=(0,t.Wm)("h4",{id:"在任意位置移除元素-1",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在任意位置移除元素-1","aria-hidden":"true"},"#"),(0,t.Uk)(" 在任意位置移除元素")],-1),bt=(0,t.Wm)("p",null,"在循环链表的任意位置移除元素的逻辑和普通(单向)链表的逻辑也十分相似，不过我们任然需要修改一些我们的代码：",-1),vt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"index"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},">="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" removed "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n        current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n        current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n        current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" removed\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" previous "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n      current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n      previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" previous"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),xt=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：对于在循环链表任意位置移除元素，我们只需要考虑修改"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("的值即可：和"),(0,t.Wm)("code",null,"insert()"),(0,t.Uk)("方法有点类似的道理，我们需要迭代获取到循环链表的最后一个元素，然后开始调整"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("元素的，让他等于"),(0,t.Wm)("code",null,"this.head.next"),(0,t.Uk)("，随后需要把获取到的最后一个元素的指针指向"),(0,t.Wm)("code",null,"head"),(0,t.Uk)("。")],-1),jt=(0,t.Wm)("h4",{id:"在循环链表尾部添加元素",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#在循环链表尾部添加元素","aria-hidden":"true"},"#"),(0,t.Uk)(" 在循环链表尾部添加元素")],-1),St=(0,t.Wm)("p",null,"在循环链表的尾部添加元素的逻辑和普通(单向)链表的逻辑依然是相似的，唯一的区别依然是我们需要维护最后一个元素的指针。",-1),At=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("next "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("head\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ct=(0,t.Wm)("h4",{id:"循环链表的使用",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#循环链表的使用","aria-hidden":"true"},"#"),(0,t.Uk)(" 循环链表的使用")],-1),Bt=(0,t.Wm)("p",null,"在撰写完循环链表的代码后，我们需要写一点代码来测试：",-1),Et=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" linkedList "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"CircularLinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("            "),(0,t.Wm)("span",{class:"token comment"},"// 0 "),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getHead"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 1"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nlinkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("            "),(0,t.Wm)("span",{class:"token comment"},"// 4"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" node "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"getElementAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                 "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"indexOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// -1"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("      "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,3,2,5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,3,5"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"removeAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("linkedList"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("        "),(0,t.Wm)("span",{class:"token comment"},"// 1,9,5"),(0,t.Uk)("\n")])])],-1),qt=(0,t.Wm)("h2",{id:"集合",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#集合","aria-hidden":"true"},"#"),(0,t.Uk)(" 集合")],-1),Lt=(0,t.Wm)("p",null,"集合是由一组无序且唯一的项组成的，我们也可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。",-1),Tt=(0,t.Wm)("h3",{id:"创建集合类",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建集合类","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建集合类")],-1),Nt=(0,t.Wm)("p",null,[(0,t.Uk)("尽管"),(0,t.Wm)("code",null,"ES6"),(0,t.Uk)("已经新增了一个"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("结构，但我们依然会先使用"),(0,t.Wm)("code",null,"ES5"),(0,t.Uk)("来封装我们自己的"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("类：")],-1),Ot=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ft=(0,t.Wm)("p",null,"接下来，我们需要声明一些集合可用的方法：",-1),zt=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"add(element)"),(0,t.Uk)("：向集合中添加新元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"delete(element)"),(0,t.Uk)("：从集合移除一个元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"has(element)"),(0,t.Uk)("：判断元素是否在集合中，如果是则返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，否则返回"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("：清空集合。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：返回集合所包含元素的数量。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"values()"),(0,t.Uk)("：返回一个包含集合中所有值的数组。")])],-1),Pt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" element "),(0,t.Wm)("span",{class:"token keyword"},"in"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" element\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("element"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" Object"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keys"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" Object"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Dt=(0,t.Wm)("p",null,"代码分析：",-1),Mt=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"has()"),(0,t.Uk)("方法：要判断一个对象是否有某个属性，我们可以使用"),(0,t.Wm)("code",null,"in"),(0,t.Uk)("操作符来判断，但并不是所有的对象都继承了"),(0,t.Wm)("code",null,"Object.prototype"),(0,t.Uk)("，所以更好的做法是：")])],-1),Vt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Object"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("prototype"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hasOwnProperty"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"call"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),$t=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：对于此方法我们有几种方式来实现，第一种是新增一个变量，当"),(0,t.Wm)("code",null,"add"),(0,t.Uk)("或者"),(0,t.Wm)("code",null,"delete"),(0,t.Uk)("时，来维护这个变量；第二种方发生直接使用内置的"),(0,t.Wm)("code",null,"Object.keys()"),(0,t.Uk)("方法；第三种是手动提取"),(0,t.Wm)("code",null,"this.items"),(0,t.Uk)("对象中的属性合计：")])],-1),It=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" count "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" key "),(0,t.Wm)("span",{class:"token keyword"},"in"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hasOwnProperty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      count"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" count\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ht=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"values()"),(0,t.Uk)("：对于此方法我们可以直接使用内置的"),(0,t.Wm)("code",null,"Object.values()"),(0,t.Uk)("，但这种在某些浏览器中可能无法使用，所以我们可以写如下的方法来替换：")])],-1),Jt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" values "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" key "),(0,t.Wm)("span",{class:"token keyword"},"in"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("items"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hasOwnProperty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      values"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" values\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Kt=(0,t.Wm)("h4",{id:"使用set类",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用set类","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用Set类")],-1),Qt=(0,t.Wm)("p",null,[(0,t.Uk)("在撰写完以上的所有方法后，我们需要编写一些测试代码来验证我们的"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("类：")],-1),Gt=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" set "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nset"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1]"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// 1"),(0,t.Uk)("\nset"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2]"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// 2"),(0,t.Uk)("\nset"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"delete"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [2]"),(0,t.Uk)("\nset"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"delete"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// []"),(0,t.Uk)("\n")])])],-1),Rt=(0,t.Wm)("h3",{id:"集合运算",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#集合运算","aria-hidden":"true"},"#"),(0,t.Uk)(" 集合运算")],-1),Yt=(0,t.Wm)("p",null,"集合是数学中基础的概念，在计算机领域也非常重要，它在计算机科学中的主要应用之一是数据库，而数据库是大多数应用程序的根基。",-1),Xt=(0,t.Wm)("p",null,"集合被用于查询的设计和处理，当我们创建一条从关系型数据库中获取一个数据集合的查询语句时，使用的就是集合运算，并且数据库也会返回一个数据集合。当我们创建一条SQL语句查询命令时，可以指定是从表中获取全部数据还是获取其中的子集；也可以获取两张表共有的数据，只存在于一张表中的数据，或是存在于两张表内的数据，这些SQL领域的运算叫做联接，而SQL链接的基础就是集合运算。",-1),Zt=(0,t.Wm)("p",null,"在学习集合运算之前，我们需要先明白几个关于集合的概念：",-1),_t=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"并集"),(0,t.Uk)("：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"交集"),(0,t.Uk)("：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"差集"),(0,t.Uk)("：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"子集"),(0,t.Uk)("：验证一个给定的集合是否是另一个集合的子集。")])],-1),no=(0,t.Wm)("h4",{id:"并集",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#并集","aria-hidden":"true"},"#"),(0,t.Uk)(" 并集")],-1),so=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"union"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"otherSet"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" unionSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    unionSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  otherSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    unionSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" unionSet\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ao=(0,t.Wm)("p",null,"在转写完并集的方法后，我们需要写一点代码来测试：",-1),to=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setA "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setB "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" setA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"union"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("setB"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6]"),(0,t.Uk)("\n")])])],-1),oo=(0,t.Wm)("h4",{id:"交集",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#交集","aria-hidden":"true"},"#"),(0,t.Uk)(" 交集")],-1),eo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"intersection"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"otherSet"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" intersectionSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("otherSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      intersectionSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" intersectionSet\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),co=(0,t.Wm)("p",null,"在撰写完交集的方法后，我们需要写一点代码来测试：",-1),ko=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setA "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setB "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" setA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"intersection"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("setB"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [2, 3]"),(0,t.Uk)("\n")])])],-1),po=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"注意"),(0,t.Uk)("：假设我们有如下两个集合，"),(0,t.Wm)("code",null,"setA = [1, 2, 3, 4, 5, 6, 7]"),(0,t.Uk)(", "),(0,t.Wm)("code",null,"setB = [4, 6]"),(0,t.Uk)("，我们创建的"),(0,t.Wm)("code",null,"intersection()"),(0,t.Uk)("方法需要迭代七次"),(0,t.Wm)("code",null,"setA"),(0,t.Uk)("，如果我们只需要迭代两次"),(0,t.Wm)("code",null,"setB"),(0,t.Uk)("就好了，更少的迭代次数意味着更少的过程消耗。")],-1),lo=(0,t.Wm)("p",null,"优化后的代码：",-1),uo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"intersection"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"otherSet"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" intersectionSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" values "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" otherValues "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" otherSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" biggerSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" values\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" smallerSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" otherValues\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("biggerSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(" smallerSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    biggerSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" otherValues\n    smallerSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" values\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  smallerSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("biggerSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"includes"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      intersectionSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" intersectionSet\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),mo=(0,t.Wm)("h4",{id:"差集",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#差集","aria-hidden":"true"},"#"),(0,t.Uk)(" 差集")],-1),Wo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"difference"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"otherSet"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" differenceSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("values"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Uk)("otherSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      differenceSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" differenceSet\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),io=(0,t.Wm)("p",null,"在撰写完差集的方法后，我们需要写一点代码来测试：",-1),ro=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setA "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setB "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" setA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"difference"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("setB"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1]"),(0,t.Uk)("\n")])])],-1),Uo=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"注意"),(0,t.Uk)("：我们不能像优化交集"),(0,t.Wm)("code",null,"intersection"),(0,t.Uk)("一样优化差集"),(0,t.Wm)("code",null,"difference"),(0,t.Uk)("，因为"),(0,t.Wm)("code",null,"setA"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"setB"),(0,t.Uk)("之间的差集可能和"),(0,t.Wm)("code",null,"setB"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"setA"),(0,t.Uk)("之间的差集不同。")],-1),ho=(0,t.Wm)("h4",{id:"子集",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#子集","aria-hidden":"true"},"#"),(0,t.Uk)(" 子集")],-1),yo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"isSubSetOf"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"otherSet"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(" otherSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" isSubSet "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"every"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" otherSet"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" isSubSet\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),fo=(0,t.Wm)("p",null,"在撰写完子集的方法后，我们需要写一点代码来测试：",-1),wo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setA "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setB "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setC "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result1 "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" setA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isSubSetOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("setB"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result2 "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" setA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isSubSetOf"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("setC"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// false"),(0,t.Uk)("\n")])])],-1),go=(0,t.Wm)("h3",{id:"es6中的set类",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#es6中的set类","aria-hidden":"true"},"#"),(0,t.Uk)(" ES6中的Set类")],-1),bo=(0,t.Wm)("p",null,[(0,t.Uk)("因为"),(0,t.Wm)("code",null,"ES6"),(0,t.Uk)("已经提供了"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("结构，所以我们为了更好的理解集合的概念，我们尝试使用"),(0,t.Wm)("code",null,"ES6"),(0,t.Uk)("中的"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("结构来改写我们的"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("类：")],-1),vo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" set "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nset"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// @Iterator"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("set"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("   "),(0,t.Wm)("span",{class:"token comment"},"// 1"),(0,t.Uk)("\nset"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"delete"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),xo=(0,t.Wm)("h4",{id:"es6中使用扩展运算符进行集合运算",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#es6中使用扩展运算符进行集合运算","aria-hidden":"true"},"#"),(0,t.Uk)(" ES6中使用扩展运算符进行集合运算")],-1),jo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setA "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetA"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" setB "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nsetB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"add"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 并集"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token operator"},"..."),(0,t.Uk)("setA"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"..."),(0,t.Uk)("setB"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 交集"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token operator"},"..."),(0,t.Uk)("setA"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"filter"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"value"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(" setB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [2]"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token comment"},"// 差集"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token operator"},"..."),(0,t.Uk)("setA"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"filter"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"value"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Uk)("setB"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"has"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// [1]"),(0,t.Uk)("\n")])])],-1),So=(0,t.Wm)("h2",{id:"字典和散列表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#字典和散列表","aria-hidden":"true"},"#"),(0,t.Uk)(" 字典和散列表")],-1),Ao=(0,t.Wm)("h3",{id:"字典",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#字典","aria-hidden":"true"},"#"),(0,t.Uk)(" 字典")],-1),Co=(0,t.Wm)("p",null,"字典也成映射、符号表或关联数组。在计算机科学中，字典经常用来保存对象的引用地址。",-1),Bo=(0,t.Wm)("h4",{id:"创建字段",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建字段","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建字段")],-1),Eo=(0,t.Wm)("p",null,[(0,t.Uk)("我们将要实现的"),(0,t.Wm)("code",null,"Map"),(0,t.Uk)("类是以"),(0,t.Wm)("code",null,"ES5"),(0,t.Uk)("为基础来实现的，你会发现我们实现的"),(0,t.Wm)("code",null,"Map"),(0,t.Uk)("类和"),(0,t.Wm)("code",null,"Set"),(0,t.Uk)("类非常相似，不同于存储"),(0,t.Wm)("code",null,"[值, 值]"),(0,t.Uk)("对的形式，我们将要存储的是"),(0,t.Wm)("code",null,"[键， 值]"),(0,t.Uk)("对。")],-1),qo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Dictionary"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("toStrFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" defaultToString")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("toStrFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" toStrFn\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Lo=(0,t.Wm)("p",null,[(0,t.Uk)("除了定义我们的"),(0,t.Wm)("code",null,"Map"),(0,t.Uk)("字典类，还需要定义一个将字典键转成字符串的方法，因为"),(0,t.Wm)("code",null,"ES5"),(0,t.Uk)("中的对象的键只能是字符串：")],-1),To=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"defaultToString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token string"},"NULL"),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'UNDEFINED'"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"typeof"),(0,t.Uk)(" item "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'string'"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"||"),(0,t.Uk)(" item "),(0,t.Wm)("span",{class:"token keyword"},"instanceof"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"String"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" item"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),No=(0,t.Wm)("p",null,"然后，我们还需要声明一些映射/字典所能使用的方法：",-1),Oo=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"set(key, value)"),(0,t.Uk)("：向字典中添加新元素，如果"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("已经存在，那么已存在的"),(0,t.Wm)("code",null,"value"),(0,t.Uk)("会被覆盖。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"remove(key)"),(0,t.Uk)("：在字典中移除指定键的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"hasKey(key)"),(0,t.Uk)("：在字典中判断是否存在指定键的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"get(key)"),(0,t.Uk)("：在字典中获取指定键的元素。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("：清空字典。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"size()"),(0,t.Uk)("：返回字典所包含元素的数量。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("：判断字典是否为空。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"keys()"),(0,t.Uk)("：将字典中所有的键以数组的形式返回。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"values()"),(0,t.Uk)("：将字典中所有的值以数组的形式返回。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"keyValues()"),(0,t.Uk)("：将字典中所有的"),(0,t.Wm)("code",null,"[键， 值]"),(0,t.Uk)("对返回。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"forEach(callback)"),(0,t.Uk)("：字典迭代方法。")])],-1),Fo=(0,t.Wm)("h4",{id:"haskey-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#haskey-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" hasKey()方法")],-1),zo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"hasKey"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" value "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toStrFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" value "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" value "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Po=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：正如我们前面提到过的，"),(0,t.Wm)("code",null,"ES5"),(0,t.Uk)("只允许我们使用字符串作为对象的键名或者属性名，如果传入一个复杂对象作为键，我们需要将它转换为字符串。")],-1),Do=(0,t.Wm)("h4",{id:"set-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#set-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" set()方法")],-1),Mo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"set"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" value "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tableKey "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toStrFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("tableKey"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"ValuePair"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Vo=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们接受"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"value"),(0,t.Uk)("，首先需要判断"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"value"),(0,t.Uk)("不能为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("或者"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，其次我们需要把传入的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("转换为一个字符串，在存储在字典中。同时，为了方便存储"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"value"),(0,t.Uk)("，也同时为了方便转换为字符串格式，我们定义了"),(0,t.Wm)("code",null,"ValuePair"),(0,t.Uk)("类，并为其自定义了"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("方法：")],-1),$o=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"ValuePair"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" key\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("value "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" value\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token string"},"{#"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},"}: "),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Io=(0,t.Wm)("h4",{id:"remove-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#remove-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" remove()方法")],-1),Ho=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hasKey"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toStrFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Jo=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：在移除元素之前，我们首先需要判断给定的键是否在字典中存在，可以使用前面已经定义好的"),(0,t.Wm)("code",null,"hasKey()"),(0,t.Uk)("方法，如果存在则使用"),(0,t.Wm)("code",null,"delete"),(0,t.Uk)("操作符在字典中删除。")],-1),Ko=(0,t.Wm)("h4",{id:"get-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#get-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" get()方法")],-1),Qo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" valuePair "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toStrFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" valuePair "),(0,t.Wm)("span",{class:"token operator"},"=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(" valuePair"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("value\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Go=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们首先根据传入的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("获取到我们存储键值对元素，随后需要判断当前获取到的键值对元素是否为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("或"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，如果不是则返回"),(0,t.Wm)("code",null,"value"),(0,t.Uk)("即可。")],-1),Ro=(0,t.Wm)("h4",{id:"keys-、values-和keyvalues-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#keys-、values-和keyvalues-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" keys()、values()和keyValues()方法")],-1),Yo=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" Object"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"keys"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"map"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"valuePair"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(" valuePair"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"map"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"valuePair"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(" valuePair"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Xo=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：因为我们字典中存储的是"),(0,t.Wm)("code",null,"valuePair"),(0,t.Uk)("类的实例，所以对于"),(0,t.Wm)("code",null,"keyValues()"),(0,t.Uk)("方法的实现，可以直接使用内置函数"),(0,t.Wm)("code",null,"Object.values()"),(0,t.Uk)("，处理完"),(0,t.Wm)("code",null,"keyValues()"),(0,t.Uk)("方法，对于剩下的"),(0,t.Wm)("code",null,"keys()"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"values()"),(0,t.Uk)("方法的实现只需要再次调用"),(0,t.Wm)("code",null,"keyValues()"),(0,t.Uk)("方法，然后再对其结果进行"),(0,t.Wm)("code",null,"map"),(0,t.Uk)("函数映射。")],-1),Zo=(0,t.Wm)("h4",{id:"foreach-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#foreach-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" forEach()方法")],-1),_o=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" valuePairs "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" valuePairs"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("valuePair"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" valuePair"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"break"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ne=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们首先获取到由"),(0,t.Wm)("code",null,"valuePair"),(0,t.Uk)("类实例构成的数组，然后进行遍历调用"),(0,t.Wm)("code",null,"callback()"),(0,t.Uk)("函数，如果"),(0,t.Wm)("code",null,"callback()"),(0,t.Uk)("函数的返回结果为"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("，则终止"),(0,t.Wm)("code",null,"for"),(0,t.Uk)("循环遍历。")],-1),se=(0,t.Wm)("h4",{id:"其它方法-1",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#其它方法-1","aria-hidden":"true"},"#"),(0,t.Uk)(" 其它方法")],-1),ae=(0,t.Wm)("p",null,[(0,t.Uk)("在实现了以上的方法后，我们还剩下"),(0,t.Wm)("code",null,"clear()"),(0,t.Uk)("、"),(0,t.Wm)("code",null,"size()"),(0,t.Uk)("、"),(0,t.Wm)("code",null,"isEmpty()"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"toString()"),(0,t.Uk)("没有实现，接下来我们来实现它们：")],-1),te=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"clear"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"isEmpty"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"''"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" valuePairs "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" objStr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" valuePairs"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" valuePairs"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    objStr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("objStr"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},", "),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("valuePairs"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("index"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" objStr\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),oe=(0,t.Wm)("h4",{id:"使用dictionary类",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用dictionary类","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用Dictionary类")],-1),ee=(0,t.Wm)("p",null,[(0,t.Uk)("在撰写完"),(0,t.Wm)("code",null,"Dictionary"),(0,t.Uk)("类的所有方法后，我们需要撰写一点代码来测试一下：")],-1),ce=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" dic "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Dictionary"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ndic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'AAA@qq.com'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ndic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'BBB@163.com'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ndic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"set"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'CCC@gmail.com'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hasKey"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"size"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("     "),(0,t.Wm)("span",{class:"token comment"},"// AAA@qq.com"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keys"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// ['AAA', 'BBB', 'CCC']"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// ['AAA@qq.com', 'BBB@163.com', 'CCC@gmail.com']"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("    "),(0,t.Wm)("span",{class:"token comment"},"// [{key: 'AAA', value: 'AAA@qq.com'}， {key: 'BBB', value: 'BBB@qq.com'}， {key: 'CCC', value: 'CCC@qq.com'}]"),(0,t.Uk)("\ndic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keys"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("         "),(0,t.Wm)("span",{class:"token comment"},"// ['AAA', 'CCC']"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"values"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("       "),(0,t.Wm)("span",{class:"token comment"},"// ['AAA@qq.com',  'CCC@gmail.com']"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("dic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"keyValues"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("    "),(0,t.Wm)("span",{class:"token comment"},"// [{key: 'AAA', value: 'AAA@qq.com'}， {key: 'CCC', value: 'CCC@qq.com'}]"),(0,t.Uk)("\ndic"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'forEach: '"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token string"},"key: "),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token string"},", value: "),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token comment"},"// forEach: key: AAA, value: AAA@qq.com"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token comment"},"// forEach: key: CCC, value: CCC@gmail.com"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),ke=(0,t.Wm)("h3",{id:"散列表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#散列表","aria-hidden":"true"},"#"),(0,t.Uk)(" 散列表")],-1),pe=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"描述"),(0,t.Uk)("：散列表也叫"),(0,t.Wm)("code",null,"HashTable"),(0,t.Uk)("类或者"),(0,t.Wm)("code",null,"HashMap"),(0,t.Uk)("类，它是"),(0,t.Wm)("code",null,"Dictionary"),(0,t.Uk)("类的一种散列实现方式。")],-1),le=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"散列算法"),(0,t.Uk)("：散列算法的作用是尽可能的快的在数据结构中找到一个值，因为它是字典的一种实现，所以可以用作关联数组，它也可以用来对数据库进行索引。当我们使用关系型数据库的时候，创建一个新的表时，一个不错的做法是同时创建一个索引来更快的查询到记录的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("，在这种情况下，散列表可以用来保存键和对表中记录的引用。")],-1),ue=(0,t.Wm)("h4",{id:"创建散列表",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建散列表","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建散列表")],-1),me=(0,t.Wm)("p",null,"我们使用一个关联对象来表示我们的数据结构，以下是我们创建的散列表的基础代码：",-1),We=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"HashTable"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("toStrFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" defaultToString")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("toStrFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" toStrFn\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),ie=(0,t.Wm)("p",null,[(0,t.Uk)("其中我们依然沿用了"),(0,t.Wm)("code",null,"defaultToString()"),(0,t.Uk)("方法：")],-1),re=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"defaultToString"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token string"},"NULL"),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'UNDEFINED'"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"typeof"),(0,t.Uk)(" item "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'string'"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"||"),(0,t.Uk)(" item "),(0,t.Wm)("span",{class:"token keyword"},"instanceof"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"String"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token template-string"},[(0,t.Wm)("span",{class:"token template-punctuation string"},"`"),(0,t.Wm)("span",{class:"token interpolation"},[(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,t.Wm)("span",{class:"token template-punctuation string"},"`")]),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" item"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toString"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ue=(0,t.Wm)("p",null,"在撰写完以上代码后，我们需要为散列表添加一些方法：",-1),de=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"put(key, value)"),(0,t.Uk)("：向散列表中添加一个新的项")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"remove(key)"),(0,t.Uk)("：根据键值从散列表中移除值")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"get(key)"),(0,t.Uk)("：返回根据键值检索到的特定的值。")])],-1),he=(0,t.Wm)("h4",{id:"散列函数",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#散列函数","aria-hidden":"true"},"#"),(0,t.Uk)(" 散列函数")],-1),ye=(0,t.Wm)("p",null,"在实现以上三个方法之前，我们需要先来实现一个散列函数：",-1),fe=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"loseloseHashCode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"typeof"),(0,t.Uk)(" key "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'number'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" key\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tableKey "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"toStrFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" hash "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" tableKey"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    hash "),(0,t.Wm)("span",{class:"token operator"},"+="),(0,t.Uk)(" tableKey"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"charCodeAt"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("index"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" hash "),(0,t.Wm)("span",{class:"token operator"},"%"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"37"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"loseloseHashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),we=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们首先需要检测传递的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("是否为数字类型，如果是，则直接返回；如果不是则将其转换为字符串形式。随后需要把转换后的字符串的"),(0,t.Wm)("code",null,"ASCII"),(0,t.Uk)("值进行求和。同时为了得到比较小的数值，我们会使用"),(0,t.Wm)("code",null,"hash"),(0,t.Uk)("值和任意数做除法的余数，这可以规避操作数超过数值的表示范围。")],-1),ge=(0,t.Wm)("h4",{id:"put-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#put-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" put()方法")],-1),be=(0,t.Wm)("p",null,[(0,t.Uk)("现在我们有了自己的"),(0,t.Wm)("code",null,"hashCode"),(0,t.Uk)("函数，那么"),(0,t.Wm)("code",null,"put()"),(0,t.Uk)("方法的实现如下：")],-1),ve=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"put"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" value "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" hashCode "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"ValuePair"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),xe=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：我们首先需要检查传递的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("和"),(0,t.Wm)("code",null,"value"),(0,t.Uk)("是否为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("或者"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，其次还需要根据传递的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("获取起"),(0,t.Wm)("code",null,"hashCode"),(0,t.Uk)("，最后把这个"),(0,t.Wm)("code",null,"hashCode"),(0,t.Uk)("当做键存储在"),(0,t.Wm)("code",null,"table"),(0,t.Uk)("对象中。")],-1),je=(0,t.Wm)("h4",{id:"get-方法-1",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#get-方法-1","aria-hidden":"true"},"#"),(0,t.Uk)(" get()方法")],-1),Se=(0,t.Wm)("p",null,[(0,t.Uk)("与"),(0,t.Wm)("code",null,"Dictionary"),(0,t.Uk)("字段类的"),(0,t.Wm)("code",null,"get()"),(0,t.Uk)("方法非常类似，我们的"),(0,t.Wm)("code",null,"get()"),(0,t.Uk)("方法实现如下：")],-1),Ae=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" valuePair "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" valuePair "),(0,t.Wm)("span",{class:"token operator"},"=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(" valuePair"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("value\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Ce=(0,t.Wm)("h4",{id:"remove-方法-1",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#remove-方法-1","aria-hidden":"true"},"#"),(0,t.Uk)(" remove()方法")],-1),Be=(0,t.Wm)("p",null,[(0,t.Uk)("接下来是散列表的最后一个函数"),(0,t.Wm)("code",null,"remove()"),(0,t.Uk)("方法的 实现：")],-1),Ee=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" hashCode "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" valuePair "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("valuePair "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"delete"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("table"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),qe=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：要移除一个值，首先我们需要得到传递的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("对应的"),(0,t.Wm)("code",null,"hashCode"),(0,t.Uk)("，随后我们需要判断根据当前的"),(0,t.Wm)("code",null,"hashCode"),(0,t.Uk)("得到的值是否为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("或者"),(0,t.Wm)("code",null,"undefined"),(0,t.Uk)("，如果不是，则直接是否"),(0,t.Wm)("code",null,"delete"),(0,t.Uk)("操作符删除并返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("，表示移除成功；如果是，则直接返回"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("，表示移除失败。")],-1),Le=(0,t.Wm)("h4",{id:"使用hashtable",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#使用hashtable","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用HashTable")],-1),Te=(0,t.Wm)("p",null,[(0,t.Uk)("在撰写完"),(0,t.Wm)("code",null,"HashTable"),(0,t.Uk)("以后，我们需要书写一点测试代码：")],-1),Ne=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" hash "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"HashTable"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nhash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"put"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'AAA@qq.com'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nhash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"put"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'BBB@163.com'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nhash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"put"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'CCC@gmail.com'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'- AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 10"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'- BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 13"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"hashCode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token string"},"'- CCC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 16"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// AAA@qq.com"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// BBB@163.com"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// CCC@gmail.com"),(0,t.Uk)("\nhash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"remove"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'AAA'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// AAA@qq.com"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'BBB'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// undefined"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("hash"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"get"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token string"},"'CCC'"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("                "),(0,t.Wm)("span",{class:"token comment"},"// CCC@gmail.com"),(0,t.Uk)("\n")])])],-1),Oe=(0,t.Wm)("h2",{id:"递归",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#递归","aria-hidden":"true"},"#"),(0,t.Uk)(" 递归")],-1),Fe=(0,t.Wm)("h3",{id:"理解递归",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#理解递归","aria-hidden":"true"},"#"),(0,t.Uk)(" 理解递归")],-1),ze=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"递归："),(0,t.Uk)(" 递归是一种解决问题的方法，它从解决问题的各个小部分开始，直到解决最初的大问题，递归函数通常涉及函数调用自身。")],-1),Pe=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"recursiveFunction"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"params"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"recursiveFunction"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("params"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),De=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"注意："),(0,t.Uk)(" 每个递归函数都必须有一个基线条件，即一个不再递归调用的条件，以防止无线递归。")],-1),Me=(0,t.Wm)("h3",{id:"计算一个数的阶乘",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#计算一个数的阶乘","aria-hidden":"true"},"#"),(0,t.Uk)(" 计算一个数的阶乘")],-1),Ve=(0,t.Wm)("p",null,[(0,t.Uk)("一个数的阶乘非常适合用来当做递归的例子，一个数的阶乘公式为："),(0,t.Wm)("code",null,"n * (n - 1) * (n - 2) * ... * 1"),(0,t.Uk)("。")],-1),$e=(0,t.Wm)("p",null,"因此我们可以根据以上的公式撰写一下代码：",-1),Ie=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"factorial"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"number"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("number "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"undefined"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" total "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" n "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" number"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" n "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" n"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    total "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" total "),(0,t.Wm)("span",{class:"token operator"},"*"),(0,t.Uk)(" n\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" total\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"factorial"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 120"),(0,t.Uk)("\n")])])],-1),He=(0,t.Wm)("p",null,"以上是一个使用循环计算阶乘的代码，接下来我们使用递归来实现：",-1),Je=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"factorial"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"n"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("n "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"||"),(0,t.Uk)(" n "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" n "),(0,t.Wm)("span",{class:"token operator"},"*"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"factorial"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("n  "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"factorial"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 120"),(0,t.Uk)("\n")])])],-1),Ke=(0,t.Wm)("h3",{id:"斐波那契数列",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#斐波那契数列","aria-hidden":"true"},"#"),(0,t.Uk)(" 斐波那契数列")],-1),Qe=(0,t.Wm)("p",null,[(0,t.Uk)("斐波那契数列是另一个可以用解决的问题，它是由一个："),(0,t.Wm)("code",null,"0、1、1、2、3、5、8、13、21...."),(0,t.Uk)("等数组成的序列。它的规律是：")],-1),Ge=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,"位置0的斐波那契数为0"),(0,t.Wm)("li",null,"位置1 和 位置2的斐波那契为1"),(0,t.Wm)("li",null,[(0,t.Uk)("位置"),(0,t.Wm)("code",null,"n"),(0,t.Uk)("处的斐波那契数为位置"),(0,t.Wm)("code",null,"n - 1"),(0,t.Uk)("的斐波那契数加上位置"),(0,t.Wm)("code",null,"n - 2"),(0,t.Uk)("的斐波那契数")])],-1),Re=(0,t.Wm)("p",null,"因此根据以上规律，我们使用递归可以撰写如下代码：",-1),Ye=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"fibonacci"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"n"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("n "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("n "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"||"),(0,t.Uk)(" n "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"fibonacci"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("n "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"fibonacci"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("n "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"fibonacci"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 8"),(0,t.Uk)("\n")])])],-1),Xe=(0,t.Wm)("h2",{id:"树",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#树","aria-hidden":"true"},"#"),(0,t.Uk)(" 树")],-1),Ze=(0,t.Wm)("h3",{id:"树数据结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#树数据结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 树数据结构")],-1),_e=(0,t.Wm)("p",null,[(0,t.Uk)("数是一种分层数据的抽象模型，现实生活中最常见的树的例子就是家谱或者公司的组织架构。 "),(0,t.Wm)("img",{src:o,alt:"树"})],-1),nc=(0,t.Wm)("h3",{id:"树的相关术语",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#树的相关术语","aria-hidden":"true"},"#"),(0,t.Uk)(" 树的相关术语")],-1),sc=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"特点："),(0,t.Uk)(" 一个树结构包含一系列存在父子关系的节点，每个节点都有一个父节点(除顶部的第一个节点)以及零个或多个子节点。")],-1),ac=(0,t.Wm)("p",null,"树的相关术语：",-1),tc=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"根节点"),(0,t.Uk)("：位于树顶部的节点。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"内部节点"),(0,t.Uk)("：至少有一个子节点的节点称为内部节点。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"外部节点"),(0,t.Uk)("：没有子元素的节点称为外部节点或叶节点。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"子树"),(0,t.Uk)("：由节点和它的后代构成。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"深度"),(0,t.Uk)("：节点的深度取决于它的祖先节点的数量。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"高度"),(0,t.Uk)("：节点的高度取决于所有节点深度的最大值。")])],-1),oc=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:e,alt:"树"})],-1),ec=(0,t.Wm)("h3",{id:"二叉树和二叉搜索树",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#二叉树和二叉搜索树","aria-hidden":"true"},"#"),(0,t.Uk)(" 二叉树和二叉搜索树")],-1),cc=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"二叉树"),(0,t.Uk)("：二叉树中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点，这个定义有助于我们写出更高效地在树中插入、查找和删除节点的算法。")],-1),kc=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"二叉搜索树(BST)"),(0,t.Uk)("：是二叉树中的一种，但是只允许我们在左侧节点存储比父节点更小的值，在右侧节点存储比父节点大的值。 根据我们对于"),(0,t.Wm)("code",null,"BST"),(0,t.Uk)("的理解，我们可以撰写以下基础代码：")],-1),pc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"BinarySearchTree"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("compareFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" defaultCompare")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("compareFn "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" compareFn\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"class"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token function"},"constructor"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" key\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),lc=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：和链表类似，我们通过指针来表示节点之间的关系，在二叉搜索树中，"),(0,t.Wm)("code",null,"left"),(0,t.Uk)("代表左侧节点，"),(0,t.Wm)("code",null,"right"),(0,t.Uk)("代码右侧节点。在"),(0,t.Wm)("code",null,"BinarySearchTree"),(0,t.Uk)("二叉搜索树的构造函数中，使用我们之前实现过的方法来比较节点：")],-1),uc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"defaultCompare"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("a"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" b")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("a "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(" b"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" a "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" b "),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),mc=(0,t.Wm)("p",null,"下图展示了二叉搜索树数据结构的组织方式：",-1),Wc=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:c,alt:"树"})],-1),ic=(0,t.Wm)("p",null,[(0,t.Uk)("在实现了"),(0,t.Wm)("code",null,"BinarySearchTree"),(0,t.Uk)("基础代码后，我们需要为其撰写一些方法：")],-1),rc=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"insert(key)"),(0,t.Uk)("：向树中插入一个新的键。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"search(key)"),(0,t.Uk)("：在树中查找一个键，如果节点存在，则返回"),(0,t.Wm)("code",null,"true"),(0,t.Uk)("；如果不存在，则返回"),(0,t.Wm)("code",null,"false"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"inOrderTraverse()"),(0,t.Uk)("：通过中序遍历方式遍历所有节点。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"preOrderTraverse()"),(0,t.Uk)("：通过先序遍历方式遍历所有节点。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"postOrderTraverse()"),(0,t.Uk)("：通过后序遍历方式遍历所有节点。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"min()"),(0,t.Uk)("：返回树中最小的值/键。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"max()"),(0,t.Uk)("：返回树中最大的值/键。")]),(0,t.Wm)("li",null,[(0,t.Wm)("code",null,"remove(key)"),(0,t.Uk)("：从树中移除某个键。")])],-1),Uc=(0,t.Wm)("h4",{id:"insert-方法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#insert-方法","aria-hidden":"true"},"#"),(0,t.Uk)(" insert()方法")],-1),dc=(0,t.Wm)("p",null,[(0,t.Uk)("向"),(0,t.Wm)("code",null,"BST"),(0,t.Uk)("树中插入一个节点，我们需要使用到递归算法：")],-1),hc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insertNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"insertNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" key")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"compareFn"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insertNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Node"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insertNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),yc=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：首先我们判断要插入的是否为树的顶部节点，如果是则插入，如果不是则需要再调用"),(0,t.Wm)("code",null,"insertNode()"),(0,t.Uk)("方法，在这个方法里面，我们需要判断，当前要插入的"),(0,t.Wm)("code",null,"key"),(0,t.Uk)("和当前比较的节点进行比较，如果小于，则插入在左侧；如果大于则插入在右侧。其中判断一个节点左侧或者右侧是否插入，只需要通过判断是否为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("即可。")],-1),fc=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"实例分析"),(0,t.Uk)("：如果我们有以下代码场景")],-1),wc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tree "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"BinarySearchTree"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"15"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"13"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"14"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"20"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"18"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"25"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),gc=(0,t.Wm)("p",null,"上述代码撰写完毕后，我们将会得到如下图所示的二叉搜索树：",-1),bc=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:k,alt:"树"})],-1),vc=(0,t.Wm)("p",null,"现在假设我们需要插入值为6的键，即执行如下代码：",-1),xc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Uk)("tree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),jc=(0,t.Wm)("p",null,"其插入步骤分析如下：",-1),Sc=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("树非空，执行"),(0,t.Wm)("code",null,"this.insertNode(this.root, key)"),(0,t.Uk)("代码。")]),(0,t.Wm)("li",null,[(0,t.Uk)("首先检测"),(0,t.Wm)("code",null,"6 < 11"),(0,t.Uk)("，在左侧继续查找，随后检测"),(0,t.Wm)("code",null,"6 < 7"),(0,t.Uk)("继续在左侧查找，然后判断"),(0,t.Wm)("code",null,"6 > 5"),(0,t.Uk)("。")]),(0,t.Wm)("li",null,[(0,t.Uk)("在值为"),(0,t.Wm)("code",null,"5"),(0,t.Uk)("的节点右侧搜索，判断其右侧节点没有节点，则要插入的键就是此节点右节点。")]),(0,t.Wm)("li",null,"最后递归方法会依次出栈，代码执行过程结束。")],-1),Ac=(0,t.Wm)("p",null,"以上步骤的分析图以及插入效果如下：",-1),Cc=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:p,alt:"树"})],-1),Bc=(0,t.Wm)("h3",{id:"树的遍历",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#树的遍历","aria-hidden":"true"},"#"),(0,t.Uk)(" 树的遍历")],-1),Ec=(0,t.Wm)("p",null,"遍历一个树是指访问树的每个节点并对它们进行某种操作的过程，访问树的所有节点有三种方式：中序、先序和后序。",-1),qc=(0,t.Wm)("h4",{id:"中序遍历",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#中序遍历","aria-hidden":"true"},"#"),(0,t.Uk)(" 中序遍历")],-1),Lc=(0,t.Wm)("p",null,[(0,t.Uk)("中序遍历是一种以上行顺序访问"),(0,t.Wm)("code",null,"BST"),(0,t.Uk)("所有节点的遍历方式，也就是从最小到最大的顺序访问所以节点。")],-1),Tc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"inOrderTraverse"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"inOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"inOrderTraverseNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"inOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token function"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"inOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Nc=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：首先我们需要检查以参数形式传入的节点是否为"),(0,t.Wm)("code",null,"null"),(0,t.Uk)("，因为这就是停止递归函数的判断条件。然后通过递归的形式先对左侧子节点进行访问，接着对根节点进行访问，最后再访问右侧子节点。")],-1),Oc=(0,t.Wm)("p",null,"代码撰写完毕后，我们使用如下代码来测试中序遍历方法：",-1),Fc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tree "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"BinarySearchTree"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"15"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"13"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"14"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"20"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"18"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"25"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function-variable function"},"printNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(" console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"inOrderTraverse"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("printNode"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 依次输出：3 5 6 7 8 9 10 11 12 13 14 15 18 20 25"),(0,t.Uk)("\n")])])],-1),zc=(0,t.Wm)("p",null,"其遍历过程如下图所示：",-1),Pc=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:l,alt:"树"})],-1),Dc=(0,t.Wm)("h4",{id:"先序遍历",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#先序遍历","aria-hidden":"true"},"#"),(0,t.Uk)(" 先序遍历")],-1),Mc=(0,t.Wm)("p",null,"先序遍历是以优先后代节点的顺序访问每个节点的，先序遍历的一种应用是打印一个结构化的文档。",-1),Vc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"preOrderTraverse"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"preOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"preOrderTraverseNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token function"},"callback"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"preOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"preOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),$c=(0,t.Wm)("p",null,"代码分析：先序遍历和中序遍历的不同点是：先序遍历会先访问节点本身，然后再访问 它的左侧节点，最后访问右侧节点。",-1),Ic=(0,t.Wm)("p",null,"撰写以上代码后，我们撰写测试代码：",-1),Hc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tree "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"BinarySearchTree"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"15"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"13"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"14"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"20"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"18"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"25"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function-variable function"},"printNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(" console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"preOrderTraverse"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("printNode"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 依次输出：11 7 5 3 6 9 8 10 15 13 12 14 20 18 25"),(0,t.Uk)("\n")])])],-1),Jc=(0,t.Wm)("p",null,"其遍历过程如下图所示：",-1),Kc=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:u,alt:"树"})],-1),Qc=(0,t.Wm)("h4",{id:"后序遍历",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#后序遍历","aria-hidden":"true"},"#"),(0,t.Uk)(" 后序遍历")],-1),Gc=(0,t.Wm)("p",null,"后续遍历则是先访问节点的后代节点，再访问节点本身。后续遍历的一种应用是计算一个目录及其子目录中所有文件所占空间的大小。",-1),Rc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"postOrderTraverse"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"postOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"postOrderTraverseNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"postOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"postOrderTraverseNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" callback"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token function"},"callback"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("node"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),Yc=(0,t.Wm)("p",null,"代码分析：我们会发现中序、先序和后续遍历的实现方式是十分相似的，唯一的不同是访问根节点的顺序不一样。",-1),Xc=(0,t.Wm)("p",null,"撰写以上代码后，我们撰写测试代码：",-1),Zc=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" tree "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"BinarySearchTree"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"11"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"15"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"9"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"10"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"13"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"12"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"14"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"20"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"18"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"25"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"insert"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function-variable function"},"printNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(" console"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\ntree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"postOrderTraverse"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("printNode"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// 依次输出：3 6 5 8 10 9 7 12 14 13 18 25 20 15 11"),(0,t.Uk)("\n")])])],-1),_c=(0,t.Wm)("p",null,"其遍历过程如下图所示：",-1),nk=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:m,alt:"树"})],-1),sk=(0,t.Wm)("h3",{id:"搜索树中的值",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#搜索树中的值","aria-hidden":"true"},"#"),(0,t.Uk)(" 搜索树中的值")],-1),ak=(0,t.Wm)("p",null,"在一个树中，有三种经常执行的搜索类型：",-1),tk=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,"搜索最小值"),(0,t.Wm)("li",null,"搜索最大值"),(0,t.Wm)("li",null,"搜索特定的值")],-1),ok=(0,t.Wm)("h4",{id:"搜索最小值和最大值",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#搜索最小值和最大值","aria-hidden":"true"},"#"),(0,t.Uk)(" 搜索最小值和最大值")],-1),ek=(0,t.Wm)("p",null,"如果我们看一眼我们现在已有的树，我们就会发现最左边是最小值，最右边是最大值，这种特定的树为我们搜索最大值和最小值提供了极大的方便。",-1),ck=(0,t.Wm)("p",null,"首先我们来看寻找最小值的方法：",-1),kk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"min"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"minNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"minNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"node"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("current "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("left\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" current\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),pk=(0,t.Wm)("p",null,"和搜索最小值相似的逻辑，我们来看搜素最大值的方法：",-1),lk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token function"},"max"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"maxNode"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"this"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("root"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token function"},"maxNode"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"node"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" node\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("current "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right "),(0,t.Wm)("span",{class:"token operator"},"!=="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"null"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    current "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" current"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("right\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" current\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),uk=(0,t.Wm)("p",null,"在撰写完以上代码后，我们使用以下代码来测试：",-1),mk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" minNode "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" tree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"min"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" maxNode "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" tree"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"max"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("minNode"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// 3"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("maxNode"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("key"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// 25"),(0,t.Uk)("\n")])])],-1),Wk=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:W,alt:"树"})],-1),ik=(0,t.Wm)("h4",{id:"搜索特定的值",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#搜索特定的值","aria-hidden":"true"},"#"),(0,t.Uk)(" 搜索特定的值")],-1),rk=(0,t.Wm)("h3",{id:"自平衡树",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#自平衡树","aria-hidden":"true"},"#"),(0,t.Uk)(" 自平衡树")],-1),Uk=(0,t.Wm)("h2",{id:"二叉堆和堆排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#二叉堆和堆排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 二叉堆和堆排序")],-1),dk=(0,t.Wm)("h3",{id:"二叉堆数据结构",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#二叉堆数据结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 二叉堆数据结构")],-1),hk=(0,t.Wm)("h3",{id:"堆排序算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#堆排序算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 堆排序算法")],-1),yk=(0,t.Wm)("h2",{id:"图",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#图","aria-hidden":"true"},"#"),(0,t.Uk)(" 图")],-1),fk=(0,t.Wm)("h3",{id:"图的相关术语",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#图的相关术语","aria-hidden":"true"},"#"),(0,t.Uk)(" 图的相关术语")],-1),wk=(0,t.Wm)("h3",{id:"图的表示",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#图的表示","aria-hidden":"true"},"#"),(0,t.Uk)(" 图的表示")],-1),gk=(0,t.Wm)("h3",{id:"创建graph类",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#创建graph类","aria-hidden":"true"},"#"),(0,t.Uk)(" 创建Graph类")],-1),bk=(0,t.Wm)("h3",{id:"图的遍历",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#图的遍历","aria-hidden":"true"},"#"),(0,t.Uk)(" 图的遍历")],-1),vk=(0,t.Wm)("h3",{id:"最短路径算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#最短路径算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 最短路径算法")],-1),xk=(0,t.Wm)("h3",{id:"最小生成树",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#最小生成树","aria-hidden":"true"},"#"),(0,t.Uk)(" 最小生成树")],-1),jk=(0,t.Wm)("h2",{id:"排序和搜索算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#排序和搜索算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 排序和搜索算法")],-1),Sk=(0,t.Wm)("p",null,[(0,t.Uk)("常用到的"),(0,t.Wm)("strong",null,"排序算法"),(0,t.Uk)("有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、计数排序以及桶排序。")],-1),Ak=(0,t.Wm)("p",null,[(0,t.Uk)("常用到的"),(0,t.Wm)("strong",null,"搜索算法"),(0,t.Uk)("有：顺序搜索、内插搜索和二分搜索算法。")],-1),Ck=(0,t.Wm)("h3",{id:"排序算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#排序算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 排序算法")],-1),Bk=(0,t.Wm)("h4",{id:"冒泡排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#冒泡排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 冒泡排序")],-1),Ek=(0,t.Wm)("p",null,"冒泡排序是比较相邻的两个项，如果第一个比第二个大，则交换它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样，冒泡排序因此而得名。冒泡排序可能是所有排序算法中最简单的，但从运行时间的角度而言，冒泡排序是最差的一个。",-1),qk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"bubbleSort"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" length "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" length "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" j"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" temp "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n        array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" temp\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" array\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" arr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"bubbleSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5]"),(0,t.Uk)("\n")])])],-1),Lk=(0,t.Wm)("p",null,"下图展示冒泡排序的算法是如何执行的：",-1),Tk=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:i,alt:"排序"})],-1),Nk=(0,t.Wm)("h4",{id:"选择排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#选择排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 选择排序")],-1),Ok=(0,t.Wm)("p",null,"选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第二位，接着找到第二小的值将其放在第二位，以此类推。",-1),Fk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"selectSort"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" length "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" indexMin "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" length "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    indexMin "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" i\n    "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" j"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("indexMin"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        indexMin "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" j\n      "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"!="),(0,t.Uk)(" indexMin"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" temp "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n      array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("indexMin"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n      array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("indexMin"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" temp\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" array\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" arr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"selectSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5]"),(0,t.Uk)("\n")])])],-1),zk=(0,t.Wm)("p",null,"下图展示了选择排序的算法是如何执行的：",-1),Pk=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:r,alt:"排序"})],-1),Dk=(0,t.Wm)("h4",{id:"插入排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#插入排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 插入排序")],-1),Mk=(0,t.Wm)("p",null,"插入排序每次排一个数组项，以此方式构建最后的排序数组。",-1),Vk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"insertSort"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" length "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" temp "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" i\n    temp "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("j "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(" temp"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n      j"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" temp\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" array\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" arr "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"insertSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("arr"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5]"),(0,t.Uk)("\n")])])],-1),$k=(0,t.Wm)("p",null,"代码分析：",-1),Ik=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Uk)("数组第一项3默认已被排序，所以我们从数组第二项("),(0,t.Wm)("code",null,"i = 1"),(0,t.Uk)(")值为5开始，因为3比5小，所以5待在原位，此时3和5已被排序。")]),(0,t.Wm)("li",null,"下一个待排序的值为1，因为1比5小，所以5应该被移动到第三个位置，又因为1比3小，所以3被移动到第二个位置。"),(0,t.Wm)("li",null,"下一个待排序的值为4，因为4比5小，所以5应该被移动到第四个位置，又因为3比4小，所以4待在原位置不动。"),(0,t.Wm)("li",null,"下一个待排序的值为2，因为2比5小，所以5应该被移动到第五个位置，又因为2比4小，所以4被移动到第四个位置，又因为2比3小，所以3被移动到第三个位置，1比2小，所以2的位置不动。至此，数组已排序完毕。")],-1),Hk=(0,t.Wm)("p",null,"下图展示了插入排序算法是如何执行的：",-1),Jk=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:U,alt:"排序"})],-1),Kk=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"注意"),(0,t.Uk)("：在排序小型数组时，此算法比选择排序和冒泡排序性能要好。")],-1),Qk=(0,t.Wm)("h4",{id:"归并排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#归并排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 归并排序")],-1),Gk=(0,t.Wm)("p",null,[(0,t.Uk)("归并排序是第一个可以实际使用的排序算法，我们之前的三种算法性能不是特别的好，但归并排序性能不错，在"),(0,t.Wm)("code",null,"JavaScript"),(0,t.Uk)("中，"),(0,t.Wm)("code",null,"Array.prototype.sort()"),(0,t.Uk)("方法，"),(0,t.Wm)("code",null,"ECMAScript"),(0,t.Uk)("并没有定义使用哪种排序算法，而是交给浏览器厂商自己去实现，而对于谷歌"),(0,t.Wm)("code",null,"V8引擎"),(0,t.Uk)("，其使用了快速排序的变体；在"),(0,t.Wm)("code",null,"Firefox"),(0,t.Uk)("浏览器中，则是使用了归并排序。")],-1),Rk=(0,t.Wm)("p",null,"归并排序是一种分而治之的算法，其思想是将原始数组切分为较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。",-1),Yk=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"mergeSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)(" length "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" middle "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" Math"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"floor"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"/"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" left "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"mergeSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"slice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" middle"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" right "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"mergeSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"slice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("middle"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" length"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    array "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"merge"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("left"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" right"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" array\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"merge"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("left"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" right")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" i "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" left"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"&&"),(0,t.Uk)(" j "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" right"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" item "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" left"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" right"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(" left"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(" right"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"push"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" result"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"concat"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("i "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" left"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"?"),(0,t.Uk)(" left"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"slice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("i"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},":"),(0,t.Uk)(" right"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"slice"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("j"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"mergeSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6, 7, 8]"),(0,t.Uk)("\n")])])],-1),Xk=(0,t.Wm)("p",null,"下图展示了该排序的算法是如何执行的：",-1),Zk=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:d,alt:"排序"})],-1),_k=(0,t.Wm)("h4",{id:"快速排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#快速排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 快速排序")],-1),np=(0,t.Wm)("h4",{id:"计数排序",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#计数排序","aria-hidden":"true"},"#"),(0,t.Uk)(" 计数排序")],-1),sp=(0,t.Wm)("p",null,"计数排序是我们学到的第一个分布式排序，分布式排序使用已组织好的辅助数据结构，然后进行合并，得到排好序的数组。计数排序使用一个用来存储每个元素在原始数组中出现次数的临时数组，在所有元素都计数完完成后，临时数组已排好序并可迭代已构建排序后的结果数组。",-1),ap=(0,t.Wm)("p",null,"计数排序是一种用来排序整数优秀的算法，它的时间复杂度非常简单，但其额外引入了辅助数据结构从而需要更多的内存空间。",-1),tp=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"countingSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" array\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" maxValue "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"findMaxValue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" counts "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token class-name"},"Array"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("maxValue "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"item"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token operator"},"!"),(0,t.Uk)("counts"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      counts"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n    counts"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" sortIndex "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  counts"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"forEach"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("item"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" index")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("item "),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("sortIndex"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" index\n      item"),(0,t.Wm)("span",{class:"token operator"},"--"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" array\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"findMaxValue"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},"array"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" max "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("index"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},">"),(0,t.Uk)(" max"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      max "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("index"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(" max\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"countingSort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("result"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token comment"},"// [1, 2, 3, 4, 5]"),(0,t.Uk)("\n")])])],-1),op=(0,t.Wm)("h3",{id:"搜索算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#搜索算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 搜索算法")],-1),ep=(0,t.Wm)("h4",{id:"顺序搜索",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#顺序搜索","aria-hidden":"true"},"#"),(0,t.Uk)(" 顺序搜索")],-1),cp=(0,t.Wm)("p",null,"顺序搜索(线性搜索)是最基本的搜索算法，它的机制是，将每一个数据结构中的元素和我们要找的元素做比较，一直到找到位置。顺序搜索是最低效的一种搜索算法。",-1),kp=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"sequentSearch"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"for"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length"),(0,t.Wm)("span",{class:"token punctuation"},";"),(0,t.Uk)(" index"),(0,t.Wm)("span",{class:"token operator"},"++"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("index"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(" value"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      result "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" index\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])])],-1),pp=(0,t.Wm)("p",null,"假定有如下数组，其搜索示意图如下：",-1),lp=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:h,alt:"搜索算法"})],-1),up=(0,t.Wm)("h4",{id:"二分搜索",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#二分搜索","aria-hidden":"true"},"#"),(0,t.Uk)(" 二分搜索")],-1),mp=(0,t.Wm)("p",null,"二分搜索算法的原理和猜数字游戏类似，假设有1-100的数，一个人猜，另一个人只需要回答高了还是低了，一直到找到这个数位置。",-1),Wp=(0,t.Wm)("p",null,"二分搜索算法对数据结构有一定的要求，它首先要求数据结构已经是排好序的，其次它还要遵守如下的规则：",-1),ip=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,"首先选择数组的中间值。"),(0,t.Wm)("li",null,"如果选中的值是待搜索的值，那么停止搜索。"),(0,t.Wm)("li",null,"如果待搜索的值比选中的值要小，则返回步骤1并在选中值左边的子数组中查找。"),(0,t.Wm)("li",null,"如果待搜索的值比选中的值要大，则返回步骤1并在选中值的右边的子数组中查找。")],-1),rp=(0,t.Wm)("div",{class:"language-javascript ext-js"},[(0,t.Wm)("pre",{class:"language-javascript"},[(0,t.Wm)("code",null,[(0,t.Wm)("span",{class:"token keyword"},"function"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token function"},"binarySearch"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token parameter"},[(0,t.Uk)("array"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(" value")]),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n  array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"sort"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" low "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"0"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"let"),(0,t.Uk)(" high "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Uk)("length "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"while"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("low "),(0,t.Wm)("span",{class:"token operator"},"<="),(0,t.Uk)(" high"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" mid "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" Math"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"floor"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("low "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(" high"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token operator"},"/"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"const"),(0,t.Uk)(" element "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" array"),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Uk)("mid"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value "),(0,t.Wm)("span",{class:"token operator"},"==="),(0,t.Uk)(" element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"true"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Uk)("value "),(0,t.Wm)("span",{class:"token operator"},"<"),(0,t.Uk)(" element"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      high "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" mid "),(0,t.Wm)("span",{class:"token operator"},"-"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token keyword"},"else"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n      low "),(0,t.Wm)("span",{class:"token operator"},"="),(0,t.Uk)(" mid "),(0,t.Wm)("span",{class:"token operator"},"+"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Uk)("\n    "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n  "),(0,t.Wm)("span",{class:"token keyword"},"return"),(0,t.Uk)(),(0,t.Wm)("span",{class:"token boolean"},"false"),(0,t.Uk)("\n"),(0,t.Wm)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\nconsole"),(0,t.Wm)("span",{class:"token punctuation"},"."),(0,t.Wm)("span",{class:"token function"},"log"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token function"},"binarySearch"),(0,t.Wm)("span",{class:"token punctuation"},"("),(0,t.Wm)("span",{class:"token punctuation"},"["),(0,t.Wm)("span",{class:"token number"},"8"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"7"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"6"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"5"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"4"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"3"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"1"),(0,t.Wm)("span",{class:"token punctuation"},"]"),(0,t.Wm)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t.Wm)("span",{class:"token number"},"2"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Wm)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t.Wm)("span",{class:"token comment"},"// true"),(0,t.Uk)("\n")])])],-1),Up=(0,t.Wm)("p",null,[(0,t.Uk)("代码分析：为了进一步简单化，我们使用了内置的"),(0,t.Wm)("code",null,"Array.prototype.sort()"),(0,t.Uk)("方法来进行排序，也可以使用我们之前学到的任何排序算法来替换。")],-1),dp=(0,t.Wm)("p",null,"以下是二分搜索算法的搜索示意图：",-1),hp=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:y,alt:"搜索算法"})],-1),yp=(0,t.Wm)("h4",{id:"内插搜索",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#内插搜索","aria-hidden":"true"},"#"),(0,t.Uk)(" 内插搜索")],-1),fp=(0,t.Wm)("h2",{id:"算法设计与技巧",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#算法设计与技巧","aria-hidden":"true"},"#"),(0,t.Uk)(" 算法设计与技巧")],-1),wp=(0,t.Wm)("h3",{id:"分而治之",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#分而治之","aria-hidden":"true"},"#"),(0,t.Uk)(" 分而治之")],-1),gp=(0,t.Wm)("h3",{id:"动态规划",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#动态规划","aria-hidden":"true"},"#"),(0,t.Uk)(" 动态规划")],-1),bp=(0,t.Wm)("h3",{id:"贪心算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#贪心算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 贪心算法")],-1),vp=(0,t.Wm)("h3",{id:"回溯算法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#回溯算法","aria-hidden":"true"},"#"),(0,t.Uk)(" 回溯算法")],-1),xp=(0,t.Wm)("h3",{id:"函数式编程简介",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#函数式编程简介","aria-hidden":"true"},"#"),(0,t.Uk)(" 函数式编程简介")],-1),jp=(0,t.Wm)("h2",{id:"算法复杂度",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#算法复杂度","aria-hidden":"true"},"#"),(0,t.Uk)(" 算法复杂度")],-1),Sp=(0,t.Wm)("h3",{id:"大o表示法",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#大o表示法","aria-hidden":"true"},"#"),(0,t.Uk)(" 大"),(0,t.Wm)("code",null,"O"),(0,t.Uk)("表示法")],-1),Ap=(0,t.Wm)("h3",{id:"用算法娱乐身心",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#用算法娱乐身心","aria-hidden":"true"},"#"),(0,t.Uk)(" 用算法娱乐身心")],-1),Cp={render:function(n,s){return(0,t.wg)(),(0,t.j4)(t.HY,null,[f,w,g,b,v,x,j,S,A,C,B,E,q,L,T,N,O,F,z,P,D,M,V,$,I,H,J,K,Q,G,R,Y,X,Z,_,nn,sn,an,tn,on,en,cn,kn,pn,ln,un,mn,Wn,rn,Un,dn,hn,yn,fn,wn,gn,bn,vn,xn,jn,Sn,An,Cn,Bn,En,qn,Ln,Tn,Nn,On,Fn,zn,Pn,Dn,Mn,Vn,$n,In,Hn,Jn,Kn,Qn,Gn,Rn,Yn,Xn,Zn,_n,ns,ss,as,ts,os,es,cs,ks,ps,ls,us,ms,Ws,is,rs,Us,ds,hs,ys,fs,ws,gs,bs,vs,xs,js,Ss,As,Cs,Bs,Es,qs,Ls,Ts,Ns,Os,Fs,zs,Ps,Ds,Ms,Vs,$s,Is,Hs,Js,Ks,Qs,Gs,Rs,Ys,Xs,Zs,_s,na,sa,aa,ta,oa,ea,ca,ka,pa,la,ua,ma,Wa,ia,ra,Ua,da,ha,ya,fa,wa,ga,ba,va,xa,ja,Sa,Aa,Ca,Ba,Ea,qa,La,Ta,Na,Oa,Fa,za,Pa,Da,Ma,Va,$a,Ia,Ha,Ja,Ka,Qa,Ga,Ra,Ya,Xa,Za,_a,nt,st,at,tt,ot,et,ct,kt,pt,lt,ut,mt,Wt,it,rt,Ut,dt,ht,yt,ft,wt,gt,bt,vt,xt,jt,St,At,Ct,Bt,Et,qt,Lt,Tt,Nt,Ot,Ft,zt,Pt,Dt,Mt,Vt,$t,It,Ht,Jt,Kt,Qt,Gt,Rt,Yt,Xt,Zt,_t,no,so,ao,to,oo,eo,co,ko,po,lo,uo,mo,Wo,io,ro,Uo,ho,yo,fo,wo,go,bo,vo,xo,jo,So,Ao,Co,Bo,Eo,qo,Lo,To,No,Oo,Fo,zo,Po,Do,Mo,Vo,$o,Io,Ho,Jo,Ko,Qo,Go,Ro,Yo,Xo,Zo,_o,ne,se,ae,te,oe,ee,ce,ke,pe,le,ue,me,We,ie,re,Ue,de,he,ye,fe,we,ge,be,ve,xe,je,Se,Ae,Ce,Be,Ee,qe,Le,Te,Ne,Oe,Fe,ze,Pe,De,Me,Ve,$e,Ie,He,Je,Ke,Qe,Ge,Re,Ye,Xe,Ze,_e,nc,sc,ac,tc,oc,ec,cc,kc,pc,lc,uc,mc,Wc,ic,rc,Uc,dc,hc,yc,fc,wc,gc,bc,vc,xc,jc,Sc,Ac,Cc,Bc,Ec,qc,Lc,Tc,Nc,Oc,Fc,zc,Pc,Dc,Mc,Vc,$c,Ic,Hc,Jc,Kc,Qc,Gc,Rc,Yc,Xc,Zc,_c,nk,sk,ak,tk,ok,ek,ck,kk,pk,lk,uk,mk,Wk,ik,rk,Uk,dk,hk,yk,fk,wk,gk,bk,vk,xk,jk,Sk,Ak,Ck,Bk,Ek,qk,Lk,Tk,Nk,Ok,Fk,zk,Pk,Dk,Mk,Vk,$k,Ik,Hk,Jk,Kk,Qk,Gk,Rk,Yk,Xk,Zk,_k,np,sp,ap,tp,op,ep,cp,kp,pp,lp,up,mp,Wp,ip,rp,Up,dp,hp,yp,fp,wp,gp,bp,vp,xp,jp,Sp,Ap],64)}}}}]);